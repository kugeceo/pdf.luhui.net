　
　
　
　
　
　
　
　写给聪明程序员的傻瓜型光盘读物　编程魔法师ＤＥＬＰＨＩ入门实战百例　　
作者：金石通工作室　　　　责任编辑：安世伟　
　　
　
　
　
　
　
　
　
　
　
　杂志社　　　
　ｉ　目　　　　录　　第１章　欢迎进入Ｄｅｌｐｈｉ程序员的世界．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１１ 
１．１　Ｄｅｌｐｈｉ概述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１１ 
１．２　“欢迎进入Ｄｅｌｐｈｉ程序员世界”程序．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１３ 
１．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１３ 
１．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１４ 
１．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１８ 
１．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０ 第２章　认识Ｄｅｌｐｈｉ．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１ 
２．１　Ｄｅｌｐｈｉ安装与卸载．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１ 
２．１．１　Ｄｅｌｐｈｉ安装．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１ 
２．１．２　Ｄｅｌｐｈｉ卸载．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７ 
２．２　Ｄｅｌｐｈｉ的ＩＤＥ．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８ 
２．２．１　ＩＤＥ概貌．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９ 
２．２．２　菜单．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９ 
２．２．３　工具栏．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３２ 
２．２．４　控件栏．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３３ 
２．２．５　对象查看器．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３３ 
２．２．６　代码编辑框．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３４ 
２．３　Ｄｅｌｐｈｉ程序结构．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３４ 
２．３．１　Ｐｒｏｊｅｃｔ１．ｄｐｒ．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３４ 
２．３．２　Ｕｎｉｔ１．ｐａｓ．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３５ 
２．３．３　Ｕｎｉｔ１．ｄｆｍ．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３５ 
２．４　Ｄｅｌｐｈｉ程序编制过程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３６ 
２．５　获得Ｄｅｌｐｈｉ帮助．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３７ 
２．５．１　Ｄｅｌｐｈｉ系统帮助文件．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３７ 
２．５．２　从网络上得到Ｄｅｌｐｈｉ帮助文件．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３９ 第３章　Ｄｅｌｐｈｉ的语言―Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言．．．．．．．．．．．．．．．．．．．．．．．．．．４０ 
３．１　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ简介．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４０ 
３．２　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的词汇．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４１ 
３．２．１　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的识别字．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４１ 
３．２．２　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的数据类型．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４２ 
３．２．３　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的运算符号．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４５ 　
　　ｉｉ　３．３　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的标点符号．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４７
 
３．４　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的句法．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４７ 
３．４．１　变量定义语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４７ 
３．４．２　常量定义语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４８ 
３．４．３　赋值语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４８ 
３．４．４　Ｉｆ．．Ｔｈｅｎ．．Ｅｌｓｅ语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４９ 
３．４．５　Ｃａｓｅ语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４９ 
３．４．６　Ｒｅｐｅａｔ．．Ｕｎｔｉｌ语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．４９ 
３．４．７　Ｗｈｉｌｅ．．Ｄｏ语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５０ 
３．４．８　Ｆｏｒ．．Ｄｏ语句．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５０ 
３．５　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的文法．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５０ 
３．５．１　过程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５０ 
３．５．２　函数．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５１ 
３．５．３　应用实例――我的加法器．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５１ 
３．６　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的对象和异常．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５７ 
３．６．１　对象概念的理解．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５７ 
３．６．２　对象特性的理解．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５８ 
３．６．３　透过现象看本质．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５８ 
３．６．４　对象的范围．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．５９ 
３．６．５　理解异常．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６０ 
３．６．６　异常处理实例．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６０ 
３．７　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言程序调试．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６１ 
３．７．１　程序常见错误．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６１ 
３．７．２　如何减少错误．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６１ 
３．７．３　Ｄｅｌｐｈｉ程序调试手段．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６２ 
３．７．４　调试窗口工具．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６２ 第４章　表单的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６３ 
４．１　ＶＣＬ的基本知识．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６３ 
４．２　表单的认识．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６４ 
４．２．１　通过帮助文件了解表单在ＶＣＬ中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６４ 
４．２．２　从实例了解表单的实际应用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６５ 
４．２．３　表单的属性、方法、事件．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６５ 
４．３　基本表单程序设计．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６７ 
４．３．１　单表单程序设计．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．６７ 
４．３．２　多表单程序设计．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．７１ 
４．４　表单实例――自适应表单．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．７７ 
４．４．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．７７ 
４．４．２　相关知识．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．７８ 　
　ｉｉｉ　４．４．３　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．７８
 
４．４．４　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８０ 
４．４．５　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８４ 
４．５　表单实例――不规则表单．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８４ 
４．５．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８４ 
４．５．２　相关知识．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８４ 
４．５．３　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８５ 
４．５．４　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８６ 
４．５．５　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８８ 
４．６　表单实例――随意拖动表单．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８９ 
４．６．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８９ 
４．６．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．８９ 
４．６．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９１ 
４．６．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９４ 
４．７　表单实例――无表单程序设计．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９４ 
４．７．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９４ 
４．７．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９５ 
４．７．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９６ 
４．７．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９６ 第５章　控件的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９９ 
５．１　菜单的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９９ 
５．１．１　两种菜单介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．９９ 
５．１．２　菜单设计步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１００ 
５．１．３　菜单实例――菜单的灰度控制．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１０６ 
５．１．４　菜单实例――双语菜单．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１１１ 
５．１．５　菜单实例――图形化菜单．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１１９ 
５．２　标签的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１２３ 
５．２．１　标签介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１２３ 
５．２．２　带快捷键标签．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１２３ 
５．２．３　标签实例――动态标签．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１２７ 
５．３　编辑框的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１３３ 
５．３．１　编辑框介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１３３ 
５．３．２　编辑框实例――密码检验编辑框．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１３４ 　
　　ｉｖ　５．４　Ｍｅｍｏ的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１４０
 
５．４．１　Ｍｅｍｏ介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１４０ 
５．４．２　Ｍｅｍｏ实例――Ｍｅｍｏ数据交换．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１４０ 
５．４．３　Ｍｅｍｏ实例――Ｍｅｍｏ的查找功能．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１４６ 
５．５　按钮的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１５２ 
５．５．１　按钮介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１５２ 
５．５．２　按钮实例――支持键盘的按钮．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１５３ 
５．５．３　按钮实例――ＢｉｔＢｔｎ实例．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１５７ 
５．６　选项按钮的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１６２ 
５．６．１　选项按钮的介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１６２ 
５．６．２　选项按钮实例――单选框、多选框应用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１６３ 
５．７　列表框的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１６８ 
５．７．１　列表框的介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１６８ 
５．７．２　列表框实例――列表框应用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１６９ 
５．８　界面控件的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１７４ 
５．８．１　界面控件介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１７４ 
５．８．２　界面控件实例――界面控件应用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１７５ 
５．９　对话框控件使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１８１ 
５．９．１　对话框控件介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１８１ 
５．９．２　对话框控件实例――设置Ｍｅｍｏ内容字体和颜色．．．．．．．．．．．．．．．．．．．．．．１８３ 
５．１０　图形控件的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１８８ 
５．１０．１　图形控件介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１８８ 
５．１０．２　图形控件实例――ＪＰＥＧ图形操作．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１８８ 
５．１１　定时控件的使用．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１９５ 
５．１１．１　定时控件介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．１９５ 
５．１１．２　定时控件实例――用Ｔｉｍｅｒ取系统时间．．．．．．．．．．．．．．．．．．．．．．．．．．．．１９５ 第６章　绘图编程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０３ 
６．１　画布介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０３ 
６．２　绘图实例――画笔应用实例．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０４ 
６．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０４ 
６．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０４ 
６．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０５ 
６．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２０９ 第７章　多媒体编程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１０ 
７．１　多媒体控件介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１０ 
７．２　多媒体实例――ＭＰ３播放器．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１１ 　
　ｖ　７．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１１
 
７．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１１ 
７．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１２ 
７．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１６ 第８章　ＭＤＩ编程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１７ 
８．１　ＭＤＩ介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１７ 
８．２　ＭＤＩ实例――多文档文本编辑器．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１７ 
８．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１７ 
８．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２１７ 
８．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２２２ 
８．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３５ 第９章　Ｄｅｌｐｈｉ数据库编程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３６ 
９．１　数据库概念介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３６ 
９．２　数据库实例．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３７ 
９．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３７ 
９．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３７ 
９．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２３９ 
９．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４４ 第１０章　Ｄｅｌｐｈｉ网络编程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４５ 
１０．１　网络介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４５ 
１０．２　网络编程实例――我的Ｗｅｂ浏览器．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４７ 
１０．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４７ 
１０．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４７ 
１０．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２４８ 
１０．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２５３ 
１０．３　网络编程实例――我的邮件工具．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２５４ 
１０．３．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２５４ 
１０．３．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２５４ 
１０．３．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２５８ 
１０．３．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７４ 第１１章　ＤＬＬ编程．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７５ 
１１．１　ＤＬＬ介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７５ 
１１．２　ＤＬＬ应用实例――程序热键．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７６ 　
　　ｖｉ　１１．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７６
 
１１．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２７６ 
１１．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８０ 
１１．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８３ 第１２章　自制Ｄｅｌｐｈｉ控件．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８４ 
１２．１　控件介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８４ 
１２．２　控件制作――动感标签控件．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８４ 
１２．２．１　程序描述．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８４ 
１２．２．２　设计详细步骤．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８５ 
１２．２．３　完整的程序代码．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２８９ 
１２．２．４　程序在光盘中的位置．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９１ 第１３章　附录．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９２ 
１３．１　Ｄｅｌｐｈｉ快捷键．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９２ 
１３．２　Ｄｅｌｐｈｉ编译运行错误信息．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９５ 
１３．２．１　编译错误．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９５ 
１３．２．２　运行错误．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９５ 
１３．３　Ｄｅｌｐｈｉ系统函数．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．２９５ 
１３．４　Ｄｅｌｐｈｉ站点介绍．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３０２ 第１４章　参考文献．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．．３０２ 　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　11 
　第１章
　欢迎进入Ｄｅｌｐｈｉ程序员的世界　　
◆本章内容：　
●　Ｄｅｌｐｈｉ概述　
●　一个简单Ｄｅｌｐｈｉ程序实例　
◆本章目标：　
●　了解Ｄｅｌｐｈｉ发展历程　
●　了解Ｄｅｌｐｈｉ各版本基本特征　
●　了解Ｄｅｌｐｈｉ编程工具优点　
●　掌握Ｄｅｌｐｈｉ彩蛋调出方法　
●　掌握Ｄｅｌｐｈｉ简单程序编写过程　１．１
 Ｄｅｌｐｈｉ概述　Ｄｅｌｐｈｉ是古希腊地名，传说宙斯放飞两只巨鹰，从东西两个方向相向而飞，在两鹰相遇之地，宙斯投
下圣石，宣布这里就是世界的中心，这样Ｄｅｐｈｉ――希腊的古都（如图１．１－１所示）便成了古希腊人心目中
的世界中心，神圣之地，最终又演化成了智慧的象征。　
　
　　　　　　　　　　图
 1.1-1  Delphi5“About”窗口      图 1.1-2  藏在About窗口中的彩蛋 　■　Ａｂｏｕｔ窗口的查看　１、 安装Ｄｅｌｐｈｉ系统（请参看第２章“Ｄｅｌｐｈｉ安装卸载”）　
２、 启动Ｄｅｌｐｈｉ系统　
３、 在Ｄｅｌｐｈｉ系统中选择菜单【Ｈｅｌｐ→Ａｂｏｕｔ…】　第１章　　　欢迎进入Ｄｅｌｐｈｉ程序员的世界　
　12                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　■　藏在Ａｂｏｕｔ窗口中的彩蛋　在Ａｂｏｕｔ窗口中按下【Ａｌｔ】键，同时输入【ｔｅａｍ】即可调出Ｄｅｌｐｈｉ彩蛋。如图１．１－２所示：　
１９９５年２月Ｂｏｒｌａｎ公司（现已和Ｉｎｐｒｉｓｅ合并）推出Ｄｅｌｐｈｉ１．０，希望她是智慧的化身，是世界编程
工具的集大成者。从此Ｄｅｌｐｈｉ摆脱了其前身Ｐａｓｃａｌ的纠缠，迈出了全新的一步。当年美国软件评比中Ｄｅｌｐｈｉ
获得开发工具类第一名，领先Ｖｉｓｕａｌ　Ｂａｓｉｃ４．０版。可惜由于种种原因，当时这一新生力量在编程界尚未能
引领潮流。　
１９９６年Ｂｏｒｌａｎｄ公司继续推出Ｄｅｌｐｈｉ２，开始支持Ｗｉｎｄｏｗｓ／ＮＴ的３２位功能，支持多线程、ＡｃｔｉｖｅＸ／ＯＬＥ
等Ｗｉｎ３２特性。如果说１９９５年推出的Ｄｅｌｐｈｉ１．０只是个Ｄｅｌｐｈｉ产品的试验品的话，那么这次推出的Ｄｅｌｐｈｉ２
则给业界一阵清新的空气。很多厌倦了Ｃ＋＋繁琐性的程序员开始选择了Ｄｅｌｐｈｉ２。　
１９９７年Ｂｏｒｌａｎｄ公司不负众望，继续推出Ｄｅｌｐｈｉ３。Ｄｅｌｐｈｉ３是第一个３２位快速应用程序开发环境（ＲＡＤ：
Ｒａｐｉｄ　Ａｐｐｌｉｃａｔｉｏｎ　Ｄｅｖｅｌｏｐｍｅｎｔ）。Ｄｅｌｐｈｉ３最大的优点是可以以一半于Ｃ＋＋程序设计时间设计出丝毫不
逊色于Ｃ＋＋的程序。　
１９９９年，Ｄｅｌｐｈｉ４推出，新推出的Ｄｅｌｐｈｉ４版本不但提供真正的面向对象的重用性，还可以在其独一
无二的技术组合中享受各种Ｉｎｔｅｒｎｅｔ应用，即所谓Ｃｏｒｂｏ技术。　
２０００年，Ｄｅｌｐｈｉ５推出（本书所有例程采用中文Ｗｉｎｄｏｗｓ２０００　Ｐｒｏｆｅｓｓｉｏｎａｌ操作系统下的Ｄｅｌｐｈｉ５英
文版）。Ｄｅｌｐｈｉ５启动画面如图１．１－３所示：　
　图
 1.1-3  Delphi5启动画面 新推出的Ｄｅｌｐｈｉ５版本具有如下特点：　
１、 支持ＸＭＬ标准，在Ｗｅｂ上快速提交商业信息；　
２、 利用ＩｎｔｅｒｎｅｔＥｘｐｒｅｓｓ构建高速Ｉｎｔｅｒｎｅｔ应用；　
３、 支持ＡＤＯ（ＡｃｔｉｖｅＸ　Ｄａｔａ　Ｏｂｊｅｃｔ）；　
４、 ＭＩＤＡＳ扩展Ｉｎｔｅｒｎｅｔ应用；　
５、 ＩｎｔｅｒＢａｓｅ　Ｅｘｐｒｅｓｓ构建卓越的关键应用系统；　
６、 Ｂｏｒｌａｎｄ　Ｔｒａｎｓｌａｔｉｏｎ　Ｓｕｉｔｅ将Ｄｅｌｐｈｉ　５应用程序快速地本地化；　
７、 利用Ｄｅｌｐｈｉ的专业ＩＤＥ构建强大、坚固的应用程序；　
８、 Ｖｉｓｕａｌ　Ｃｏｍｐｏｎｅｎｔ　Ｌｉｂｒａｒｙ增强面向对象开发的威力；　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　13 
９、 进一步增强的调试功能使复杂的项目更快地适应市场需求。　
２００１年６月，Ｂｏｒｌａｎｄ　Ｄｅｌｐｈｉ６在上海举行发布会。Ｄｅｌｐｈｉ６被定为成“新一代电子商务开发工具”，
贯彻ＳＯＡＰ（Ｓｉｍｐｌｅ　Ｏｂｊｅｃｔ　Ａｃｃｅｓｓ　Ｐｒｏｔｏｃｏｌ）概念，具有一系列全新概念。　
通过回顾Ｄｅｌｐｈｉ历史，大家也许会有这么一个问题？Ｄｅｌｐｈｉ、Ｃ＋＋以及ＶＢ都是当前流行的程序开发
工具，到底该选择哪一种好呢？客观地讲，选择一门编程语言因人而异，主要取决于如下因素：　
１、 程序基础。如果您是学Ｃ语言出身的，那么不妨选择Ｃ＋＋；如果您学Ｂａｓｉｃ出身的，那么ＶＢ可
能是您较为理想选择；如果您是学Ｐａｓｃａｌ的，那么最后选择Ｄｅｌｐｈｉ了。　
２、 专业与非专业。专业程序员往往选择Ｃ＋＋（专业程序员精通数门编程语言毫不为过），这是因为
Ｃ＋＋的灵活性以及底层功能性；非专业程序员一般选择ＶＢ或者Ｄｅｌｐｈｉ这类ＲＡＤ工具。　
３、 语言的生命力。编程语言的生命力和她的用户群大小以及公司自身经营因素紧密相关。１９９８年，
Ｂｏｒｌａｎｄ并入Ｉｎｔｅｒｐｒｉｓｅ后，笔者一度对Ｄｅｌｐｈｉ产生了动摇，以后Ｄｅｌｐｈｉ的技术支持怎么办？
随着以后Ｄｅｌｐｈｉ５以及最近Ｄｅｌｐｈｉ６的不断推出，我们不难看出Ｄｅｌｐｈｉ是一个相当有开发计划的
产品，其生命力不容置疑。　
４、 程序的易用性。程序易用性包括程序界面、操作步骤以及界面语言等。Ｄｅｌｐｈｉ作为ＲＡＤ语言中佼
佼者，其易用性有目共睹。不过目前Ｄｅｌｐｈｉ仍然没有中文版，最近有一些汉化工具，可惜并不太
理想，尤其是帮助更是Ｅ文连篇，看得头都大了。不过好消息也不断出来，最近Ｂｏｒｌａｎｄ与国内
一些大学频繁接触并有出Ｄｅｌｐｈｉ中文版之意向。　
一句话，专业程序员用ｃ，聪明程序员用Ｄｅｌｐｈｉ。或许这句经典而实在的Ｄｅｌｐｈｉ评价对您选择编程语
言会有所帮助吧。如果您还犹豫不决的话，那就继续看看下面关于Ｄｅｌｐｈｉ优点的表述吧：　
１、 不仅能生成极佳的可执行程序，而且还能够编译生成ＤＬＬ动态链接库。　
２、 编译效率高，编译出的可执行代码质量更好。可快速开发出符合各种要求的各类Ｗｉｎｄｏｗｓ应用软
件，设备驱动程序以及ＤＬＬ和ＶＢＸ可装卸模块。　
３、 Ｄｅｌｐｈｉ是一个灵活多变的多功能平台，它也可以很好地支持ＯＤＢＣ以及Ｃｌｉｅｎｔ／ｓｅｒｖｅｒ模式，能够
方便地操纵本地以及大型分布式网络（如ＳＱＬ　Ｓｅｒｖｅｒ，Ｏｒａｃｌｅ，Ｉｎｆｏｒｍｉｘ等）上的各类数据库文件。　
４、 具有扩充性，可产生ＤＬＬ，ＶＢＸ或ＯＬＥ２．０　Ｓｅｒｖｅｒ，有重用性的查询控制（Ｑｕｅｒｙ　Ｃｏｎｔｒｏｌ），有表控
制（Ｔａｂｌｅ　Ｃｏｎｔｒｏｌ）等。　
５、 基于Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的Ｄｅｌｐｈｉ，可开发大中型软件。　
　１．２
 “欢迎进入Ｄｅｌｐｈｉ程序员世界”程序　１．２．１ 程序描述　通过一个简单的“欢迎进入Ｄｅｌｐｈｉ程序员世界”程序，我们来学习Ｄｅｌｐｈｉ程序的编写基本过程。　第１章　　　欢迎进入Ｄｅｌｐｈｉ程序员的世界　
　14                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　１．２．２ 设计详细步骤　１、 启动Ｄｅｌｐｈｉ系统，这时Ｄｅｌｐｈｉ系统会自动创建一个标题为【Ｆｏｒｍ１】的表单，如图１．２－１所示：　
　图
 1.2-1  系统自动创建标题为Form1的表单 ２、 选择菜单【Ｆｉｌｅ（文件）→Ｓａｖｅ　Ａｌｌ（保存全部）】（如图１．２－２所示），或者单击快捷工具栏的【Ｓａｖｅ　
Ａｌｌ】按钮（如图１．２－３所示）。　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　图
 1.2-2  【Save All】菜单                           图 1.2-3  【Save All】按钮 ３、 保存全部包括：保存Ｕｎｉｔ（单元）和Ｐｒｏｊｅｃｔ（工程）两个文件，其中单元一般保存成一个＊．ｐａｓ《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　15 
文件，缺省文件名为Ｕｎｉｔ１。如图１．２－４所示：　
　图
 1.2-4  【Save Unit As】窗口 而工程文件一般保存成一个＊．ｄｐｒ文件，缺省文件名为Ｐｒｏｊｅｃｔ１。如图１．２－５所示：　
　图
 1.2-5  【Save Project As】窗口 ★　这里为什么还没有开始设计程序就保存？因为在程序工作过程中经常会死机的，先保存工
程和单元，以后只要有改动，按动【Ｃｔｒｌ＋Ｓ】快捷键就可以随时保存改动结果，以避免不
必要的损失。　
４、 保存好之后，所在目录下将会出现如下６个文件，用资源管理器查看这些文件，如图１．２－６所示：　
　图
 1.2-6  Dephi程序基本文件查看图 第１章　　　欢迎进入Ｄｅｌｐｈｉ程序员的世界　
　16                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　其中【Ｕｎｉｔ１．ｐａｓ】和【Ｐｒｏｊｅｃｔ１．ｄｐｒ】是我们刚才保存的，其他４个是系统自动生成的，各文件作用
解释如表１．２－１所示：　表
 1.2-1  Delphi程序基本文件表 文件　功能　
Ｐｒｏｊｅｃｔ１．ｃｆｇ　ｃｏｎｆｉｇ文件，用来定义编译指令和编译环境　
Ｐｒｏｊｅｃｔ１．ｄｏｆ　工程预定义文件，用来定义工程的属性　
Ｐｒｏｊｅｃｔ１．ｄｐｒ　工程文件　
Ｐｒｏｊｅｃｔ１．ｒｅｓ　资源文件，用来保存工程中所用到的图形、鼠标等资源信息　
Ｕｎｉｔ１．ｄｆｍ　表单文件，用来保存表单（有的地方称之为窗体）信息　
Ｕｎｉｔ１．ｐａｓ　单元文件　
　
这些文件都可以用记事本打开观看，其中重点是Ｕｎｉｔ１．ｐａｓ和Ｐｒｏｊｅｃｔ１．ｄｐｒ这两个文件，它们有
特定的结构，我们手工写出来的程序代码都是保存在这里的。（参考第２章　　Ｄｅｌｐｈｉ的程序结构）　
　
５、 选择【Ｃｏｍｐｏｎｅｔ　Ｐａｌｌｅｔｅ（控件盘）】中【Ｓｔａｎｄａｒｄ（标准页）】页，双击【Ｅｄｉｔ（编辑框）】控件，
这时表单上将出现一个名为ｅｄｉｔ１的控件。如图１．２－７所示：　
　　图
 1.2-7  在【Form1】中添加【Edit】控件  图 1.2-8  调整【Edit1】控件大小 ６、 选中【Ｅｄｉｔ１】控件（用鼠标点击该控件），把鼠标放在【Ｅｄｉｔ１】控件边缘，这时鼠标变成箭头，
按下鼠标并沿箭头方向拖动即可调整控件大小，如图１．２－８所示：　
　
７、 双击【Ｂｕｔｔｏｎ（按钮）】控件，表单上将同样出现一个名为ｂｕｔｔｏｎ１的控件。如图１．２－９所示：　
　　　　　图
 1.2-9  在【Form1】中添加【Button】控件   图 1.2-10  修改【Button1】标题 《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　17  ★如果表单上这两个控件有重叠，请用鼠标拖动它们到正确美观的位置。　
　
８、 单击选中【Ｂｕｔｔｏｎ１】按钮控件，在【Ｏｂｊｅｃｔ　Ｉｎｓｐｅｃｔｏｒ（对象察看器）】的【Ｐｒｏｐｅｒｔｉｅｓ（属性）】
页【Ｃａｐｔｉｏｎ（标题）】中填入“单击我”。如图１．２－１０所示：　
　
★看看Ｂｕｔｔｏｎ１上的字是否已经改变？　
　
９、 双击【Ｂｕｔｔｏｎ１】按钮，系统自动转到代码编辑框，在【ｂｅｇｉｎ】和【ｅｎｄ】之间输入【ｅｄｉｔ１．Ｔｅｘｔ：＝＇
欢迎进入Ｄｅｌｐｈｉ程序员世界！＇；】。如图１．２－１１所示：　
　图
 1.2-11  输入【Button1】被单击所响应的代码 ★　这里ｅｄｉｔ１就是编辑框控件的名字，中间一点代表点操作，紧接着的Ｔｅｘｔ是ｅｄｉｔ１的内
容属性。在Ｄｅｌｐｈｉ中每个控件都有很多属性，如编辑框Ｅｄｉｔ控件除了上面的Ｔｅｘｔ属性
外，还有Ｈｅｉｇｈｔ（高）、Ｗｉｄｔｈ（宽）等属性。一个控件就像一个积木一样，有长宽高以
及颜色等属性，这就是面向对象语言以及可视化编程的一个重要概念――对象和属性的概
念。紧接的【：＝】（冒号＋等号）是赋值语句，就是让前面的对象的内容属性等于后面的内
容的意思，或者说把后面的值赋给前面的变量。接着的＇欢迎进入Ｄｅｌｐｈｉ程序员世界！＇
（注意是单引号）就是字符串值（一种变量类型，每一门语言中都有很多变量类型，如整
型、字符串型等等，参考第３章　　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的数据类型）。　
１０、再次保存工程，选择菜单【Ｒｕｎ（运行）→Ｒｕｎ】，或者选择快捷工具栏的Ｒｕｎ按钮（向右的绿色箭
头），或者直接按动Ｆ９按钮，工程就开始编译，编译成功后程序自动执行（运行界面如图１．２－１２
所示）。　
　　　　图
 1.2-12  【欢迎进入Delphi程序员世界】界面     图 1.2-13  编译后Delphi增加的文件 第１章　　　欢迎进入Ｄｅｌｐｈｉ程序员的世界　
　18                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　★　Ｄｅｌｐｈｉ应用程序编制完成后，看看保存工程的文件夹，下面会增加【＊．￣ＤＦＭ】、【＊．￣ＰＡＳ】
两个临时文件，可以删除。另外还有一个【＊．ＤＣＵ】已编译单元文件以及一个【＊．ｅｘｅ】可
执行文件。如图１．２－１３所示：　１．２．３
 完整的程序代码　为了便于读者朋友参考，我们列出了本程序完整的程序代码。当您的程序编译运行出错时，请对照如
下程序代码，找出出错原因：　　
【Ｐｒｏｊｅｃｔ１．ｄｐｒ】　
ｐｒｏｇｒａｍ　Ｐｒｏｊｅｃｔ１；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　Ｕｎｉｔ１　ｉｎ　＇Ｕｎｉｔ１．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【Ｕｎｉｔ１．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　２４２　
　　Ｔｏｐ　＝　１２１　
　　Ｗｉｄｔｈ　＝　４７５　
　　Ｈｅｉｇｈｔ　＝　１８２　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　19 
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ１：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　１３６　
　　　　Ｔｏｐ　＝　２４　
　　　　Ｗｉｄｔｈ　＝　２６５　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　Ｔｅｘｔ　＝　＇Ｅｄｉｔ１＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　１６８　
　　　　Ｔｏｐ　＝　７２　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇单击我＇　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
【Ｕｎｉｔ１．ｐａｓ】　
ｕｎｉｔ　Ｕｎｉｔ１；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｅｄｉｔ１：　ＴＥｄｉｔ；　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　第１章　　　欢迎进入Ｄｅｌｐｈｉ程序员的世界　
　20                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｅｄｉｔ１．Ｔｅｘｔ：＝＇欢迎进入Ｄｅｌｐｈｉ程序员世界！＇；　
ｅｎｄ；　
　
ｅｎｄ．　
　　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　21 
　第２章
　认识Ｄｅｌｐｈｉ　　
◆本章内容：　
●　Ｄｅｌｐｈｉ安装与卸载　
●　Ｄｅｌｐｈｉ　ＩＤＥ介绍　
●　Ｄｅｌｐｈｉ程序结构　
●　Ｄｅｌｐｈｉ程序编制过程　
●　获得Ｄｅｌｐｈｉ帮助　
◆本章目标：　
●　掌握Ｄｅｌｐｈｉ系统安装卸载详细步骤　
●　初步了解Ｄｅｌｐｈｉ　ＩＤＥ　
●　熟练理解掌握Ｄｅｌｐｈｉ程序结构　
●　了解Ｄｅｌｐｈｉ程序编制过程　
●　掌握获得Ｄｅｌｐｈｉ帮助的方法　２．１
 Ｄｅｌｐｈｉ安装与卸载　２．１．１ Ｄｅｌｐｈｉ安装　２．１．１．１ Ｄｅｌｐｈｉ的软硬件要求　安装Ｄｅｌｐｈｉ之前，请确认您的电脑满足Ｄｅｌｐｈｉ程序的最低软硬件要求。如何知道不同Ｄｅｌｐｈｉ版本软
硬件要求呢？这些软硬件要求在Ｄｅｌｐｈｉ系统的Ｒｅａｄｍｅ．ｔｘｔ的【Ｍｉｎｉｍｕｍ　ｓｙｓｔｅｍ　ｒｅｑｕｉｒｅｍｅｎｔｓ】（最低系统
要求）段中有清楚的表述，Ｄｅｌｐｈｉ５的软硬件要求如图２．１－１所示：　
　图
 2.1-1  Delphi5软硬件要求 第２章　　　认识　Ｄｅｌｈｐｉ　
　22                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　这些软硬件要求如下：　
●　Ｉｎｔｅｌ　Ｐｅｎｔｉｕｍ　９０　以上微处理器（建议Ｐ１６６）；　
●　Ｍｉｃｒｏｓｏｆｔ　Ｗｉｎｄｏｗｓ　９５，　９８，　带Ｓｅｒｖｉｃｅ　Ｐａｃｋ３以上的ＮＴ　４．０操作系统；　
●　至少３２Ｍ内存（建议６４ＭＢ）；　
●　至少８０Ｍ硬盘空间（最小化安装）；　
●　ＣＤ－ＲＯＭ驱动器；　
●　至少ＶＧＡ分辨率的显示器；　
●　鼠标或其他定位设备；　
●　微软网络支持。　２．１．１．２
 Ｄｅｌｐｈｉ的安装过程　Ｄｅｌｐｈｉ安装全过程共有１３个步骤，其安装界面采用通用应用程序安装界面。　１． Ｄｅｌｐｈｉ企业套件安装程序窗口　插入Ｄｅｌｐｈｉ安装盘，如果您的ＣＤ－ＲＯＭ驱动器支持【自动执行】功能，那么系统将自动跳出【Ｄｅｌｐｈｉ　
Ｅｎｔｅｒｐｒｉｓｅ　Ｓｕｉｔｅ　Ｓｅｔｕｐ　Ｌａｕｎｃｈｅｒ】窗口。否则，通过运行安装盘根目录下的【ｉｎｓｔａｌｌ．ｅｘｅ】也可调出该
窗口，如图２．１－２所示：　
　图
 2.1-2  Delphi企业套件安装程序 ２． 欢迎窗口　在【Ｄｅｌｐｈｉ　Ｅｎｔｅｒｐｒｉｓｅ　Ｓｕｉｔｅ　Ｓｅｔｕｐ　Ｌａｕｎｃｈｅｒ】窗口中按动【Ｄｅｌｐｈｉ】按钮，进入【Ｗｅｌｃｏｍｅ】窗口，
如图２．１－３所示：　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　23 
　图
 2.1-3  欢迎窗口 ３． 密码对话窗口　在【Ｗｅｌｃｏｍｅ】窗口中按动【Ｎｅｘｔ】按钮，进入【Ｐａｓｓｗｏｒｄ　Ｄｉａｌｏｇ】窗口，如图２．１－４所示：　
　　　图
 2.1-4  密码对话窗口     图 2.1-5  同意软件许可 ４． 同意软件许可窗口　在【Ｐａｓｓｗｏｒｄ　Ｄｉａｌｏｇ】窗口中填入正确的【Ｓｅｒｉａｌ　Ｎｕｍｂｅｒ】和【Ａｕｔｈｏｒｉｚａｔｉｏｎ　Ｋｅｙ】后，按动【Ｎｅｘｔ】
按钮，进入【Ｓｏｆｔｗａｒｅ　Ｌｉｃｅｎｓｅ　Ａｇｒｅｅｍｅｎｔ】窗口，如图２．１－５所示：　５．
 提示窗口　在【Ｓｏｆｔｗａｒｅ　Ｌｉｃｅｎｓｅ　Ａｇｒｅｅｍｅｎｔ】窗口中按动【Ｙｅｓ】按钮，进入【Ｉｎｆｏｒｍａｔｉｏｎ】窗口，如图２．１－６第２章　　　认识　Ｄｅｌｈｐｉ　
　24                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　所示：　
　　图
 2.1-6  提示窗口      图 2.1-7  安装类型选择 ６． 安装类型选择窗口　在【Ｉｎｆｏｒｍａｔｉｏｎ】窗口中按动【Ｎｅｘｔ】按钮，进入【Ｓｅｔｕｐ　Ｔｙｐｅ】窗口，如图２．１－７所示：　
有【Ｔｙｐｉｃａｌ】、【Ｃｏｍｐａｃｔ】、【Ｃｕｓｔｏｍ】三种安装类型，默认情况下是【Ｔｙｐｉｃａｌ】安装，共需２２０Ｍ硬
盘空间，选择【Ｃｏｍｐａｃｔ】安装，只需８０Ｍ硬盘空间。　７．
 其他安装选项窗口　在【Ｓｅｔｕｐ　Ｔｙｐｅ】窗口中选择【Ｔｙｐｉｃａｌ】安装类型，按动【Ｎｅｘｔ】按钮，进入【Ｅｘｔｅｒｎａｌ　Ｉｎｓｔａｌｌａｔｉｏｎ　
Ｏｐｔｉｏｎｓ】窗口，如图２．１－８所示：　
　　　　图
 2.1-8  其他安装选项     图 2.1-9  同意远程数据集协议  《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　25 ８．
 同意远程数据集协议窗口　　
在【Ｅｘｔｅｒｎａｌ　Ｉｎｓｔａｌｌａｔｉｏｎ　Ｏｐｔｉｏｎｓ】窗口中选上【Ｉｎｓｔａｌｌ　ＩｎｔｅｒＢａｓｅ　Ｃｌｉｅｎｔ】选项，按动【Ｎｅｘｔ】
按钮，进入【Ｒｅｍｏｔｅ　Ｄａｔａｓｅｔ　Ｌｉｃｅｎｓｅ　Ａｇｒｅｅｍｅｎｔ】窗口，如图２．１－９所示：　９．
 选择控件安装目录窗口　在【Ｒｅｍｏｔｅ　Ｄａｔａｓｅｔ　Ｌｉｃｅｎｓｅ　Ａｇｒｅｅｍｅｎｔ】窗口中按动【Ａｇｒｅｅ】按钮，进入【Ｓｅｌｅｃｔ　Ｃｏｍｐｏｎｅｎｔ　
Ｄｉｒｅｃｔｏｒｉｅｓ】窗口，如图２．１－１０所示：　
　图
 2.1-10  选择控件安装目录 １０． 选择程序文件夹窗口　在【Ｓｅｌｅｃｔ　Ｃｏｍｐｏｎｅｎｔ　Ｄｉｒｅｃｔｏｒｉｅｓ】框中填入合适目录（最好不要改动，选用默认的系统目录）后，
按动【Ｎｅｘｔ】按钮，进入【Ｓｅｌｅｃｔ　Ｐｒｏｇｒａｍ　Ｆｏｌｄｅｒ】窗口，如图２．１－１１所示：　
　图
 2.1-11  选择程序文件夹 第２章　　　认识　Ｄｅｌｈｐｉ　
　26                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　１１． 开始复制文件窗口　在【Ｓｅｌｅｃｔ　Ｐｒｏｇｒａｍ　Ｆｏｌｄｅｒ】窗口中填入合适的文件夹（可以不改动而选用默认的文件夹）后，按动
【Ｎｅｘｔ】按钮，进入【Ｓｔａｒｔ　Ｃｏｐｙｉｎｇ　Ｆｉｌｅｓ】窗口，如图２．１－１２所示：　
　　　图
 2.1-12  开始复制文件      图 2.1-13  程序安装进度 １２． 程序安装进度窗口　在【Ｓｔａｒｔ　Ｃｏｐｙｉｎｇ　Ｆｉｌｅｓ】窗口中按动【Ｎｅｘｔ】按钮，进入【Ｄｅｌｐｈｉ５　Ｓｅｔｕｐ】窗口，如图２．１－１３所
示。　１３．
 程序安装完成窗口　程序安装完成后，系统自动进入【Ｓｅｔｕｐ　Ｃｏｍｐｌｅｔｅ】窗口，如图２．１－１４所示：　
　图
 2.1-14  程序安装完成 《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　27 
保存好其他应用程序数据，选择【Ｙｅｓ，Ｉ　ｗａｎｔ　ｔｏ　ｒｅｓｔａｒｔ　ｍｙ　ｃｏｍｐｕｔｅｒ　ｎｏｗ．】选项，按动【Ｆｉｎｉｓｈ】
按钮，系统自动重新启动，完成程序安装全过程。也可选择【Ｎｏ，Ｉ　ｗｉｌｌ　ｒｅｓｔａｒｔ　ｍｙ　ｃｏｍｐｕｔｅｒ　ｌａｔｅｒ．】
选项，按动【Ｆｉｎｉｓｈ】按钮，稍后重新启动。　２．１．２
 Ｄｅｌｐｈｉ卸载　２．１．２．１ 控制面板窗口　选择【开始】→【设置】→【控制面板】，进入【控制面板】窗口，如图２．１－１５所示：　
　　　　　　图
 2.1-15  控制面板        图 2.1-16  添加/删除程序 ２．１．２．２ 添加／删除程序窗口　双击【添加／删除程序】按钮，启动【添加／删除程序】，如图２．１－１６所示：　２．１．２．３ 确认文件删除窗口　在【添加／删除程序】窗口中选择【Ｂｏｒｌａｎｄ　Ｄｅｌｐｈｉ　５】，按动【更改／删除】按钮，进入【Ｃｏｎｆｉｒｍ　Ｆｉｌｅ　
Ｄｅｌｅｔｉｏｎ】窗口，如图２．１－１７所示：　
　图
 2.1-17  确认文件删除 第２章　　　认识　Ｄｅｌｈｐｉ　
　28                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　２．１．２．４ 卸载程序窗口　在【Ｃｏｎｆｉｒｍ　Ｆｉｌｅ　Ｄｅｌｅｔｉｏｎ】窗口中按动【是】按钮，进入【Ｒｅｍｏｖｅ　Ｐｒｏｇｒａｍ　Ｆｒｏｍ　Ｙｏｕｒ　Ｃｏｍｐｕｔｅｒ】
窗口，如图２．１－１８所示：　
　图
 2.1-18  卸载程序 卸载程序过程中，可能会有共享文件是否删除的确认窗口程序，如图所示：　
　图
 2.1-19  卸载共享文件 在【Ｒｅｍｏｖｅ　Ｓｈａｒｅｄ　Ｆｉｌｅ？】窗口中按动【Ｎｏ　ｔｏ　Ａｌｌ】按钮。　
最后，在【Ｒｅｍｏｖｅ　Ｐｒｏｇｒａｍ　Ｆｒｏｍ　Ｙｏｕｒ　Ｃｏｍｐｕｔｅｒ】窗口中按动【Ｆｉｎｉｓｈ】按钮，完成Ｄｅｌｐｈｉ卸载。　２．２
 Ｄｅｌｐｈｉ的ＩＤＥ　Ｄｅｌｐｈｉ的ＩＤＥ（Ｉｎｔｅｇｒａｔｅｄ　Ｄｅｖｅｌｏｐｍｅｎｔ　Ｅｎｖｉｒｏｎｍｅｎｔ，集成开发环境）主要包括：菜单、工具栏、
控件栏、对象查看器、代码编辑框等。　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　29 
　
★ 学习Ｄｅｌｐｈｉ应着重从ＩＤＥ的学习和Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的学习两方面着手！　
★ 学习ＩＤＥ最好的方法是耐心地从头到尾把ＩＤＥ各项内容反复地浏览，随着ＩＤＥ使用次数的增多，
您对ＩＤＥ的认知程度也会不断加深。　２．２．１
 ＩＤＥ概貌　ＩＤＥ各部分组成如图所示：　
　图
 2.2-1  IDE概貌图 ２．２．２ 菜单　正如通常Ｗｉｎｄｏｗｓ程序一样，Ｄｅｌｐｈｉ的ＩＤＥ也有非常丰富的菜单功能，几乎所有的Ｄｅｌｐｈｉ功能都可以
通过菜单操作来辅助完成。　
Ｄｅｌｐｈｉ　ＩＤＥ菜单包括：Ｆｉｌｅ（文件）、Ｅｄｉｔ（编辑）、Ｓｅａｒｃｈ（搜索）、Ｖｉｅｗ（查看）、Ｐｒｏｊｅｃｔ（工程）、
Ｒｕｎ（运行）、Ｃｏｍｐｏｎｅｎｔ（控件）、Ｄａｔａｂａｓｅ（数据库）、Ｔｏｏｌｓ（工具）、Ｈｅｌｐ（帮助）等１０项内容。　
各项菜单内容功能简单介绍如表２．２－１所示：　表
 2.2-1  Delphi IDE 菜单功能表 主菜单　子菜单　功能　
Ｆｉｌｅ　　文件菜单　
　Ｎｅｗ…　打开Ｄｅｌｐｈｉ对象库对话框　
　Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ　创建新工程　
　Ｎｅｗ　Ｆｏｒｍ　创建新表单　第２章　　　认识　Ｄｅｌｈｐｉ　
　30                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　主菜单　子菜单　功能　
　Ｎｅｗ　Ｆｒａｍｅ　创建新帧　
　Ｏｐｅｎ…　打开各种类型文件　
　Ｏｐｅｎ　Ｐｒｏｊｅｃｔ…　打开工程　
　Ｒｅｏｐｅｎ　打开最近打开过的工程或文件　
　Ｓａｖｅ　保存当前文件　
　Ｓａｖｅ　Ａｓ…　当前文件换名另存　
　Ｓａｖｅ　Ｐｒｏｊｅｃｔ　Ａｓ…　当前工程换名另存　
　Ｓａｖｅ　Ａｌｌ　保存当前工程所有文件　
　Ｃｌｏｓｅ　关闭当前活动窗口　
　Ｃｌｏｓｅ　Ａｌｌ　关闭所有打开文件　
　Ｕｓｅ　Ｕｎｉｔ…　加入单元文件到当前表单　
　Ｐｒｉｎｔ…　打印当前表单或单元文件　
　Ｅｘｉｔ　退出系统　
Ｅｄｉｔ　　编辑　
　Ｕｎｄｏ　撤销　
　Ｒｅｄｏ　重复　
　Ｃｕｔ　剪切　
　Ｃｏｐｙ　复制　
　Ｐａｓｔｅ　粘贴　
　Ｄｅｌｅｔｅ　删除　
　Ｓｅｌｅｃｔ　Ａｌｌ　全部选择　
　Ａｌｉｇｎ　ｔｏ　Ｇｒｉｄ　控件靠近栅格对齐　
　Ｂｒｉｎｇ　ｔｏ　Ｆｒｏｎｔ　控件前置　
　Ｓｅｎｄ　ｔｏ　Ｂａｃｋ　控件后置　
　Ａｌｉｇｎ…　打开控件对齐控制对话框　
　Ｓｉｚｅ…　打开控件大小设置对话框　
　Ｓｃａｌｅ…　对表单及其控件比例缩放　
　Ｔａｂ　Ｏｒｄｅｒ…　改变Ｔａｂ键的激活顺序　
　Ｃｒｅａｔｉｏｎ　Ｏｒｄｅｒ…　指定应用程序创建非可视控件顺序　
　Ｆｌｉｐ　Ｃｈｉｌｄｒｅｎ　子控件翻转　
　Ｌｏｃｋ　Ｃｏｎｔｒｏｌｓ　锁定控制　
　Ａｄｄ　ｔｏ　Ｉｎｔｅｒｆａｃｅ…　打开ＡｃｔｉｖｅＸ控制接口增加对话框　
Ｓｅａｒｃｈ　　搜索　
　Ｆｉｎｄ…　查找　
　Ｆｉｎｄ　ｉｎ　Ｆｉｌｅｓ　在文件中查找　
　Ｒｅｐｌａｃｅ…　替换　
　Ｓｅａｒｃｈ　Ａｇａｉｎ　继续查找　
　Ｉｎｃｒｅｍｅｎｔａｌ　Ｓｅａｒｃｈ　递增查找　
　Ｇｏ　ｔｏ　Ｌｉｎｅ　Ｎｕｍｂｅｒ…　定位到第×行　
　Ｆｉｎｄ　Ｅｒｒｏｒ…　查找运行期间错误地址　
　Ｂｒｏｗｓｅ　Ｓｙｍｂｏｌ…　浏览指定符号　
Ｖｉｅｗ　　查看　
　Ｐｒｏｊｅｃｔ　Ｍａｎａｇｅｒ　打开工程管理器　
　Ｔｒａｎｓｌａｔｉｏｎ　Ｍａｎａｇｅｒ　转化管理器　
　Ｏｂｊｅｃｔ　Ｉｎｓｐｅｃｔｏｒ　对象查看器　
　Ｔｏ－Ｄｏ　Ｌｉｓｔ　任务列表　
　Ａｌｉｇｎｍｅｎｔ　Ｐａｌｅｔｔｅ　对齐控制板　
　Ｂｒｏｗｓｅｒ　对象浏览器　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　31 
主菜单　子菜单　功能　
　Ｃｏｄｅ　Ｅｘｐｌｏｒｅｒ　代码浏览器　
　Ｃｏｍｐｏｎｅｎｔ　Ｌｉｓｔ　控件列表　
　Ｗｉｎｄｏｗ　Ｌｉｓｔ…　窗口列表　
　Ｄｅｂｕｇ　Ｗｉｎｄｏｗｓ　Ｄｅｂｕｇ窗口　
　Ｄｅｓｋｔｏｐｓ　桌面（对桌面进行控制）　
　Ｔｏｇｇｌｅ　Ｆｏｒｍ／Ｕｎｉｔ　在表单和单元间切换　
　Ｕｎｉｔｓ…　单元窗口　
　Ｆｏｒｍｓ…　表单窗口　
　Ｔｙｐｅ　Ｌｉｂｒａｒｙ　类库编辑器　
　Ｎｅｗ　Ｅｄｉｔ　Ｗｉｎｄｏｗ　新建代码编辑框　
　Ｔｏｏｌｂａｒｓ　工具栏显示控制　
Ｐｒｏｊｅｃｔ　　工程　
　Ａｄｄ　ｔｏ　Ｐｒｏｊｅｃｔ…　添加工程到对象库　
　Ｒｅｍｏｖｅ　ｆｒｏｍ　Ｐｒｏｊｅｃｔ…　从对象库中移除工程　
　Ｉｍｐｏｒｔ　Ｔｙｐｅ　Ｌｉｂｒａｒｙ…　导入类库　
　Ａｄｄ　ｔｏ　Ｒｅｐｏｓｉｔｏｒｙ…　添加到智库　
　Ｖｉｅｗ　Ｓｏｕｒｃｅ　查看源代码　
　Ｌａｎｇｕａｇｅｓ　语言控制　
　Ａｄｄ　Ｎｅｗ　Ｐｒｏｊｅｃｔ…　打开新建工程窗口　
　Ａｄｄ　Ｅｘｉｓｔｉｎｇ　Ｐｒｏｊｅｃｔ…　添加已有工程　
　Ｃｏｍｐｉｌｅ　Ｐｒｏｊｅｃｔ　编译工程　
　Ｂｕｉｌｄ　Ｐｒｏｊｅｃｔ　编译并链接成动态链接库　
　Ｓｙｎｔａｘ　ｃｈｅｃｋ　Ｐｒｏｊｅｃｔ　文法检查　
　Ｉｎｆｏｒｍａｔｉｏｎ　ｆｏｒ　显示与编译相关信息　
　Ｃｏｍｐｉｌｅ　Ａｌｌ　Ｐｒｏｊｅｃｔｓ　编译所有工程　
　Ｂｕｉｌｄ　Ａｌｌ　Ｐｒｏｊｅｃｔｓ　编译并链接所有工程　
　Ｗｅｂ　Ｄｅｐｌｏｙｍｅｎｔ　Ｏｐｔｉｏｎ　Ｗｅｂ发布选项　
　Ｗｅｂ　Ｄｅｐｌｏｙ　Ｗｅｂ发布　
　Ｏｐｔｉｏｎｓ…　工程选项设置　
Ｒｕｎ　　运行　
　Ｒｕｎ　运行　
　Ａｔｔａｃｈ　ｔｏ　Ｐｒｏｃｅｓｓ…　连接到进程　
　Ｐａｒａｍｅｔｅｒｓ…　运行参数设置　
　Ｒｅｇｉｓｔｅｒ　ＡｃｔｉｖｅＸ　Ｓｅｒｖｅｒ　登记ＡｃｔｉｖｅＸ服务器　
　Ｕｎｒｅｇｉｓｔｅｒ　ＡｃｔｉｖｅＸ　Ｓｅｒｖｅｒ　解除登记ＡｃｔｉｖｅＸ服务器　
　Ｉｎｓｔａｌｌ　ＭＴＳ　Ｏｂｊｅｃｔｓ…　安装ＭＴＳ对象　
　Ｓｔｅｐ　Ｏｖｅｒ　单步执行，过程和函数视为一行　
　Ｔｒａｃｅ　Ｉｎｔｏ　单步执行，进入工程和函数内部　
　Ｔｒａｃｅ　ｔｏ　Ｎｅｘｔ　Ｓｏｕｒｃｅ　Ｌｉｎｅ　类似Ｔｒａｃｅ　Ｉｎｔｏ，但不进入ＡＰＩ内部　
　Ｒｕｎ　ｔｏ　Ｃｕｒｓｏｒ　运行到光标所在处后暂停　
　Ｒｕｎ　ｕｎｔｉｌ　Ｒｅｔｕｒｎ　运行直到返回点　
　Ｓｈｏｗ　Ｅｘｅｃｕｔｉｏｎ　Ｐｏｉｎｔ　光标定位到当前执行点上　
　Ｐｒｏｇｒａｍ　Ｐａｕｓｅ　暂停程序执行　
　Ｐｒｏｇｒａｍ　Ｒｅｓｅｔ　中止程序执行并释放所占资源　
　Ｉｎｓｐｅｃｔ…　打开Ｉｎｓｐｅｃｔ窗口　
　Ｅｖａｌｕａｔｅ／Ｍｏｄｉｆｙ…　计算／改变某表达式值　
　Ａｄｄ　Ｗａｔｃｈ…　设置观察表达式　
　Ａｄｄ　Ｂｒｅａｋｐｏｉｎｔ　添加断点　第２章　　　认识　Ｄｅｌｈｐｉ　
　32                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　主菜单　子菜单　功能　
Ｃｏｍｐｏｎｅｎｔ　　控件　
　Ｎｅｗ　Ｃｏｍｐｏｎｅｎｔ…　创建新控件　
　Ｉｎｓｔａｌｌ　Ｃｏｍｐｏｎｎｅｔ…　把控件添加到已有或新建包中　
　Ｉｍｐｏｒｔ　ＡｃｔｉｖｅＸ　Ｃｏｎｔｒｏｌ…　注册安装ＡｃｔｉｖｅＸ控制　
　Ｃｒｅａｔｅ　Ｃｏｍｐｏｎｎｅｔ　Ｔｅｍｐｌａｔｅ　建立控件模板并加到控件栏上　
　Ｉｎｓｔａｌｌ　Ｐａｃｋａｇｅｓ…　安装包　
　Ｃｏｎｆｉｇｕｒｅ　Ｐａｌｅｔｔｅ…　配置控件栏　
Ｄａｔａｂａｓｅ　　数据库　
　Ｅｘｐｌｏｒｅ　数据库浏览器　
　ＳＱＬ　Ｍｏｎｉｔｏｒ　ＳＱＬ监视器　
　Ｆｏｒｍ　Ｗｉｚａｒｄ…　打开数据库专家　
Ｔｏｏｌｓ　　工具　
　Ｅｎｖｉｒｏｎｍｅｎｔ　Ｏｐｔｉｏｎｓ…　环境选项设置　
　Ｅｄｉｔｏｒ　Ｏｐｔｉｏｎｓ…　代码编辑框选项　
　Ｄｅｂｕｇｇｅｒ　Ｏｐｔｉｏｎｓ…　查错器选项　
　Ｒｅｐｏｓｉｔｏｒｙ…　打开Ｏｂｊｅｃｔ　Ｒｅｐｏｓｉｔｏｒｙ对话框　
　Ｔｒａｎｓｌａｔｉｏｎ　Ｒｅｐｏｓｉｔｏｒｙ…　启动Ｔｒａｎｓｌａｔｉｏｎ　Ｒｅｐｏｓｉｔｏｒｙ程序　
　Ｃｏｎｆｉｇｕｒｅ　Ｔｏｏｌｓ…　实用工具配置　
　Ｄａｔａｂａｓｅ　Ｄｅｓｋｔｏｐ　数据桌面　
　Ｐａｃｋａｇｅ　Ｃｏｌｌｅｃｔｉｏｎ　Ｅｄｉｔｏｒ　包收集编辑器　
　Ｉｍａｇｅ　Ｅｄｉｔｏｒ　图像编辑器　
Ｈｅｌｐ　　帮助　
　Ｄｅｌｐｈｉ　Ｈｅｌｐ　Ｄｅｌｐｈｉ帮助　
　Ｄｅｌｐｈｉ　Ｔｏｏｌｓ　Ｄｅｌｐｈｉ实用工具帮助　
　Ｗｉｎｄｏｗｓ　ＳＤＫ　Ｗｉｎｄｏｗｓ　ＳＤＫ帮助　
　Ｂｏｒｌａｎｄ　Ｈｏｍｅ　Ｐａｇｅ　Ｂｏｒｌａｎｄ　主页　
　Ｄｅｌｐｈｉ　Ｈｏｍｅ　Ｐａｇｅ　Ｄｅｌｐｈｉ　主页　
　Ｄｅｌｐｈｉ　Ｄｅｖｅｌｏｐｅｒ　Ｓｕｐｐｏｒｔ　Ｄｅｌｐｈｉ开发者支持　
　Ｄｅｌｐｈｉ　Ｄｉｒｅｃｔ…　Ｄｅｌｐｈｉ指引（Ｄｅｌｐｈｉ新闻）　
　Ｃｕｓｔｏｍｉｚｅ…　帮助文件个性化　
　Ａｂｏｕｔ…　关于Ｄｅｌｐｈｉ５　２．２．３
 工具栏　在Ｄｅｌｐｈｉ　ＩＤＥ菜单的左下方有若干１６×１６快捷按钮，它们组成Ｄｅｌｐｈｉ　ＩＤＥ的工具栏。Ｄｅｌｐｈｉ　ＩＤＥ工
具栏包括：Ｓｔａｎｄａｒｄ（标准工具栏，如图２．２－２所示）、Ｖｉｅｗ（查看，如图２．２－３所示）、Ｄｅｂｕｇ（如图所示
２．２－４）、Ｄｅｓｋｔｏｐ（桌面，如图２．２－５所示）、Ｃｕｓｔｏｍ（如图２．２－６所示）。　
　　　　　　　　图
 2.2-2  Standard工具栏  图 2.2-3  View工具栏  图 2.2-4  Debug工具栏 　　　　　　　　　　　图 2.2-5  Desktop工具栏       图 2.2-6  Custom工具栏 《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　33 
★ 在工具栏上右键单击，跳出工具栏选项菜单，可以控制某个工具栏的显示与否　２．２．４
 控件栏　控件栏位于Ｄｅｌｐｈｉ　ＩＤＥ菜单的右下方，共有：Ｓｔａｎｄａｒｄ、Ａｄｄｉｔｉｏｎａｌ、Ｗｉｎ３２、Ｓｙｓｔｅｍ、Ｄａｔａ　Ａｃｃｅｓｓ、
Ｄａｔａ　Ｃｏｎｔｒｏｌｓ、ＡＤＯ、ＩｎｔｅｒＢａｓｅ、Ｍｉｄａｓ、ＩｎｔｅｒｎｅｔＥｘｐｒｅｓｓ、Ｉｎｔｅｒｎｅｔ、ＦａｓｔＮｅｔ、Ｄｅｃｉｓｉｏｎ　Ｃｕｂｅ、Ｑｒｅｐｏｒｔ、
Ｄｉａｌｏｇｓ、Ｗｉｎ３．１、Ｓａｍｐｌｅｓ、ＡｃｔｉｖｅＸ、Ｓｅｒｖｅｒｓ等１９类控件。如图所示：　
　图
 2.2-7  Delphi IDE 控件栏 ２．２．５ 对象查看器　在Ｄｅｌｐｈｉ中，Ｏｂｊｅｃｔ　Ｉｎｓｐｅｃｔｏｒ（对象查看器）具有非常重要的作用，主要用于设计期间控件属性和
事件的设置。如图所示：　
　　　图
 2.2-8  对象查看器     图 2.2-9  Delphi代码编辑框 对象查看器的上部是一个下拉列表框，列出了当前活动表单上所有控件以及它们的类名。这样，用户
除了在表单上直接用鼠标单击选中控件外，还可以通过对象查看器的下拉列表框选择。　
★　当无法直接在表单中选取控件时，通常使用对象查看器的下拉列表框来选择　
　
对象查看器的【Ｐｒｏｐｅｒｔｉｅｓ】页用于设置控件的属性，左边为控件属性名称，右边为该属性值。　
★ 对象查看器【属性】值若有【…】符号，表明该按钮有进一步对话框可供设置。　
★ 对象查看器【属性】值若有下拉列表框，可以在双击空白处进行值的切换　第２章　　　认识　Ｄｅｌｈｐｉ　
　34                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　
对象查看器的【Ｅｖｅｎｔｓ】页用于设置控件的响应事件。　
★ 对象查看器本身也是独立窗口，可以对它进行关闭、打开、移动、改变大小等操作。　
★ 在对象查看器上右键单击，可以实现对对象查看器的进一步控制。　２．２．６
 代码编辑框　Ｄｅｌｐｈｉ代码编辑框是一个功能强大且极富个性化的编辑器，它具有Ｂｒｉｅｆ风格编辑、彩色语法制导、
多级和成组Ｕｎｄｏ、全范围的编辑命令、上下文敏感的帮助、查找替换等特点。特别是Ｄｅｌｐｈｉ３以后的版本所
有的代码自动化（Ｃｏｄｅ　Ｉｎｓｉｇｈｔ）功能更是大大方便了程序员的编辑工作。此外Ｄｅｌｐｈｉ还支持鼠标拖拉操
作，代码移动复制十分方便。　
代码编辑框是一个典型的多页控制框，如图２．２－９所示：　２．３
 Ｄｅｌｐｈｉ程序结构　典型的Ｄｅｌｐｈｉ程序包括：Ｐｒｏｊｅｃｔ１．ｃｆｇ、Ｐｒｏｊｅｃｔ１．ｄｏｆ、Ｐｒｏｊｅｃｔ１．ｄｐｒ、Ｐｒｏｊｅｃｔ１．ｒｅｓ、Ｕｎｉｔ１．ｄｆｍ、
Ｕｎｉｔ１．ｐａｓ等文件，这些文件相互独立又相互联系，共同组成一个完整的Ｄｅｌｐｈｉ工程。其中尤其是
Ｐｒｏｊｅｃｔ１．ｄｐｒ、Ｕｎｉｔ１．ｄｆｍ、Ｕｎｉｔ１．ｐａｓ等三个文件，可以说是Ｄｅｌｐｈｉ工程的主题。Ｐｒｏｊｅｃｔ１．ｄｐｒ调用了
Ｕｎｉｔ１．ｄｆｍ和Ｕｎｉｔ１．ｐａｓ两个文件，而这两个文件中前者负责生成程序的界面部分，后者负责程序的代码控
制部分。这里我们来剖析第１章所给出的“欢迎进入Ｄｅｌｐｈｉ程序员世界”这个最简单的Ｄｅｌｐｈｉ程序的结构
来进一步了解Ｄｅｌｐｈｉ的程序结构以及运行机制。　２．３．１
 Ｐｒｏｊｅｃｔ１．ｄｐｒ　ｐｒｏｇｒａｍ　Ｐｒｏｊｅｃｔ１；／／工程开始，Ｐｒｏｊｅｃｔ１为工程名称　
　
ｕｓｅｓ／／引用单元　
　　Ｆｏｒｍｓ，　
　　Ｕｎｉｔ１　ｉｎ　＇Ｕｎｉｔ１．ｐａｓ＇　｛Ｆｏｒｍ１｝，／／连接到Ｕｎｉｔ１．ｐａｓ单元　
｛￥Ｒ　＊．ＲＥＳ｝／／编译器指令　
ｂｅｇｉｎ／／ｂｅｇｉｎ．．ｅｎｄ配对，是程序主体开始和结束的标志　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；／／程序初始化　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；／／根据Ｕｎｉｔ１．ｄｆｍ文件创建表单　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；／／程序运行　
ｅｎｄ．　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　35 ２．３．２
 Ｕｎｉｔ１．ｐａｓ　ｕｎｉｔ　Ｕｎｉｔ１；　
／／以单元名称（名为Ｕｎｉｔ１）开始，与单元结尾处“Ｅｎｄ”关键字前后呼应，构成闭合结构　
／／单元主体部分包括以下Ｉｎｔｅｒｆａｃｅ、Ｔｙｐｅ、Ｖａｒ、Ｉｍｐｌｅｍｅｎｔａｔｉｏｎ四大部分　
　
ｉｎｔｅｒｆａｃｅ／／接口部分，包括以下Ｕｓｅｓ、Ｔｙｐｅ、Ｖａｒ三大部分内容　
ｕｓｅｓ／／引用部分，引用单元为如下（阴影部分）　
ＳｙｓＵｔｉｌｓ，ＷｉｎＴｙｐｅｓ，ＷｉｎＰｒｏｃｓ，Ｍｅｓｓａｇｅｓ，Ｃｌａｓｓｅｓ，Ｇｒａｐｈｉｃｓ，Ｃｏｎｔｒｏｌｓ，Ｆｏｒｍｓ，Ｄｉａｌｏｇｓ；　
　
Ｔｙｐｅ／／类型区段　
Ｔｆｏｒｍ１＝ｃｌａｓｓ（ＴＦｏｒｍ）／／包括以下Ｐｒｉｖａｔｅ、Ｐｕｂｌｉｃ两段　
Ｐｒｉｖａｔｅ／／私有变量声明　
Ｐｕｂｌｉｃ／／公有变量声明　
ｅｎｄ；　
　
ｖａｒ／／变量定义区　
Ｆｏｒｍ１：ＴＦｏｒｍ１；　
　
Ｉｍｐｌｅｍｅｎｔａｔｉｏｎ／／实现部分，包括编译指令和各种过程（Ｐｒｏｃｅｄｕｒｅ）函数（Ｆｕｎｃｔｉｏｎ）　
｛￥Ｒ＊１ＤＦＭ｝／／编译指令，连接到Ｕｎｉｔ１．ｄｆｍ　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；／／用于响应按钮单击的过程　
ｂｅｇｉｎ／／过程的开始　
　　　　ｅｄｉｔ１．Ｔｅｘｔ：＝＇欢迎进入Ｄｅｌｐｈｉ程序员世界！＇；／／过程的主体，处理部分　
ｅｎｄ；／／过程的结束　
　
ｅｎｄ．／／单元结束　２．３．３
 Ｕｎｉｔ１．ｄｆｍ　ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１／／表单定义开始，表单本身就是一个对象Ｆｏｒｍ１　
　
　　Ｌｅｆｔ　＝　２４２／／Ｆｏｒｍ１的左边界属性，以下类似　
　　Ｔｏｐ　＝　１２１　
　　Ｗｉｄｔｈ　＝　４７５　
　　Ｈｅｉｇｈｔ　＝　１８２　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　第２章　　　认识　Ｄｅｌｈｐｉ　
　36                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ１：　Ｔｅｄｉｔ／／表单的第二个对象Ｅｄｉｔ１　
　　　　Ｌｅｆｔ　＝　１３６／／Ｅｄｉｔ１的左边界属性　
　　　　Ｔｏｐ　＝　２４　
　　　　Ｗｉｄｔｈ　＝　２６５　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　Ｔｅｘｔ　＝　＇Ｅｄｉｔ１＇　
　　ｅｎｄ　
　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　Ｔｂｕｔｔｏｎ／／表单的第三个对象Ｂｕｔｔｏｎ１　
　　　　Ｌｅｆｔ　＝　１６８／／Ｂｕｔｔｏｎ１的左边界属性　
　　　　Ｔｏｐ　＝　７２　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇单击我＇　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
　
ｅｎｄ／／表单的定义结束　２．４
 Ｄｅｌｐｈｉ程序编制过程　Ｄｅｌｐｈｉ程序编制过程包括如下６个步骤：　
１、　启动系统，系统自动创建一个新工程，也可以手工创建　
２、　系统会在创建新工程的时候自动产生一个表单，也可以手工创建　
３、　在表单里放置控件　
４、　设置控件的属性　
５、　编写控件响应的程序代码　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　37 
６、　编译程序，产生可执行文件　２．５
 获得Ｄｅｌｐｈｉ帮助　２．５．１ Ｄｅｌｐｈｉ系统帮助文件　２．５．１．１ 获取系统帮助的方式　●　Ｆ１帮助键　
在Ｄｅｌｐｈｉ　ＩＤＥ系统中，任何时候您只需按动Ｆ１帮助键即可获得Ｄｅｌｐｈｉ的相关内容帮助。　
●　在代码编辑框中获得出错帮助　
代码编辑框的状态行除了可以显示一般的状态信息外，还可以显示编译产生的错误信息，并自动加亮
有错误的第一行。如图２．５－１所示：　
　　图
 2.5-1  编译错误提示       图 2.5-2  出错详细信息  在状态行上按动Ｆ１帮助键可以得到此错误信息的详细解释（错误信息中文帮助请参考本书所附光盘），
如图２．５－２所示：　
　
●　代码自动化（Ｃｏｄｅ　Ｉｎｓｉｇｈｔ）　
◆　代码自动完成　
在代码编辑框中，当输入一个类或对象名，再输入一个小圆点（点操作），Ｄｅｌｐｈｉ就会自动弹出
一个列表框（有时候需要按动【Ｃｔｒｌ＋Ｓｐａｃｅ】组合键来激活这项功能，但是在中文Ｗｉｎｄｏｗｓ系统中这
个功能键往往被预设为中文输入法控制的热键，因此需要重新设定热键才能生效），列出该类或对象的
所有特性、方法和事件。如图２．５－３所示：　第２章　　　认识　Ｄｅｌｈｐｉ　
　38                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　图 2.5-3  代码自动完成     图 2.5-4  参数提示 ◆　参数提示　
在代码编辑框中，只要输入函数名，再输入左圆括号，Ｄｅｌｐｈｉ就会自动显示该函数的所有参数
名称及其数据类型。如图２．５－４所示：　
　
◆　代码链接　
在代码编辑框中，按住【Ｃｔｒｌ】同时把鼠标放在关键字上即可出现手状鼠标，按下鼠标即可跳转
到该关键字所在单元，这样有利于深入了解关键字的来龙去脉，从而避免各种错误，如图２．５－５所示：　
　图
 2.5-5  代码链接 ２．５．１．２ 看懂Ｄｅｌｐｈｉ帮助　典型的Ｄｅｌｐｈｉ　ＡＰＩ函数帮助文件结构如图所示：　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　39 
　图
 2.5-6  API函数帮助文件结构 从图中可以看出，ＡＰＩ函数帮助文件包括：函数名、Ｓｅｅ　ａｌｓｏ（参考）、Ｅｘａｍｐｌｅ（实例）、函数功能、
Ｕｎｉｔ（所属单元）、Ｃａｔｅｇｏｒｙ（类）、函数格式、Ｄｅｓｃｒｉｐｔｉｏｎ（详细解释）等八大部分，其中尤其是实例、
所属单元和函数格式三大部分非常有用，实例有助于我们进一步理解函数的应用方式，所属单元有助于我们
避免一些不必要的语法错误，函数格式有助于我们正确使用该函数。　２．５．２
 从网络上得到Ｄｅｌｐｈｉ帮助文件　从系统的帮助菜单，我们可以迅速连接到Ｂｏｒｌａｎｄ和Ｄｅｌｐｈｉ的主页，除此之外，网络上还有很多Ｄｅｌｐｈｉ
资源以ＢＢＳ、新闻组等方式存在着，有关内容请参考所附光盘中相关内容。　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　40                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　第３章　Ｄｅｌｐｈｉ的语言―Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言　　
◆本章内容：　
●　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的词汇　
●　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的标点符号　
●　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的句法　
●　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的文法　
●　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言对象和异常　
●　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言程序调试　
◆本章目标：　
●　初步理解Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的词汇　
●　初步理解Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的标点符号　
●　初步理解Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的句法　
●　初步理解Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的文法　
●　初步理解Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言对象和异常　
●　了解Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言程序调试　３．１
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ简介　在Ｄｅｌｐｈｉ编程学习方面，通常有持两种不同观点的人：一种人认为学习Ｄｅｌｐｈｉ关键要熟练Ｄｅｌｐｈｉ　ＩＤＥ　
操作界面，掌握Ｄｅｌｐｈｉ的ＶＣＬ（Ｖｉｓｕａｌ　Ｃｏｍｐｏｎｅｎｔ　Ｌｉｂｒａｒｙ），无需学习Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言；另一种人则
认为学习Ｄｅｌｐｈｉ必须精通Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言。前者着重于Ｄｅｌｐｈｉ的ＩＤＥ工具的应用，后者着重于Ｄｅｌｐｈｉ
程序语言。事实上，这两者绝不可偏废，忽略Ｄｅｌｐｈｉ　ＩＤＥ工具或者其程序语言都将对掌握Ｄｅｌｐｈｉ造成很大
麻烦。笔者认为初学者可以把重点放在ＩＤＥ工具方面的熟练掌握，同时必须了解甚至部分理解Ｄｅｌｐｈｉ的语
言，随着学习的深入，可以把学习重点适当转移到Ｄｅｌｐｈｉ编程技巧掌握和Ｄｅｌｐｈｉ的Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的
深入理解掌握上。　
Ｄｅｌｐｈｉ的基础编程语言――Ｐａｓｃａｌ语言具有逻辑严密、可读性好、编写容易的特点，使得它很适合作
为基础的开发语言。而且，使用Ｄｅｌｐｈｉ编译器创建的应用程序只生成单个可执行文件（＊．ＥＸＥ），正是如此，
使得Ｐａｓｃａｌ成为Ｄｅｌｐｈｉ这种先进开发环境的编程语言。　
Ｐａｓｃａｌ可谓博大精深，内容广袤，并非薄薄一本书所能尽述。这里我们将只限于讨论Ｏｂｊｅｃｔ　Ｐａｓｃａｌ
语法的重点内容，读者朋友若有兴趣可以找本基础的Ｐａｓｃａｌ教程，对照本章内容，作进一步深入的理解。
对于大多读者朋友来说，本书的这一部分内容可能会很令人头疼，大量枯燥的语法，大量需要记忆的内容。
但如前所述，在继续学习之前，您必须对Ｏｂｊｅｃｔ　Ｐａｓｃａｌ有一个基本的了解。　
学习Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言时，我们来试着把Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言理解成英语、日语或者德语之类的一
门外语。在学习一门全新的外语之前，我们通常要学习这门外语的字母（通常是组成这门语言词汇的最基础《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　41 
的元素，如英语的２６个字母表、日语的５０音图等），然后这些字母根据一定的规律组合成数以千万计的单
词或称词汇，这些词汇再以一定的句法结构规律组合成可以完成各种功能的语句，再由这些语句以一定的规
律组合成一段文章，最后一段段的文章又结合成一篇完整的文章。学习Ｏｂｊｅｃｔ　Ｐａｓｃａｌ这门语言时，我们也
要遵照这个学习规律，首先学习Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的词汇，接着学习它的句法，最后学习它的文法。有了
这些基础之后，我们就可以讨论Ｏｂｊｅｃｔ　Ｐａｓｃａｌ程序的调试了。　３．２
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的词汇　虽然Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言与各种外语规律极为相似，但Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言毕竟是Ｏｂｊｅｃｔ　Ｐａｓｃａｌ，它
是属于数学的一个分支的，因此还继承了数学的一些特性，那就是语言中掺杂了运算规则，这也使得学习这
门语言时多了一分困难。　
不过这里提醒读者朋友注意【Ａ＋Ｂ＝１】这个数学等式，从这个数学等式中，我们可以看到组成这个等
式的有三大部分：Ａ、Ｂ是两个识别字，＋、＝是两个运算符号，隐藏在这个等式后面的是数据类型（即这个
等式结果是整数还是实数或者是字符串？）。　３．２．１
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的识别字　从上述等式可知，Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的重要组成部分之一是识别字，识别字类似于英语词汇，它的命
名有一定规则。概括的说Ｏｂｊｅｃｔ　Ｐａｓｃａｌ识别字包括三大类型：　
◆　关键字　
Ｄｅｌｐｈｉ中共有几十个关键字，所谓关键字是指构成Ｄｅｌｐｈｉ语句语法的重要词汇，比如：Ｐｒｏｇｒａｍ、Ｕｓｅ、
Ｂｅｇｉｎ、Ｅｎｄ、Ｆｏｒ、Ｄｏ等等。如何学习关键字？其实也无需死记硬背这些词汇，在实际应用中注意识别记忆
这些关键字即可。如何知道关键字与其他两种识别字的区别呢？打开任意一个Ｐａｓｃａｌ单元（如Ｕｎｉｔ１．ｐａｓ）
即可知道，关键字在Ｄｅｌｐｈｉ　ＩＤＥ的代码编辑框中以粗体字区分出来了，如图３．２－１所示：　
　图
 3.2-1  从代码编辑框中识别关键字 第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　42                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　图中粗体字Ｕｎｉｔ、ｉｎｔｅｒｆａｃｅ、ｕｓｅｓ、ｔｙｐｅ、ｃｌａｓｓ、ｐｒｉｖａｔｅ、ｐｕｂｌｉｃ、ｅｎｄ、ｖａｒ、ｉｍｐｌｅｍｅｎｔａｔｉｏｎ
等即为关键字。　
　
◆　保留字　
所谓保留字可以理解为Ｄｅｌｐｈｉ系统自定义的，留给Ｄｅｌｐｈｉ系统自身使用的识别字。保留字介于关键
字与自定义识别字之间，既没有关键字那么关键又不像自定义识别字那么随便。　
如何区别保留字呢？如图３．２－１所示，图中【Ｕｓｅｓ】子句下的Ｗｉｎｄｏｗｓ、Ｍｅｓｓａｇｅｓ、ＳｙｓＵｔｉｌｓ、Ｃｌａｓｓｅｓ、
Ｇｒａｐｈｉｃｓ、Ｃｏｎｔｒｏｌｓ、Ｆｏｒｍｓ、Ｄｉａｌｏｇｓ等就是保留字。　
如果自定义识别字和保留字重名，系统会优先把它作为保留字处理，这种情况经常引起编译错误。　
　
◆　自定义识别字　
顾名思义，所谓自定义识别字就是用户自己定义的识别字。自定义识别字时，用户可以使用字母（２６
个字母）、阿拉伯数字（１０个阿拉伯数字）、＿（下划线）组合成自定义识别字。自定义的识别字长度６３位内
有效，不分大小写。　
自定义识别字大有学问，经过长期研究使用，目前较为流行的是匈牙利命名法。所谓匈牙利命名法就
是要求自定义识别字时尽量使识别字有意义、容易辨认、不容易混淆等。如某一整数型变量可以命名为：ｉ１
（ｉ为ｉｎｔｅｇｅｒ――整数的缩写，１为第一个整数，以此类推第２个整数型变量就可以命名为ｉ２），进一步的
话，比如第一个整数用于表示最大整数，那么ｉ１就可以进一步命名为ｉＭａｘ（ｉ→Ｉｎｔｅｇｅｒ，Ｍａｘ→最大），第二
个整数用于表示最小整数，那么ｉ２也可以进一步命名为ｉＭｉｎ了。　
又比如主表单ｆｏｒｍ１通常命名为ｆｒｍＭａｉｎ（ｆｒｍ→ｆｏｒｍ缩写，Ｍａｉｎ→主要的），ＯＫ按钮通常命名为ｂｔｎＯＫ
（ｂｔｎ→ｂｕｔｔｏｎ）等等。　
总之，匈牙利命名法主要目的在于增加程序的可读性。如何命名可使得识别字既便于记忆辨认又简单
明了需要各位读者朋友们自己在实践中不断摸索。　３．２．２
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的数据类型　数据类型是Ｏｂｊｅｃｔ　Ｐａｓｃａｌ中最数学化的内容，在Ｏｂｊｅｃｔ　Ｐａｓｃａｌ中有整型、实数型、字符型、字符
串型、布尔型等５大类数据类型。进一步归纳，Ｏｂｊｅｃｔ　Ｐａｓｃａｌ有数值型、字符型、逻辑型３大类数据类型：
数值型包括整型和实数型，整型是实数型的特例；字符型包括字符型和字符串型，字符型是字符串型的特例，
字符串型是字符型的扩充；逻辑型又称之为布尔型。　３．２．２．１
 整型　进一步细分，Ｏｂｊｅｃｔ　Ｐａｓｃａｌ整型数据又可以根据可操作数据的位数分为８－ｂｉｔ、１６－ｂｉｔ、３２－ｂｉｔ、６４－ｂｉｔ
等整型数据，每种整型数据类型又可以分为ｓｉｇｎｅｄ和ｕｎｓｉｇｎｅｄ两大类，具体如表３．２－１所示：　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　43 表
 3.2-1  整型数据表 类型　范围　格式　
Ｓｈｏｒｔｉｎｔ　１２８．．１２７　ｓｉｇｎｅｄ　８－ｂｉｔ　
Ｂｙｔｅ　０．．２５５　ｕｎｓｉｇｎｅｄ　８－ｂｉｔ　
Ｓｍａｌｌｉｎｔ　３２７６８．．３２７６７　ｓｉｇｎｅｄ　１６－ｂｉｔ　
Ｗｏｒｄ　０．．６５５３５　ｕｎｓｉｇｎｅｄ　１６－ｂｉｔ　
Ｌｏｎｇｉｎｔ　２１４７４８３６４８．．２１４７４８３６４７　ｓｉｇｎｅｄ　３２－ｂｉｔ　
Ｃａｒｄｉｎａｌ（Ｌｏｎｇｗｏｒｄ）　０．．４２９４９６７２９５　ｕｎｓｉｇｎｅｄ　３２－ｂｉｔ　
Ｉｎｔ６４　２＾６３．．２＾６３＊１　ｓｉｇｎｅｄ　６４－ｂｉｔ　
想一想，下面这段程序结果如何？　
Ｖａｒ　
Ｉｍａｘ，Ｉｍｉｎ：ｉｎｔｅｇｅｒ；　
Ｂｅｇｉｎ　
　　Ｉｍａｘ：＝１２８；　
　　Ｉｍｉｎ：＝１；　
　　Ｉｍａｘ：＝Ｉｍａｘ＋Ｉｍｉｎ；　
Ｅｎｄ；　
最后Ｉｍａｘ值是多少呢？Ｉｍａｘ＝１２９。　３．２．２．２
 实数型　同样，实数型数据也可分如表３．２－２所示：　表 3.2-2  实数型数据表 类型　范围　有效位　字节数　
Ｒｅａｌ４８　２．９　ｘ　１０＾＊３９　．．　１．７　ｘ　１０＾３８　１１＊１２　６　
Ｓｉｎｇｌｅ　１．５　ｘ　１０＾＊４５　．．　３．４　ｘ　１０＾３８　７＊８　４　
Ｄｏｕｂｌｅ　５．０　ｘ　１０＾＊３２４　．．　１．７　ｘ　１０＾３０８　１５＊１６　８　
Ｅｘｔｅｎｄｅｄ　３．６　ｘ　１０＾＊４９５１　．．　１．１　ｘ　１０＾４９３２　１９＊２０　１０　
Ｃｏｍｐ　２＾６３＋１　．．　２＾６３　＊１　１９＊２０　８　
Ｃｕｒｒｅｎｃｙ　９２２３３７２０３６８５４７７．５８０８．．　９２２３３７２０３６８５４７７．５８０７　１９＊２０　８　　请思考下面这段程序：　
Ｖａｒ　
Ｉｍａｘ，Ｉｍｉｎ：ｉｎｔｅｇｅｒ；　
Ｒｒｅｓｕｌｔ：ｒｅａｌ；　
Ｂｅｇｉｎ　
　　Ｉｍａｘ：＝１２８；　
　　Ｉｍｉｎ：＝３；　
　　Ｒｒｅｓｕｌｔ：＝Ｉｍａｘ／Ｉｍｉｎ；　
Ｅｎｄ；　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　44                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　这里Ｒｒｅｓｕｌｔ为什么定义成【ｒｅａｌ】型而不是【ｉｎｔｅｇｅｒ】型？因为Ｉｍａｘ／Ｉｍｉｎ结果有可能是实数型。　３．２．２．３ 字符型　同样，字符型数据也可分如表３．２－３所示：　表 3.2-3  字符型数据表 类型　字节数　内容　作用　
Ｃｈａｒ　１　ＡＮＳＩ字符　默认字符类型　
ＡｎｓｉＣｈａｒ　１　ＡＮＳＩ字符　８位ＡＮＳＩ字符类型　
ＷｉｄｅＣｈａｒ　２　Ｕｎｉｃｏｄｅ字符　１６位Ｕｎｉｃｏｄｅ字符类型　　３．２．２．４
 字符串型　同样，字符串型数据也可分如表３．２－４所示：　表 3.2-4  字符串型数据表 类型　长度　占内存　作用　
ＳｈｏｒｔＳｔｒｉｎｇ　２５５　２～２５６ｂｙｔｅｓ　向后兼容用　
ＡｎｓｉＳｔｒｉｎｇ　￣２＾３１　ｃｈａｒａｃｔｅｒｓ　４ｂｙｔｅｓ～２ＧＢ　８位ＡＮＳＩ字符串　
ＷｉｄｅＳｔｒｉｎｇ　￣２＾３０　ｃｈａｒａｃｔｅｒｓ　４ｂｙｔｅｓ～２ＧＢ　Ｕｎｉｃｏｄｅ字符串　
　想想下面这段程序作用？　
Ｖａｒ　
Ｉ：Ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
　　Ｉ：＝Ｌｅｎｇｔｈ（ＭｙＳｔｒｉｎｇ）；　
　　ｗｈｉｌｅ　Ｉ＞０　ｄｏ　
　　ｂｅｇｉｎ　
　　　　ＭｙＳｔｒｉｎｇ［Ｉ］：＝ＵｐＣａｓｅ（ＭｙＳｔｒｉｎｇ［Ｉ］）；　
Ｉ：＝Ｉ－１；　
ｅｎｄ；　
ｅｎｄ；　
这段程序用于把ＭｙＳｔｒｉｎｇ字符串中每个字符全部转化成大写（使用【ｕｐｃａｓｅ】函数）。　３．２．２．５
 布尔型（逻辑型）　布尔型包括Ｂｏｏｌｅａｎ、ＢｙｔｅＢｏｏｌ、ＷｏｒｄＢｏｏｌ和ＬｏｎｇＢｏｏｌ四种类型，Ｂｏｏｌｅａｎ是首选类型，其他三种类《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　45 
型要根据不同的语言环境以及Ｗｉｎｄｏｗｓ系统决定。　
一个Ｂｏｏｌｅａｎ变量占１ｂｙｔｅ内存，一个ＢｙｔｅＢｏｏｌ变量也占１ｂｙｔｅ内存，一个ＷｏｒｄＢｏｏｌ变量占２ｂｙｔｅｓ
内存，而一个ＬｏｎｇＢｏｏｌ变量占４ｂｙｔｅｓ内存。　
请思考下面这段程序ｂＯＫ值为什么？　
Ｖａｒ　
ｂＯＫ：Ｂｏｏｌｅａｎ；　
ｂｅｇｉｎ　
ｉｆ　２＞１　ｔｈｅｎ　
ｂＯＫ：＝Ｔｒｕｅ　
ｅｌｓｅ　
　　ｂＯＫ：＝Ｆａｌｓｅ；　
ｅｎｄ；　
ｂＯＫ值为Ｔｒｕｅ。　３．２．３
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ的运算符号　３．２．３．１ 运算元　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ运算元如表３．２－５所示：　表 3.2-5  Object Pascal运算元表 运算元类型　运算符号　
单运算子运算　＠，ｎｏｔ　
乘除运算　＊，／，ｄｉｖ，ｍｏｄ，ａｎｄ，ｓｈｌ，ｓｈｒ，ａｓ　
加减运算　＋，－，ｏｒ，ｘｏｒ　
关系运算　＝，＜，＞，＜＞，＜＝，＞＝，ｉｎ，ｉｓ　
　３．２．３．２
 运算元运算优先次序　●　一般情况，按照如下顺序运算：　
（１）＠，ｎｏｔ　
（２）＊，／，ｄｉｖ，ｍｏｄ，ａｎｄ，ｓｈｌ，ｓｈｒ，ａｓ　
（３）＋，－，ｏｒ，ｘｏｒ　
（４）＝，＜＞，＜，＞，＜＝，＞＝，ｉｎ，ｉｓ　
●　若有（），则从（）由内外之运算优先；　
●　相同优先次序，则由左至右之运算优先　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　46                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　３．２．３．３ 运算元分类　１． 数学运算元　【＋，－，＊，／】　　→　　加减乘除　
【ｄｉｖ】　　　　　　→　　整数相除之商　
【ｍｏｄ】　　　　　　→　整数相除之余数　２．
 逻辑运算元　【ｎｏｔ，Ａｎｄ，Ｏｒ，Ｘｏｒ，Ｓｈｌ，Ｓｈｒ】　３． 字串运算元　【＋】　
例：　
Ｓ：＝’ｈｏｗ’＋’　ｒ’＋’　ｕ！’；　
思考：Ｓ＝？，Ｓ＝ｈｏｗ　ｒ　ｕ！。　４．
 集合运算元　【＋】　　→　　连集　
【－】　　→　　差集　
【＊】　　→　　交集　５．
 关系运算元　【＝，＜＞，＜，＞，＜＝，＞＝，ｉｎ】　６． 类别运算元　【ｉｓ，Ａｓ】　７． 位置运算元　【＠】　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　47 ３．３
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的标点符号　【‘‘】（单引号）→字符串　
【／／】（双斜杠）→注释　
【｛｝】（大括号）→注释　
【　；】（分　号　）→语句结束　
【　．】（句　号　）→整个单元结束，一般加在整个单元的Ｅｎｄ符号之后　
各种标点符号使用如图所示：　
　图
 3.3-1  Object Pascal标点符号用法 ３．４ Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的句法　３．４．１ 变量定义语句　变量是程序代码中代表一个内存地址的标识符，而此地址的内存内容在程序代码执行时可以被改变。
在使用变量前必须对它进行说明，即对它进行命名，并说明它的类型。在所有变量说明以前加上保留字【ｖａｒ】。
变量说明左边是变量的名称，右边则是该变量的类型，中间用【：】（冒号）隔开。　
　
ｖａｒ　
ｉｎｔＭａｘ，ｉｎｔＭｉｎ：Ｉｎｔｅｇｅｒ；　
ｒＶａｌｕｅ：Ｒｅａｌ；　
ｓｔｒＮａｍｅ：Ｓｔｒｉｎｇ；　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　48                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　３．４．２ 常量定义语句　常量在说明时就被赋予了一个值，在程序执行过程中是不可改变的。下面的例子说明了三个常量：　
ｃｏｎｓｔ　
Ｐｉ＝３．１４１５９；　
Ｎｕｍ＝１２；　
Ｆｌａｇ＝Ｔｒｕｅ；　
ＳｅｒｉａｌＮｕｍ　＝　＂３２３４７８６８ＥＦＳＤＡ２３３＂；　
象变量一样，常量也有类型。不同的是，常量假设其类型就是常量说明中其所代表的值的类型。上文
的三个常量的类型分别是实数型、整形、布尔型、字符串型。常量用【＝】（等号）表示两边的值是相等的。　３．４．３
 赋值语句　在事件处理过程中，最常做的工作就是把一个新值赋给一个属性或变量。在设计用户界面时，可以使
用对象查看器（Ｏｂｊｅｃｔ　Ｉｎｓｐｅｃｔｏｒ）来改变其属性；但有时需要在程序执行时改变属性的值，而且有些属性只
能在执行时改变，这些属性在Ｄｅｌｐｈｉ的在线帮助的属性（Ｐｒｏｐｒｅｔｙ）主题中被标为执行期属性。进行这种
改变，就必须使用赋值语句。　
下文的赋值语句表征一个ＯｎＣｌｉｃｋ事件。当按钮按动后，将标签控件Ｌａｂｅｌ１的Ｃｏｌｏｒ属性置为ｃｌＢｌｕｅ：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
Ｌａｂｅｌ１．Ｃｏｌｏｒ：＝ｃｌＢｌｕｅ；　
ｅｎｄ；　
　
当Ｂｕｔｔｏｎ１按钮被按下后赋值语句被执行，标签变成红色。　
　
在语句中，控件的名称在属性前，中间用“．”表示属性的所属关系。这样就准确地指定了要将ｃｌＲｅｄ
值赋给哪一控件的哪一属性。赋值号为“：＝”，不论给属性还是给变量赋值，都是将右边的值赋给左边的属
性或变量。　
　
当将一个属性值、变量、常量或文本数据赋给属性或变量时，所赋值的类型和接受此值的属性或变量
的类型应相同或兼容。一个属性或变量的类型定义了此属性或变量的可能值集合，也定义了程序代码可以执
行的运算。在前边的例程中，标签控件的Ｃｏｌｏｒ属性和ｃｌＢｌｕｅ的类型都是ＴＣｏｌｏｒ。可以在在线帮助中找到
一个属性的类型；另外一种方法是在对象查看器中选定该属性值段，并按下Ｆ１键，则类型将在属性说明的
结尾处列出。有些属性是只读（Ｒｅａｄ　Ｏｎｌｙ）的，它们只能被读取，不能被改变。请查阅在线帮助，在Ｄｅｌｐｈｉ
中这些只读属性都有注解。　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　49 ３．４．４
 Ｉｆ．．Ｔｈｅｎ．．Ｅｌｓｅ语句　这个语句用于条件判断，意即“如果……那么……否则”，这个语句可以嵌套使用。比如：如果Ｅｄｉｔ１
的内容是空的，那么Ｂｕｔｔｏｎ１就无效，否则有效，语句如下：　
Ｉｆ　Ｅｄｉｔ１．Ｔｅｘｔ＝＇＇　Ｔｈｅｎ　
　　Ｂｕｔｔｏｎ１．Ｅｎａｂｌｅ：＝ｆａｌｓｅ　
Ｅｌｓｅ　
　　Ｂｕｔｔｏｎ１．Ｅｎａｂｌｅ：＝ｔｒｕｅ；　
★需要注意：ｉｆ．．ｔｈｅｎ．．ｅｌｓｅ构成完整语句，之间不可有任何分号，否则必引起编译错误，如中间有
几个语句必须加上分号的话，那么应该在几个语句前后加上【ｂｅｇｉｎ．．ｅｎｄ】，而且【ｂｅｇｉｎ．．ｅｎｄ】的【ｅｎｄ】
之后也不能加分号，也就是相当于用【ｂｅｇｉｎ．．ｅｎｄ】把几个语句并成一个语句，如下所示：　
Ｉｆ　Ｅｄｉｔ１．Ｔｅｘｔ＝＇＇　Ｔｈｅｎ　
ｂｅｇｉｎ　
　　Ｂｕｔｔｏｎ１．Ｅｎａｂｌｅ：＝ｆａｌｓｅ；　　／／此处可加分号了　
　　Ｂｕｔｔｏｎ２．Ｅｎａｂｌｅ：＝ｆａｌｓｅ；　　／／此处可加分号了　
．．Ｂｕｔｔｏｎ３．Ｅｎａｂｌｅ：＝ｆａｌｓｅ；　　／／此处可加分号了　
……　
ｅｎｄ　　／／此处仍不可加分号　
Ｅｌｓｅ　
　　Ｂｕｔｔｏｎ１．Ｅｎａｂｌｅ：＝ｔｒｕｅ；　３．４．５
 Ｃａｓｅ语句　这个语句用于多分支的选择，可以用复杂的Ｉｆ．．Ｔｈｅｎ．．Ｅｌｓｅ语句替换。如：　
Ｃａｓｅ　ＳｔｒＩｎｐｕｔ　ｏｆ　
＇ａ＇：Ｗｒｉｔｅｌｎ（＇输入字符ａ＇）；　
＇ｂ＇：Ｗｒｉｔｅｌｎ（＇输入字符ｂ＇）；　
ｅｌｓｅ　
　　Ｗｒｉｔｅｌｎ（＇输入ａｂ以外的字符＇）；　
ｅｎｄ；　３．４．６
 Ｒｅｐｅａｔ．．Ｕｎｔｉｌ语句　Ｒｅｐｅａｔ总是先执行循环内容，然后判断，一旦判断成立循环即告停止。如下例：　
Ｘ：＝０；　
Ｉ：＝０；　
Ｒｅｐｅａｔ　
　　Ｘ：＝Ｘ＋Ｉ　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　50                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　Ｉ：＝Ｉ＋１　
Ｕｎｔｉｌ　Ｘ＞１０；　３．４．７
 Ｗｈｉｌｅ．．Ｄｏ语句　Ｗｈｉｌｅ语句则是先判断条件，如果判断成立则执行，否则停止。如下例：　
Ｘ：＝０；　
Ｗｈｉｌｅ　Ｉ＜＝１０　Ｄｏ　
ｂｅｇｉｎ　
　　Ｘ：＝Ｘ＋Ｉ；　
　　Ｉ：＝Ｉ＋１；　
ｅｎｄ；　３．４．８
 Ｆｏｒ．．Ｄｏ语句　Ｆｏｒ语句用于已知循环次数的判断。请看如下实例：　
Ｘ：＝０；　
ｆｏｒ　Ｉ：＝１　ｔｏ　１０　ｄｏ　
　　Ｘ：＝Ｘ＋Ｉ；　３．５
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的文法　Ｏｂｊｅｃｔ　Ｐａｓｃａｌ文法中，关键概念就是过程和函数，过程和函数的引入主要就是为了减少代码的重复，
减轻程序员的负担，此外还可以使得程序模块化。　３．５．１
 过程　过程结构如下所示：　
ｐｒｏｃｅｄｕｒｅ　过程名（　参数；参数．．）；　
ｌａｂｅｌ　｛标签定义｝　
ｔｙｐｅ　　｛类型定义｝　
ｖａｒ　　　｛变量定义｝　
ｐｒｏｃｅｄｕｒｅ　
ｆｕｎｃｔｉｏｎ　
ｂｅｇｉｎ　
　
｛ｅｘｉｔ；｝　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　51 
ｅｎｄ；　
从这个结构图可以看出，过程结构和单元结构极为相似，而过程中还可能嵌套其他的过程函数，形成
一个循环嵌套的结构。　
例如：　
Ｐｒｏｃｅｄｕｒｅ　ｐｒｉｎｔｆ（ｐＳｔｒ　：　Ｓｔｒｉｎｇ）；　
ｂｅｇｉｎ　
　　ｓｈｏｗｍｅｓｓａｇｅ（Ｐｓｔｒ）；　
ｅｎｄ；　３．５．２
 函数　函数结构如下所示：　
ｆｕｎｃｔｉｏｎ　函数名（　参数；参数．．）：返回值类型；　
ｌａｂｅｌ　｛标签定义｝　
ｃｏｎｓｔ　｛常量定义｝　
ｔｙｐｅ　　｛类型定义｝　
ｖａｒ　　　｛变量定义｝　
ｐｒｏｃｅｄｕｒｅ　
ｆｕｎｃｔｉｏｎ　
ｂｅｇｉｎ　
　
｛ｅｘｉｔ；｝　
　
ｅｎｄ；　
例如　
ｆｕｎｃｔｉｏｎ　ａｄｄ（ｉ１，ｉ２：Ｉｎｔｅｇｅｒ）：Ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
ａｄｄ：＝ｉ１＋ｉ２；　
ｅｎｄ；　
这段程序用于实现一个两整数相加的函数，最终把ｉ１＋ｉ２的结果返回给函数ａｄｄ。　３．５．３
 应用实例――我的加法器　３．５．３．１ 程序描述　实例要求在表单上设置３个编辑框（Ｅｄｉｔ控件），分别代表加数、被加数、得数，设置５个标签（Ｌａｂｅｌ
控件），分别提示【加数】、【被加数】、【得数】、【＋】、【＝】等，最后设置１个按钮（Ｂｕｔｔｏｎ控件）；　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　52                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　当用户输入加数和被加数，按下结果按钮后，程序调用自行编写的一个加法函数，把最后结果输出到
得数Ｅｄｉｔ框中，并弹出消息提示！　３．５．３．２
 设计详细步骤　１、 启动Ｄｅｌｐｈｉ，新建Ｄｅｌｐｈｉ工程（Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ），保存全部（Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ）为Ｕｎｉｔ１．ｐａｓ
和Ｐｒｏｊｅｃｔ１．ｄｐｒ；　
２、 选择Ｆｏｒｍ１，在对象查看器中修改标题（ｃａｐｔｉｏｎ）属性为【我的加法器】；　
３、 在表单上插入５个标签（Ｌａｂｅｌ）控件，在对象查看器中把它们的标题（ｃａｐｔｉｏｎ）属性分别修改
为【加数】、【被加数】、【得数】、【＋】、【＝】；　
４、 在表单上插入３个编辑框（Ｅｄｉｔ）控件，在对象查看器中把它们的名字（Ｎａｍｅ）属性分别修改为
【ｅｄｔＡｄｄ】、【ｅｄｔＡｄｄｅｄ】、【ｅｄｔＲｅｓｕｌｔ】；（注意匈牙利命名法）　
５、 在表单上插入１个按钮（Ｂｕｔｔｏｎ）控件，在对象查看器中把它的标题（Ｃａｐｔｉｏｎ）属性改为【结果】；　
６、 把上述表单上所有控件排列整齐美观，并调整表单大小，如图图３．５－１所示：　
　图
 3.5-1  【我的加法器】界面图 ７、 按动Ｆ１２，跳到代码编辑框，在【Ｖａｒ】和【Ｉｍｐｌｅｍｅｎｔａｔｉｏｎ】之间加入自定义函数的声明：　
ｆｕｎｃｔｉｏｎ　ｍｙａｄｄ（ｉｎｔａｄｄ：ｉｎｔｅｇｅｒ；ｉｎｔａｄｄｅｄ：ｉｎｔｅｇｅｒ）：ｉｎｔｅｇｅｒ；　
继续在【Ｉｍｐｌｅｍｅｎｔａｔｉｏｎ】下面【｛￥Ｒ　＊．ＤＦＭ｝】后面加入自定义函数的实现代码：　
ｆｕｎｃｔｉｏｎ　ｍｙａｄｄ（ｉｎｔａｄｄ：ｉｎｔｅｇｅｒ；ｉｎｔａｄｄｅｄ：ｉｎｔｅｇｅｒ）：ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
　　ｍｙａｄｄ：＝ｉｎｔａｄｄ＋ｉｎｔａｄｄｅｄ；　
ｅｎｄ；　
　
８、 按动Ｆ１２，跳回到表单设计上面，双击Ｂｕｔｔｏｎ１控件，进入代码编辑框，在Ｂｕｔｔｏｎ１的Ｏｎｃｌｉｃｋ
事件中加入如下代码：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　ｉｎｔａｄｄ，ｉｎｔａｄｄｅｄ，ｉｎｔｒｅｓｕｌｔ：ｉｎｔｅｇｅｒ；／／定义变量，注意匈牙利命名法　
ｂｅｇｉｎ　
　　ｉｎｔａｄｄ：＝ｓｔｒｔｏｉｎｔ（ｅｄｔａｄｄ．ｔｅｘｔ）；　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　53 
／／ｅｄｔａｄｄ的ｔｅｘｔ类型是ｓｔｒｉｎｇ，要转成整型，转换函数是ｓｔｒｔｏｉｎｔ（）　
　　ｉｎｔａｄｄｅｄ：＝ｓｔｒｔｏｉｎｔ（ｅｄｔａｄｄｅｄ．ｔｅｘｔ）；　
／／和上一句一样　
　　ｉｎｔｒｅｓｕｌｔ：＝ｍｙａｄｄ（ｉｎｔａｄｄ，ｉｎｔａｄｄｅｄ）；　
／／调用自定义函数ｍｙａｄｄ（），并把加数和被加数代入　
　　ｅｄｔｒｅｓｕｌｔ．Ｔｅｘｔ：＝ｉｎｔｔｏｓｔｒ（ｉｎｔｒｅｓｕｌｔ）；　
／／把结果输出到ｅｄｔｒｅｓｕｌｔ，输出前同样作类型转换，转换函数是上面的逆转函数，是ｉｎｔｔｏｓｔｒ（）　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇结果是：＇＋ｉｎｔｔｏｓｔｒ（ｉｎｔｒｅｓｕｌｔ））；　
／／通过ａｐｉ函数ｓｈｏｗｍｅｓｓａｇｅ以弹出窗口方式输出结果　
ｅｎｄ；　
　
９、 再次保存工程，按动Ｆ９，编译运行程序，完成编制。　３．５．３．３
 完整的程序代码　【Ｐｒｏｊｅｃｔ１．ｄｐｒ】　
ｐｒｏｇｒａｍ　Ｐｒｏｊｅｃｔ１；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　Ｕｎｉｔ１　ｉｎ　＇Ｕｎｉｔ１．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【Ｕｎｉｔ１．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　２３１　
　　Ｔｏｐ　＝　１３８　
　　Ｗｉｄｔｈ　＝　４４４　
　　Ｈｅｉｇｈｔ　＝　２０８　
　　Ｃａｐｔｉｏｎ　＝　＇我的加法器＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　54                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ１：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　４０　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　４１　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　ＡｕｔｏＳｉｚｅ　＝　Ｆａｌｓｅ　
　　　　Ｃａｐｔｉｏｎ　＝　＇加数＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ２：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　１６０　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　５７　
　　　　Ｈｅｉｇｈｔ　＝　１７　
　　　　ＡｕｔｏＳｉｚｅ　＝　Ｆａｌｓｅ　
　　　　Ｃａｐｔｉｏｎ　＝　＇被加数＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ３：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　２９６　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　４１　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　ＡｕｔｏＳｉｚｅ　＝　Ｆａｌｓｅ　
　　　　Ｃａｐｔｉｏｎ　＝　＇得数＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ４：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　２４８　
　　　　Ｔｏｐ　＝　６０　
　　　　Ｗｉｄｔｈ　＝　１２　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　Ｃａｐｔｉｏｎ　＝　＇＝＇　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　55 
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ５：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　１２７　
　　　　Ｔｏｐ　＝　６０　
　　　　Ｗｉｄｔｈ　＝　１２　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　Ｃａｐｔｉｏｎ　＝　＇＋＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ｅｄｔａｄｄ：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　３２　
　　　　Ｔｏｐ　＝　５６　
　　　　Ｗｉｄｔｈ　＝　８９　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　Ｔｅｘｔ　＝　＇ｅｄｔａｄｄ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ｅｄｔａｄｄｅｄ：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　１４４　
　　　　Ｔｏｐ　＝　５６　
　　　　Ｗｉｄｔｈ　＝　９７　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　　　Ｔｅｘｔ　＝　＇ｅｄｔａｄｄｅｄ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ｅｄｔｒｅｓｕｌｔ：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　２７２　
　　　　Ｔｏｐ　＝　５６　
　　　　Ｗｉｄｔｈ　＝　１０５　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　２　
　　　　Ｔｅｘｔ　＝　＇ｅｄｔｒｅｓｕｌｔ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　２３２　
　　　　Ｔｏｐ　＝　１０４　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇结果＇　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　56                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　ＴａｂＯｒｄｅｒ　＝　３　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
【Ｕｎｉｔ１．ｐａｓ】　
ｕｎｉｔ　Ｕｎｉｔ１；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｌａｂｅｌ１：　ＴＬａｂｅｌ；　
　　　　Ｌａｂｅｌ２：　ＴＬａｂｅｌ；　
　　　　Ｌａｂｅｌ３：　ＴＬａｂｅｌ；　
　　　　Ｌａｂｅｌ４：　ＴＬａｂｅｌ；　
　　　　ｅｄｔａｄｄ：　ＴＥｄｉｔ；　
　　　　ｅｄｔａｄｄｅｄ：　ＴＥｄｉｔ；　
　　　　Ｌａｂｅｌ５：　ＴＬａｂｅｌ；　
　　　　ｅｄｔｒｅｓｕｌｔ：　ＴＥｄｉｔ；　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　　ｆｕｎｃｔｉｏｎ　ｍｙａｄｄ（ｉｎｔａｄｄ：ｉｎｔｅｇｅｒ；ｉｎｔａｄｄｅｄ：ｉｎｔｅｇｅｒ）：ｉｎｔｅｇｅｒ；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　57 
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｆｕｎｃｔｉｏｎ　ｍｙａｄｄ（ｉｎｔａｄｄ：ｉｎｔｅｇｅｒ；ｉｎｔａｄｄｅｄ：ｉｎｔｅｇｅｒ）：ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
　　ｍｙａｄｄ：＝ｉｎｔａｄｄ＋ｉｎｔａｄｄｅｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　ｉｎｔａｄｄ，ｉｎｔａｄｄｅｄ，ｉｎｔｒｅｓｕｌｔ：ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
　　ｉｎｔａｄｄ：＝ｓｔｒｔｏｉｎｔ（ｅｄｔａｄｄ．ｔｅｘｔ）；　
　　ｉｎｔａｄｄｅｄ：＝ｓｔｒｔｏｉｎｔ（ｅｄｔａｄｄｅｄ．ｔｅｘｔ）；　
　　ｉｎｔｒｅｓｕｌｔ：＝ｍｙａｄｄ（ｉｎｔａｄｄ，ｉｎｔａｄｄｅｄ）；　
　　ｅｄｔｒｅｓｕｌｔ．Ｔｅｘｔ：＝ｉｎｔｔｏｓｔｒ（ｉｎｔｒｅｓｕｌｔ）；　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇结果是：＇＋ｉｎｔｔｏｓｔｒ（ｉｎｔｒｅｓｕｌｔ））；　
ｅｎｄ；　
　
ｅｎｄ．　
　３．６
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的对象和异常　３．６．１ 对象概念的理解　“对象”概念的出现是程序发展史上一次巨大的革命，引入“对象”概念后，程序的代码可重用性、
健壮性等指标大大提高了。为了理解对象（Ｏｂｊｅｃｔ）的概念，我们来打个比方。比如天文学家获取了一个外
星人（有没有外星人啊？），那么对于他们来讲，这个外星人就是一个研究对象。该对象有属性（Ｐｒｏｐｅｒｔｉｅｓ），
如：身高、体重、肤色等；有生活方法（Ｍｅｔｈｏｄｓ），如：吃、喝、拉、撒、生、老、病、死等；还有对外部
事件（Ｅｖｅｎｔｓ）的反应，如被人踢一脚会暂时忍耐忍耐（也许这样吧，呵呵），被人在极短的时间内连续踢
了两脚会破口大骂甚至武力反抗等。Ｄｅｌｐｈｉ中，对象的概念也是如此，如一个表单对象（ＴＦｏｒｍ），有：标题
（Ｃａｐｔｉｏｎ）、高度（Ｈｅｉｇｈｔ）、宽度（Ｗｉｄｔｈ）、颜色（Ｃｏｌｏｒ）等属性，有：创建（Ｃｒｅａｔｅ）、破坏（Ｄｅｓｔｒｏｙ）、
释放（Ｆｒｅｅ）等方法，还有被单击（ＯｎＣｌｉｃｋ）、被拖拉（ＯｎＤｒａｇＤｒｏｐ）等事件。　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　58                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　３．６．２ 对象特性的理解　除了理解对象外，最关键的要掌握对象的特性。一般讲，对象具有：封装性、继承性、多态性等突出
的特性。　
对象的封装性。就像外星人的内脏器官被腹腔胸腔所封装一样，对象的很多数据和代码都被封装在某
一结构中。将对象的数据封闭在对象的内部，使得外部程序必须且只能使用正确的方法才能对要读写的数据
域进行访问，这样就使得对象易于使用，同时也使得对象具有健壮性。　
对象的继承性。就像外星人有父母子孙一样，对象也有父母子孙，这就是对象的继承性。把一个新的
对象定义成为已存在对象的后代，那么新对象就继承了该对象的一切东西。　
对象的多态性。多态性是在对象体系中把设想和实现分开的手段，根据特定的任务，一个应用程序被
分解成许多对象，多态性把高级设计处理的设想如新对象的创建、对象在屏幕上的重显、程序运行的其它抽
象描述等，留给知道该如何完美地处理它们的对象去实现。　３．６．３
 透过现象看本质　我们来观察一个实例代码的特征，以更深理解上述对象的概念：　
ｕｎｉｔ　Ｕｎｉｔ１；　
ｉｎｔｅｒｆａｃｅ　
ｕｓｅｓ　
Ｗｉｎｄｏｗｓ，Ｍｅｓｓａｇｅｓ，ＳｙｓＵｔｉｌｓ，Ｃｌａｓｓｅｓ，Ｇｒａｐｈｉｃｓ，Ｃｏｎｔｒｏｌｓ，Ｆｏｒｍｓ，Ｄｉａｌｏｇｓ，ＳｔｄＣｔｒｌｓ；　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　Ｅｄｉｔ１：　ＴＥｄｉｔ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
｛￥Ｒ　＊．ＤＦＭ｝　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
ｅｄｉｔ１．Ｔｅｘｔ：＝＇ｈｅｌｌｏ，ｗｏｒｌｄ＇；　
ｅｎｄ；　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　59 
ｅｎｄ．　
从代码中我们可以看到：新的表单类型是ＴＦｏｒｍ１，它是从ＴＦｏｒｍ继承下来的一个对象。在表单对象的
类型说明中，您是看不到任何域、方法的说明的，它们被封装了。Ｆｏｒｍ１称为ＴＦｏｒｍ１类型的实例（ｉｎｓｔａｎｃｅ）。　
由于我们在表单中加入了一个ｂｕｔｔｏｎ控件和一个Ｅｄｉｔ控件，同时在ｂｕｔｔｏｎ控件中建立了一个ＯｎＣｌｉｃｋ
事件处理过程。这样，ＴＦｏｒｍ１对象就有了一个名为Ｂｕｔｔｏｎ１和一个名为Ｅｄｉｔ１的域，它们是我们在表单中加
入的ｂｕｔｔｏｎ控件和ｅｄｉｔ控件。Ｔｂｕｔｔｏｎ、Ｔｅｄｉｔ是对象类型，Ｂｕｔｔｏｎ１是Ｔｂｕｔｔｏｎ的一个实例，Ｅｄｉｔ１是Ｔｅｄｉｔ
的一个实例。它们被ＴＦｏｒｍ１对象所包含，作为它的数据域。每当您在表单中加入一个部件时，部件的名称
就会作为ＴＦｏｍ１的域加入到类型说明中来。　
当使用对象查看器（Ｏｂｊｅｃｔ　Ｉｎｓｐｅｃｔｏｒ）来改变对象（控件）的名称时，这个名称的改变会反映到程序
中。例如，在Ｏｂｊｅｃｔ　Ｉｎｓｐｅｃｔｏｒ中将Ｆｏｒｍ１的Ｎａｍｅ属性命名为ｆｒｍＨｅｌｌｏＷｏｒｌｄ，您会发现在类型说明部分，
会将ＴＦｏｒｍ１改为ＴｆｒｍＨｅｌｌｏＷｏｒｌｄ。如图３．６－１所示：　
　图
 3.6-1  代码编辑框相关修改 　
由Ｄｅｌｐｈｉ自动产生的事件处理过程名称也会自动更改，但自行编写的程序实现部分的代码却不会被自
动修改。这时可以使用Ｄｅｌｐｈｉ编程环境提供的Ｒｅｐｌａｃｅ（替换）功能来自动修改。　３．６．４
 对象的范围　我们来看如下一段代码：　　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：Ｔｏｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｅｄｉｔ１．ｔｅｘｔ：＝’ｈｅｌｌｏ，ｗｏｒｌｄ’；　
Ｃｏｌｏｒ　：＝ｃｌＲｅｄ；　
ｅｄｉｔ１．Ｃｏｌｏｒ　：＝ｃｌＬｉｍｅ；　
ｅｎｄ；　
其中的【Ｃｏｌｏｒ　：＝ｃｌＲｅｄ；】语句是为整个表单Ｆｏｒｍ１着色。您也可以写成【Ｆｏｒｍ１．Ｃｏｌｏｒ　：＝ｃｌＲｅｄ；】，
也可不加上Ｆｏｒｍ１，因为Ｂｕｔｔｏｎ１Ｃｌｉｃｋ方法是在ＴＦｏｒｍ１对象的范围里。当您在一个对象的范围中时，您可
以省略所有这个对象中的属性值、方法、域之前的对象标识符。但是当您编写下面一个语句改变编辑框的底第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　60                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　色时，因为此时您想设置的是ＴＥｄｉｔ１对象的Ｃｏｌｏｒ属性，而不是ＴＦｏｒｍ１类型的，所以您需要通过在属性前
面加上编辑框的名称来指明Ｃｏｌｏｒ属性值的范围。如果不指明，Ｄｅｌｐｈｉ会象第一个语句一样，将表单的颜色
变成绿色。因为ｅｄｉｔ１部件是在表单中的，它是表单的一个数据域，所以您同样不必指明其从属关系。如果
ｅｄｉｔ１是在其他表单中，那么您需要在编辑框之前加上这个表单对象的名称了。例如：如果ｅｄｉｔ１是在Ｆｏｒｍ２
之中，那它是Ｆｏｒｍ２说明的一个数据域，并位于Ｆｏｒｍ２的范围中，那么您需要将第二句改为
【Ｆｏｒｍ２．Ｅｄｉｔ１．Ｃｏｌｏｒ　：＝　ｃｌＬｉｍｅ；】，同时，必须把Ｕｎｉｔ２加入Ｕｎｉｔ１的ｕｓｅｓ子句中（Ｄｅｌｐｈｉ会自动提示你
添加，如图３．６－２所示）。　
　
　图
 3.6-2  Delphi自动提示添加引用 ３．６．５ 理解异常　当程序涉及到与外设的数据交换或操作外设，如要求用户输入、读写磁盘等时，若发生输入非法字符、
磁盘不能读写等情况则不仅会导致应用程序非正常中止甚至可能引起系统的崩溃，这类问题就是异常，或者
说是程序健壮性问题。Ｄｅｌｐｈｉ同时提供了一套强大的异常处理机制，正确地利用它，可以使你的程序更为强
健，使用更为友好。　
Ｄｅｌｐｈｉ异常处理机制建立在保护块（Ｐｒｏｔｅｃｔｅｄ　Ｂｌｏｃｋｓ）的概念上。所谓保护块是用保留字ｔｒｙ和ｅｎｄ
封装的一段代码。保护块的作用是当应用程序发生错误时自动创建一个相应的异常类（Ｅｘｃｅｐｔｉｏｎ）。程序可
以捕获并处理这个异常类，以确保程序的正常结束以及资源的释放和数据不受破坏。如果程序不进行处理，
则系统会自动提供一个消息框。　３．６．６
 异常处理实例　为防止零作除数，可以在进行除法运算前使用ｉｆ…ｔｈｅｎ…ｅｌｓｅ语句。但如果有一系列ｉｆ…ｔｈｅｎ…ｅｌｓｅ
语句重复套用则会使得程序复杂不易理解，这时候我们就可以使用ＥＤｉｖＢｙＺｅｒｏ异常。程序代码如下：　
ｆｕｎｃｔｉｏｎ　Ｃａｌｃｕ（ｘ，ｙ，ｚ，ａ，ｂ，ｃ：Ｉｎｔｅｇｅｒ）：Ｒｅａｌ；　
ｂｅｇｉｎ　
ｔｒｙ　
Ｒｅｓｕｌｔ　：＝　ｘ／ａ＋ｙ／ｂ＋ｚ／ｃ　；　
ｅｘｃｅｐｔ　
ｏｎ　ＥＤｉｖＢｙＺｅｒｏ　ｄｏ　
Ｒｅｓｕｌｔ　：＝　０；　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　61 
ｅｎｄ；　
ｅｎｄ；　
　３．７
 Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言程序调试　３．７．１ 程序常见错误　３．７．１．１ 设计期间错误　这类错误常常发生在设计期间通过对象查看器给某控件输入非法值引起的，这种情况下Ｄｅｌｐｈｉ会自动
告警。另外，保存工程文件时也会因为文件重名而引起设计期间错误。　３．７．１．２
 编译期间错误　编译期间错误又称语法错误，在Ｄｅｌｐｈｉ中通常是程序代码不符合Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语法规则而引起的。　
如果程序代码中有语法错误，代码编辑框将会出现出错信息，请查对出错信息表（见附录），找出错误，
修改之。　３．７．１．３
 运行期间错误　程序编译完成后，还可能碰到运行错误，例如试图打开一个不存在的文件，或者运算时出现了被零除
等情况，又或者是ＢＤＥ出错等等。　
要避免这种错误，必须有严谨的编程思维，多用异常处理，增强程序的健壮性。　３．７．２
 如何减少错误　不出错是不可能的，所以应该着眼于尽量减少错误。减少错误最关键是要程序员养成良好的程序编写
习惯，包括：　
●　要学习软件工程，用软件工程的思维规划好程序设计好程序；　
●　要养成良好的程序代码书写习惯，包括：多用注释、使用匈牙利法命名、程序代码要缩进编写，
使程序代码层次分明。　
●　尽量少用Ｇｏｔｏ跳转语句，本书对这条语句尽可能不介绍，因为Ｇｏｔｏ语句功能用循环控制语句完
全可以完成的。　第３章　　　Ｄｅｌｈｐｉ　的语言　――　Ｏｂｊｅｃｔ　　Ｐａｓｃａｌ　语言　
　62                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　３．７．３ Ｄｅｌｐｈｉ程序调试手段　●　单步执行　
●　设置断点　
●　监视变量　３．７．４
 调试窗口工具　●　ＣＰＵ窗口　
●　线程状态窗口　
●　Ｃａｌｌ　Ｓｔａｃｋ窗口　
●　模块窗口　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　63 
　第４章
　表单的使用　　
◆本章内容：　
●　ＶＣＬ的基本知识　
●　表单的认识　
●　单表单程序设计　
●　多表单程序设计　
●　自适应表单　
●　不规则表单　
●　随意拖动表单　
●　无表单程序　
◆本章目标：　
●　了解ＶＣＬ的结构图　
●　理解表单在ＶＣＬ中的位置　
●　掌握常用的表单属性、方法、事件　
●　熟练掌握单表单程序设计　
●　熟练掌握多表单程序设计　
●　掌握自适应表单程序设计　
●　掌握不规则表单程序设计　
●　掌握随意拖动表单程序设计　
●　掌握无表单程序设计　
　４．１
 ＶＣＬ的基本知识　可视化控件库（ＶＣＬ，Ｖｉｓｕａｌ　Ｃｏｍｐｏｎｅｎｔ　Ｌｉｂｒａｒｙ）是Ｄｅｌｐｈｉ编程语言的核心，也是Ｄｅｌｐｈｉ可视化编
程的精华。本章所介绍的表单和下一章（第５章）将介绍的控件都是ＶＣＬ的基本组成内容。Ｄｅｌｐｈｉ应用人员
可以细分为应用程序员和控件开发者等，不管对于哪一类程序员，认识理解ＶＣＬ对于今后的程序开发都有相
当重要的作用。　
Ｄｅｌｐｈｉ的ＶＣＬ是一个树状结构，包括ＴＯｂｊｅｃｔ（对象）、ＴＰｅｒｓｉｓｔｅｎｔ（稳定的对象）、ＴＣｏｍｐｏｎｅｎｔ（控
件）、ＴＣｏｎｔｒｏｌ（控制）四大部分，其中ＴＣｏｎｔｒｏｌ又分为ＴＷｉｎＣｏｎｔｒｏｌ（窗口控制）和ＴＧｒａｐｈｉｃＣｏｎｔｒｏｌ（图
形控制）两大部分，ＶＣＬ的结构如图４．１－１所示：　第４章　　　表单的使用　
　64                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　图 4.1-1  VCL结构树   图 4.1-2  TForm的帮助 　４．２ 表单的认识　４．２．１ 通过帮助文件了解表单在ＶＣＬ中的位置　启动Ｄｅｌｐｈｉ系统，系统自动创建Ｆｏｒｍ１表单，点亮Ｆｏｒｍ１表单，按动【Ｆ１】，系统跳出【ＴＦｏｒｍ】的帮
助内容，如图４．２－１所示：　
在ＴＦｏｒｍ帮助文件中点击【Ｈｉｅｒａｒｃｈｙ】（层次结构），帮助系统跳出ＴＦｏｒｍ在ＶＣＬ中的层次结构图，如
图４．２－２所示：　
　图
 4.2-1  TForm在VCL中的层次结构图 从层次结构图中可以清晰的看到，ＴＦｏｒｍ是ＴＣｕｓｔｏｍＦｏｒｍ抽象类的内容，它是ＴＳｃｒｏｌｌｉｎｇＷｉｎＣｏｎｔｒｏｌ《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　65 
的直接派生类，而ＴＳｃｒｏｌｌｉｎｇＷｉｎＣｏｎｔｒｏｌ类又是ＴＷｉｎＣｏｎｔｒｏｌ的派生类。学到这里，读者朋友们不妨回顾
一下３．６节【Ｏｂｊｅｃｔ　Ｐａｓｃａｌ语言的对象和异常】，理解一下ＶＣＬ与Ｏｂｊｅｃｔ　Ｐａｓｃａｌ中的封装性、继承性、多
态性等概念之间的联系。　４．２．２
 从实例了解表单的实际应用　ＴＦｏｒｍ是Ｄｅｌｐｈｉ　ＶＣＬ中最常用，最关键的一个内容。ＴＦｏｒｍ是一个类，是一个概念，它所对应的实体
是表单。　
对于应用程序的用户来讲，表单就是操作界面。表单相当于Ｗｉｎｄｏｗｓ操作系统中的窗口，一个表单就
是一个窗口。Ｗｉｎｄｏｗｓ类型的应用程序基本上都是围绕窗口的程序，用户通过窗口上的各种菜单、工具栏、
按钮、编辑框、滚动条的操作对程序运行进行控制，然后程序又通过后台（不可见）的代码运行得出某一结
果，而这一结果又通过窗口反映给用户。　
对于应用程序的设计者（程序员）来讲，表单就是最重要的工作间。通过向表单添加一系列控件（如
菜单、工具栏、按钮等）来设计用户的操作界面，然后编写这些控件的程序代码来实现整个应用程序的功能。　
典型的表单包含一个框架式边框（用来控制表单的大小）、标题栏（用来显示标题栏图标和标题）、表
单控制按钮（用来最大化、最小化、恢复或关闭表单）、菜单（帮助用户实现程序的操作）、工具栏（帮助用
户快速直观地实现程序最常用的操作）、状态栏（用来提示用户如何操作程序以及程序所处状态）、滚动条（包
括水平滚动条和垂直滚动条，用来滚动表单的内容）、内容区（程序的主体内容），如图４．２－３所示：　
　　　　　　　图
 4.2-2  典型的表单界面         图 4.2-3  表单帮助属性窗口 ４．２．３ 表单的属性、方法、事件　在【ＴＦｏｒｍ帮助窗口】（如图４．２－１所示）中点击【Ｐｒｏｐｅｒｔｉｅｓ】（属性），帮助系统跳出ＴＦｏｒｍ的属性
窗口，如图４．２－４所示：　
从上述窗口中可以看到表单有五大类属性：Ｄｅｒｉｖｅｄ　ｆｒｏｍ　ＴＣｕｓｔｏｍＦｏｒｍ（从ＴＣｕｓｔｏｍＦｏｒｍ继承的属性）、
Ｄｅｒｉｖｅｄ　ｆｒｏｍ　ＴＳｃｒｏｌｌｉｎｇＷｉｎＣｏｎｔｒｏｌ（从ＴＳｃｒｏｌｌｉｎｇＷｉｎＣｏｎｔｒｏｌ继承的属性）、Ｄｅｒｉｖｅｄ　ｆｒｏｍ　ＴＷｉｎＣｏｎｔｒｏｌ第４章　　　表单的使用　
　66                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　（从ＴｗｉｎＣｏｎｔｒｏｌ继承的属性）、Ｄｅｒｉｖｅｄ　ｆｒｏｍ　ＴＣｏｎｔｒｏｌ（从ＴＣｏｎｔｒｏｌ继承的属性）、Ｄｅｒｉｖｅｄ　ｆｒｏｍ　ＴＣｏｍｐｏｎｅｎｔ
（从ＴＣｏｍｐｏｎｅｎｔ继承的属性），请结合ＶＣＬ结构树（如图４．１－１所示）、ＴＦｏｒｍ在ＶＣＬ中的层次结构图（如图
４．２－２所示）理解表单属性的分类方法以及表单属性的继承性。　
同样，在【ＴＦｏｒｍ帮助窗口】中分别点击【Ｍｅｔｈｏｄｓ】（方法）、【Ｅｖｅｎｔｓ】（事件），帮助系统将分别跳出
ＴＦｏｒｍ的方法窗口、事件窗口，这些方法、事件的分类方法和上述属性分类方式基本上相同，都是按照ＶＣＬ
的层次关系进行分类，详细情况请看Ｄｅｌｐｈｉ的相关帮助文件。　
以下给出表单的常用属性、方法和事件，如表４．２－１所示：　表
 4.2-1  表单常用属性、方法和事件 属性、方法和事件　功能解释　
Ａｃｔｉｖｅ　确定表单是否是活动的　
ＡｃｔｉｖｅＣｏｎｔｒｏｌ　确定获得焦点的控件　
ＡｃｔｉｖｅＭＤＩＣｈｉｌｄ　确定在ＭＤＩ应用程序中活动的子表单　
ＡｒｒａｎｇｅＩｃｏｎｓ　排列在ＭＤＩ应用程序中子表单最小化图标　
ＡｕｔｏＳｃｒｏｌｌ　确定滚动条是否自动显示在表单边框内　
ＢｏｒｄｅｒＩｃｏｎｓ　确定显示在标题栏中的按钮　
Ｃａｎｖａｓ　访问表单的画布　
Ｃａｐｔｉｏｎ　确定表单标题栏中的标题文本　
Ｃａｓｃａｄｅ　层叠ＭＤＩ应用程序中的子表单　
ＣｌｉｅｎｔＨａｎｄｌｅ　获取表单客户区的句柄　
ＣｌｉｅｎｔＨｅｉｇｈｔ　确定表单客户区的高度　
ＣｌｉｅｎｔＷｉｄｔｈ　确定表单客户区的宽度　
Ｃｌｏｓｅ　关闭表单　
Ｃｏｌｏｒ　确定表单的颜色　
Ｃｒｅａｔｅ　创建新表单　
Ｃｔｌ３Ｄ　确定表单是否用三维样式显示　
ＤｅｆｏｃｕｓＣｏｎｔｒｏｌ　指定失去焦点的控件　
Ｄｅｓｔｒｏｙ　撤销表单　
Ｅｎａｂｌｅ　确定表单是否被激活（可操作）　
ＦｏｃｕｓＣｏｎｔｒｏｌ　指定获得焦点的控件　
Ｆｏｎｔ　确定在表单上绘制的文字的字体类型　
ＦｏｒｍＳｔｙｌｅ　确定表单样式　
Ｈｅｉｇｈｔ　确定表单高度　
Ｈｉｄｅ　隐藏表单　
ＨｏｒｚＳｃｒｏｌｌＢａｒ　表单的水平滚动条　
Ｉｃｏｎ　表单图标　
ＫｅｙＰｒｅｖｉｅｗ　确定表单是否接收其所含控件的键盘事件　
ＭＤＩＣｈｉｌｄＣｏｕｎｔ　确定在ＭＤＩ应用程序中打开的子表单的数目　
ＭＤＩＣｈｉｌｄｒｅｎ　访问在ＭＤＩ应用程序中的子表单　
Ｍｅｎｕ　表单的主菜单　
Ｎｅｘｔ　激活ＭＤＩ应用程序中的下一子表单　
ＯｎＡｃｔｉｖａｔｅ　处理由表单被激活所引起的事件　
ＯｎＣｌｉｃｋ　处理由单击鼠标所引起的事件　
ＯｎＣｌｏｓｅ　处理由关闭表单所引起的事件　
ＯｎＣｅａｔｅ　处理由表单被创建所引起的事件　
ＯｎＤｂＣｌｉｃｋ　处理由双击鼠标所引起的事件　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　67 
属性、方法和事件　功能解释　
ＯｎＤｅａｃｔｉｖａｔｅ　处理由表单被释放所引起的事件　
ＯｎＤｅｓｔｒｏｙ　处理由表单被撤销所引起的事件　
ＯｎＤｒａｇＤｒｏｐ　处理由在表单内拖放一控件所引起的事件　
ＯｎＤｒａｇＯｖｅｒ　处理由在表单内拖动一控件所引起的事件　
ＯｎＨｉｄｅ　处理由表单被隐藏所引起的事件　
ＯｎＫｅｙＤｏｗｎ　处理键盘按键被按下不立即释放的事件　
ＯｎＫｅｙＰｒｅｓｓ　处理键盘按键被按下的事件　
ＯｎＫｅｙＵｐ　处理键盘按键按下后被释放的事件　
ＯｎＭｏｕｓｅＤｏｗｎ　处理鼠标按钮被按下不立即释放的事件　
ＯｎＭｏｕｓｅＭｏｖｅ　处理鼠标指针在表单上移动的事件　
ＯｎＭｏｕｓｅＵｐ　处理鼠标按钮释放的事件　
ＯｎＰａｉｎｔ　处理绘制表单画布的事件　
ＯｎＲｅｓｉｚｅ　处理由表单大小改变引起的事件　
ＯｎＳｈｏｗ　处理由表单获得焦点引起的事件　
ＰｏｐｕｐＭｅｎｕ　表单弹出式菜单（快捷菜单）　
Ｐｏｓｉｔｉｏｎ　确定表单初始显示的位置和大小　
Ｐｒｅｖｉｏｕｓ　使ＭＤＩ应用程序中的前一子表单得到焦点　
Ｐｒｉｎｔ　打印表单图像　
ＰｒｉｎｔＳｃａｌｅ　确定表单被打印时是怎样绘制的　
Ｒｅｌｅａｓｅ　处理完未决事件后撤销表单　
ＳｅｔＦｏｃｕｓ　设置焦点　
Ｓｈｏｗ　显示表单　
ＳｈｏｗＨｉｎｔ　确定是否显示工具提示　
ＳｈｏｗＭｏｄａｌ　显示有模式表单　
Ｔｉｌｅ　平铺ＭＤＩ应用程序中的子表单　
ＶｅｒｔＳｃｒｏｌｌＢａｒ　表单的垂直滚动条　
Ｖｉｓｉｂｌｅ　确定表单是否可见　
Ｗｉｄｔｈ　确定表单的宽度　
ＷｉｎｄｏｗＭｅｎｕ　确定哪个菜单项是在ＭＤＩ应用程序中的表单菜单项　
ＷｉｎｄｏｗＳｔａｔｅ　确定表单初始装入时是怎样显示的　
　４．３
 基本表单程序设计　４．３．１ 单表单程序设计　我们以一个简单的【单击变色表单】表单操作程序来学习单表单程序的设计。　４．３．１．１ 程序描述　程序由一个固定大小的表单（无法改变表单大小且表单控制按钮只有一个【关闭】按钮）构成，表单
初始标题为【正常颜色的表单，单击变成红色表单】，单击表单时，表单变成红色表单，表单标题变成【红第４章　　　表单的使用　
　68                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　色表单，双击关闭】，双击表单时，跳出【关闭表单】提示框，关闭表单。　４．３．１．２ 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为【ＵｎｔＳｉｎｇｌｅＦｏｒｍ．ｐａｓ】，保存工程为
【ＳｉｎｇｌｅＦｏｒｍ．ｄｐｒ】；　
４、 修改表单标题：按动【Ｆ１１】，切换到【对象查看器】窗口，在对象查看器中把【Ｆｏｒｍ１】的【Ｃａｐｔｉｏｎ】
属性从【Ｆｏｒｍ１】修改为【正常颜色的表单，单击变成红色表单】，这一步修改的结果可以直接从
表单上看到；　
５、 修改表单控制按钮：在【Ｆｏｒｍ１】的对象查看器中，单击【ＢｏｒｄｅｒＩｃｏｎｓ】属性左边的【＋】号，
展开【ＢｏｒｄｅｒＩｃｏｎｓ】的所有子属性，然后把【ｂｉＳｙｓｔｅｍＭｅｎｕ】属性设置为【Ｔｒｕｅ】，把【ｂｉＭｉｎｉｍｉｚｅ】、
【ｂｉＭａｘｉｍｉｚｅ】、【ｂｉＨｅｌｐ】属性设置为【Ｆａｌｓｅ】，这一步修改的结果在表单上不能直接反映出来，
要到程序运行阶段才能看到，程序运行时，可以看到表单控制按钮只剩下【关闭】按钮了；　
６、 修改表单边框风格属性，把表单改为不可伸缩的表单：在【Ｆｏｒｍ１】的对象查看器中，把
【ＢｏｒｄｅｒＳｔｙｌｅ】属性从【ｂｓＳｉｚｅａｂｌｅ】改为【ｂｓＳｉｎｇｌｅ】；　
７、 修改表单高度和宽度：在【Ｆｏｒｍ１】的对象查看器中，把【Ｈｅｉｇｈｔ】属性改为【２００】，把【Ｗｉｄｔｈ】
属性改为【３５０】，使表单成为２００×３５０象素的矩形；　
８、 编写表单单击事件代码：在【Ｆｏｒｍ１】的对象查看器中，选择【Ｅｖｅｎｔｓ】页，把光标移到【ＯｎＣｌｉｃｋ】
事件上，双击右边空白处（或者按【Ｃｔｒｌ＋Ｅｎｔｅｒ】快捷键），进入Ｆｏｒｍ１的ＯｎＣｌｉｃｋ事件代码编
辑框中，在代码编辑框中输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｏｒｍＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
　　ｃａｐｔｉｏｎ：＝＇红色表单，双击关闭＇；　
ｅｎｄ；　
★想想上述代码能否写成【ｆｏｒｍ１．ｃｏｌｏｒ：＝ｃｌＲｅｄ；　　ｃａｐｔｉｏｎ：＝＇红色表单，双击关闭＇；】？　
９、 编写表单双击事件代码：在【Ｆｏｒｍ１】的对象查看器【Ｅｖｅｎｔｓ】页中，把光标移到【ＯｎＤｂＣｌｉｃｋ】
事件上，按【Ｃｔｒｌ＋Ｅｎｔｅｒ】快捷键，进入Ｆｏｒｍ１的ＯｎＤｂＣｌｉｃｋ事件代码编辑框中，在代码编辑框
中输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｏｒｍＤｂｌＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｓｈｏｗＭｅｓｓａｇｅ（＇关闭表单！＇）；　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
★函数ｓｈｏｗｍｅｓｓａｇｅ（）是显示信息对话框的简单ＡＰＩ函数，此类函数还有ＭｅｓｓａｇｅＤｌｇ（）函数，其格式
较为复杂一些，但功能较之ＳｈｏｗＭｅｓｓａｇｅ（）丰富多了。上述代码可以修改为：　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　69 
　　ｉｆ　ＭｅｓｓａｇｅＤｌｇ（＇关闭表单？＇，ｍｔＣｏｎｆｉｒｍａｔｉｏｎ，［ｍｂＹｅｓ，ｍｂＮｏ］，０）＝ｍｒＹｅｓ　ｔｈｅｎ　
　　　　Ｃｌｏｓｅ；　
请读者朋友体会一下这两段代码的不同之处。　
１０、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　
１１、编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图４．３－１所示：　
　图
 4.3-1  单表单程序运行界面 　４．３．１．３ 完整的程序代码　【ＳｉｎｇｌｅＦｏｒｍ．ｄｐｒ】　
　
ｐｒｏｇｒａｍ　ＳｉｎｇｌｅＦｏｒｍ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ｕｎｔＳｉｎｇｌｅＦｏｒｍ　ｉｎ　＇ｕｎｔＳｉｎｇｌｅＦｏｒｍ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ｕｎｔＳｉｎｇｌｅＦｏｒｍ．ｄｆｍ】　
　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　２７８　第４章　　　表单的使用　
　70                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　Ｔｏｐ　＝　１２７　
　　ＢｏｒｄｅｒＩｃｏｎｓ　＝　［ｂｉＳｙｓｔｅｍＭｅｎｕ］　
　　ＢｏｒｄｅｒＳｔｙｌｅ　＝　ｂｓＳｉｎｇｌｅ　
　　Ｃａｐｔｉｏｎ　＝　＇正常颜色的表单，单击变成红色表单＇　
　　ＣｌｉｅｎｔＨｅｉｇｈｔ　＝　１６８　
　　ＣｌｉｅｎｔＷｉｄｔｈ　＝　３４２　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＯｎＣｌｉｃｋ　＝　ＦｏｒｍＣｌｉｃｋ　
　　ＯｎＤｂｌＣｌｉｃｋ　＝　ＦｏｒｍＤｂｌＣｌｉｃｋ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
ｅｎｄ　
　
【ｕｎｔＳｉｎｇｌｅＦｏｒｍ．ｐａｓ】　
　
ｕｎｉｔ　ｕｎｔＳｉｎｇｌｅＦｏｒｍ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｏｒｍＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｏｒｍＤｂｌＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　71 
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｏｒｍＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
　　ｃａｐｔｉｏｎ：＝＇红色表单，双击关闭＇；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｏｒｍＤｂｌＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｓｈｏｗＭｅｓｓａｇｅ（＇关闭表单！＇）；　
　　Ｃｌｏｓｅ；　
ｅｎｄ；　
ｅｎｄ．　
　４．３．２
 多表单程序设计　复杂的应用程序往往由多个表单组合而成，这些表单之间界面上通过按钮、菜单等进行有机连接，代
码上通过【ｓｈｏｗ】、【Ｃｌｏｓｅ】等语句进行控制连接。下面通过一个简单的两个表单组成的程序的设计制作过
程的介绍来学习多表单程序的设计。　４．３．２．１
 程序描述　程序由两个表单组成，其中一张为主表单，另一张为程序说明Ａｂｏｕｔ表单。主表单上放置一个按钮，
通过按动按钮调出Ａｂｏｕｔ表单。Ａｂｏｕｔ表单上也放置一个按钮，通过按钮关闭Ａｂｏｕｔ表单，回到主表单。Ａｂｏｕｔ
表单可以使用Ｄｅｌｐｈｉ提供的Ａｂｏｕｔ表单模板建立。　第４章　　　表单的使用　
　72                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　４．３．２．２ 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为【ＵｎｔＭａｉｎ．ｐａｓ】，保存工程为【ＴｗｏＦｏｒｍ．ｄｐｒ】；　
４、 添加按钮：在Ｆｏｒｍ１表单上放置一个Ｂｕｔｔｏｎ控件，在设置该控件的Ｃａｐｔｉｏｎ属性为【Ａｂｏｕｔ…】；　
５、 调出【Ｎｅｗ　Ｉｔｅｍｓ】窗口：选择菜单【ＦｉｌｅàＮｅｗ】，出现【Ｎｅｗ　Ｉｔｅｍｓ】对话框，如图４．３－２所示：　
　　　　图
 4.3-2  New Items窗口     图 4.3-3 ６、 新建Ａｂｏｕｔ表单：在【Ｎｅｗ　Ｉｔｅｍｓ】窗口中选择【Ｆｏｒｍｓ】页，选择【Ａｂｏｕｔｂｏｘ】项，按动【ＯＫ】
按钮，完成Ａｂｏｕｔ表单的建立；　
７、 保存Ａｂｏｕｔ表单：按动【Ｃｔｒｌ＋Ｓ】快捷键，保存单元为【ＵｎｔＡｂｏｕｔ．ｐａｓ】；　
８、 添加Ａｂｏｕｔ表单的【ＯＫ】按钮代码：双击ＡｂｏｕｔＢｏｘ表单的【ＯＫ】按钮，在代码编辑框中输入如下
代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＡｂｏｕｔＢｏｘ．ＯＫＢｕｔｔｏｎＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　Ｃｌｏｓｅ；　
ｅｎｄ；　
　
９、 添加Ｆｏｒｍ１的【Ａｂｏｕｔ．．．】按钮代码：双击Ｆｏｒｍ１表单上的【Ａｂｏｕｔ…】按钮，在代码编辑框中输
入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ＡｂｏｕｔＢｏｘ．ｓｈｏｗ；　
ｅｎｄ；　
这里【ＡｂｏｕｔＢｏｘ．ｓｈｏｗ；】语句用于调出Ａｂｏｕｔ表单；从对象查看器可以知道Ａｂｏｕｔ表单的名字，
如图４．３－３所示：　
　
１０、设置主表单：多个表单程序必须主表单，所谓主表单是指程序运行是第一个被激活的表单。选择《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　73 
菜单【Ｐｒｏｊｅｃｔ→Ｏｐｔｉｏｎｓ】，跳出【Ｐｒｏｊｅｃｔ　Ｏｐｔｉｏｎｓ】窗口，在【Ｐｒｏｊｅｃｔ　ＯＰｔｉｏｎｓ】窗口中选择
【Ｆｏｒｍｓ】页，把【Ｍａｉｎ　Ｆｏｒｍ】设置为【Ｆｏｒｍ１】，如图４．３－４所示：　
　　　　图
 4.3-4  设置主表单窗口图 4.3-5       自动添加单元引用 １２、保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　
１３、确认引用单元：按动【Ｆ９】快捷键，程序编译运行，这时Ｄｅｌｐｈｉ系统会根据【ＵｎｔＭａｉｎ．ｐａｓ】单
元中的【ＡｂｏｕｔＢｏｘ．ｓｈｏｗ；】语句自动产生单元引用（如图４．３－６所示），用户只需确认引用即可，
如图４．３－５所示：　
　图
 4.3-6  确认引用窗口 ★ 单元引用也可以手工添加　
★ 如果两个表单交叉引用，不能只是简单地在双方的Ｕｓｅｓ子句中加入对方的单元名，否则将引起“循
环引用”的编译错误。解决的方法：　
１） 把单元引用Ｕｓｅｓ子句放到各自单元的Ｉｍｐｌｅｍｅｎｔａｔｉｏｎ部分，如图４．３－６用法；　
２） 把其中一个单元的Ｕｓｅｓ子句放到Ｉｎｔｅｒｆａｃｅ部分，另一个单元的Ｕｓｅｓ自己放到
Ｉｍｐｌｅｍｅｎｔａｔｉｏｎ部分。　
１４、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　
１５、再次编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图４．３－７所示：　第４章　　　表单的使用　
　74                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　图 4.3-7  程序运行界面 ４．３．２．３ 完整的程序代码　【ＴｗｏＦｏｒｍ．ｄｐｒ】　
　
ｐｒｏｇｒａｍ　ＴｗｏＦｏｒｍ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＭａｉｎ　ｉｎ　＇ＵｎｔＭａｉｎ．ｐａｓ＇　｛Ｆｏｒｍ１｝，　
　　ＵｎｔＡｂｏｕｔ　ｉｎ　＇ＵｎｔＡｂｏｕｔ．ｐａｓ＇　｛ＡｂｏｕｔＢｏｘ｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＡｂｏｕｔＢｏｘ，　ＡｂｏｕｔＢｏｘ）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＭａｉｎ．ｄｆｍ】　
　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　４１８　
　　Ｈｅｉｇｈｔ　＝　２７５　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　75 
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　３２　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇Ａｂｏｕｔ．．．＇　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
★ 【＊．ｄｆｍ】文件既可以以ＡＳＣＩＩ格式保存，也可以以二进制格式保存，ＡＳＣＩＩ文件格式可以用普通
的文本编辑器打开。这里的【ＵｎｔＡｂｏｕｔ．ｄｆｍ】以二进制格式保存，读者朋友可以在资源管理器中
查看之。　
【ＵｎｔＭａｉｎ．ｐａｓ】　
　
ｕｎｉｔ　ＵｎｔＭａｉｎ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　第４章　　　表单的使用　
　76                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ＡｂｏｕｔＢｏｘ．ｓｈｏｗ；　
ｅｎｄ；　
　
ｅｎｄ．　
　
【ＵｎｔＡｂｏｕｔ．ｐａｓ】　
　
ｕｎｉｔ　ＵｎｔＡｂｏｕｔ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　Ｗｉｎｄｏｗｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｆｏｒｍｓ，　Ｃｏｎｔｒｏｌｓ，　ＳｔｄＣｔｒｌｓ，　
　　Ｂｕｔｔｏｎｓ，　ＥｘｔＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＡｂｏｕｔＢｏｘ　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｐａｎｅｌ１：　ＴＰａｎｅｌ；　
　　　　ＰｒｏｇｒａｍＩｃｏｎ：　ＴＩｍａｇｅ；　
　　　　ＰｒｏｄｕｃｔＮａｍｅ：　ＴＬａｂｅｌ；　
　　　　Ｖｅｒｓｉｏｎ：　ＴＬａｂｅｌ；　
　　　　Ｃｏｐｙｒｉｇｈｔ：　ＴＬａｂｅｌ；　
　　　　Ｃｏｍｍｅｎｔｓ：　ＴＬａｂｅｌ；　
　　　　ＯＫＢｕｔｔｏｎ：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＯＫＢｕｔｔｏｎＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　77 
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　ＡｂｏｕｔＢｏｘ：　ＴＡｂｏｕｔＢｏｘ；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＡｂｏｕｔＢｏｘ．ＯＫＢｕｔｔｏｎＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　Ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｅｎｄ．　
　　４．４
 表单实例――自适应表单　４．４．１ 程序描述　屏幕分辨率是程序员在制作程序界面时必须时刻考虑的问题，友好的界面不仅仅首先是必须在任何一
台电脑上都友好的界面。分辨率（Ｒｅｓｏｌｕｔｉｏｎ）是指显示器画面解析度，通常用一个乘积来表示。它标明了水
平方向上的像素点数（水平分辨率）与竖直方向上的像素点数（垂直分辨率），例如６４０×４８０、８００×６００、１０２４
×７６８等等。通常显示器都有多种分辨率模式供选择。分辨率还依赖于显示卡的显示能力。如果显示器的分
辨率最大能够达到１０２４Ｘ７６８，但是显示卡只能支持８００Ｘ６００，显示器仍旧只能工作在８００Ｘ６００的环境下。　
这里要介绍的程序实现这么一个功能：在表单初始化时，监测屏幕的分辨率，如果屏幕分辨率一致，
则不作改动，否则修改屏幕分辨率。当程序退出时，如果程序初始化时修改了屏幕的分辨率，则恢复屏幕分
辨率，否则不作修改。　第４章　　　表单的使用　
　78                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　４．４．２ 相关知识　这里先介绍一下要用到ＷＩＮＤＯＷＳ　ＡＰＩ函数ＥｎｕｍＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ、ＣｈａｎｇｅＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ和
ＧｅｔＳｙｓｔｅｍＭｅｔｒｉｃｓ。　
●　ＢＯＯＬ　ＥｎｕｍＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（　
　　　　ＬＰＣＴＳＴＲ　ｌｐｓｚＤｅｖｉｃｅＮａｍｅ，　／／指定显示设备，一般设置为ｎｉｌ。　
　　　　ＤＷＯＲＤ　ｉＭｏｄｅＮｕｍ，　／／指定图形模式，为０时，初始化设备　
　　　　ＬＰＤＥＶＭＯＤＥ　ｌｐＤｅｖＭｏｄｅ　／／指向设置内容　
　　　　）；此函数用于配合更改显示设置　
●　ＬＯＮＧ　ＣｈａｎｇｅＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（　
　　　　ＬＰＤＥＶＭＯＤＥ　ｌｐＤｅｖＭｏｄｅ，　／／指向设置内容　
　　　　ＤＷＯＲＤ　ｄｗｆｌａｇｓ　／／修改设置的内容，为０时，动态修改当前图形模式　
　　　）；　此函数用于更改显示设置　
●　ｉｎｔ　ＧｅｔＳｙｓｔｅｍＭｅｔｒｉｃｓ（　
　　ｉｎｔ　ｎＩｎｄｅｘ　　／／指定要读取的系统信息类型，　
　　　　　　　　　　　　　　　　ＳＭ＿ＣＸＳＣＲＥＥＮ为分辨率Ｘ坐标，　
　　　　　　　　　　　　　　　　ＳＭ＿ＣＹＳＣＲＥＥＮ为分辨率Ｙ坐标　
　　　）；　此函数可用于读取显示设置　
　４．４．３
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 新建工程：【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，保存工程为【ＡｕｔｏＦｏｒｍ．ｐｒｊ】，保存单元为
【ＵｎｔＡｕｔｏＦｏｒｍ．ｐａｓ】；　
３、 添加按钮：在表单【ｆｏｒｍ１】上放置一个【ｂｕｔｔｏｎ】按钮，在【ｆｏｒｍ１】对象查看器中设置【Ｃａｐｔｉｏｎ】
属性为【恢复并退出】；　
４、 查看【ＵｎｔＡｕｔｏＦｏｒｍ】单元：按动【Ｃｔｒｌ＋Ｆ１２】，查看【ＵｎｔＡｕｔｏＦｏｒｍ】单元，如图４．４－１所示：　
　图
 4.4-1  通过【View Unit】窗口查看单元文件 《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　79 
５、 添加全局变量说明：在【ｉｍｐｌｅｍｅｎｔａｔｉｏｎ】部分的【ｖａｒ】变量说明部分加入如下变量说明：　
／／－－－－－－－－－－－－－－－　
　　｛设置公用变量｝　
　　ｏｌｄ＿ｗｉｄｔｈ：ｉｎｔｅｇｅｒ；／／用于保存为改变设置前的屏幕分辨率宽　
　　ｏｌｄ＿ｈｅｉｇｈｔ：ｉｎｔｅｇｅｒ；／／用于保存为改变设置前的屏幕分辨率高　
　　ｃｈａｎｇｅｆｌａｇ：ｂｏｏｌｅａｎ；／／用于表明是否改变了屏幕设置　
　　ｄｅｖｉｃｅ＿ｍｏｄｅ：ｔＤｅｖｉｃｅｍｏｄｅ；／／用于表明设备模式　
／／－－－－－－－－－－－－－－－－　
　
６、 添加局部变量说明：在【Ｆｏｒｍ１】的对象查看器【Ｅｖｅｎｔｓ】页中，双击【ＯｎＣｒｅａｔｅ】事件，在【ｂｅｇｉｎ】
前加入如下常量说明：　
ｃｏｎｓｔ　
　　ｆｏｒｍ＿ｗｉｄｔｈ＝８００；／／用于表明表单最佳分辨率宽　
　　ｆｏｒｍ＿ｈｅｉｇｈｔ＝６００；／／用于表明表单最佳分辨率高　
　
７、 添加表单初始化处理代码：在【Ｆｏｒｍ１】的对象查看器【Ｅｖｅｎｔｓ】页中，双击【ＯｎＣｒｅａｔｅ】事件，
在［ｂｅｇｉｎ］和［ｅｎｄ］间加入如下代码：　
｛初始化改变标志｝　
　　ｃｈａｎｇｅｆｌａｇ：＝ｆａｌｓｅ；　
　　｛判断分辨率，若不一致，则修改屏幕分辨率｝　
　　ｉｆ（ｓｃｒｅｅｎ．ｗｉｄｔｈ＜＞ｆｏｒｍ＿ｗｉｄｔｈ）ｏｒ（ｓｃｒｅｅｎ．Ｈｅｉｇｈｔ＜＞ｆｏｒｍ＿ｈｅｉｇｈｔ）ｔｈｅｎ　
　　ｉｆ　ＥｎｕｍＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｎｉｌ，０，ｄｅｖｉｃｅ＿ｍｏｄｅ）　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　　　｛改变前，保存原设置以备恢复之用，并设置标志为真｝　
　　　　　　ｏｌｄ＿ｗｉｄｔｈ：＝ＧｅｔＳｙｓｔｅｍＭｅｔｒｉｃｓ（ＳＭ＿ＣＸＳＣＲＥＥＮ）；／／读取Ｘ坐标并赋值　
　　　　　　ｏｌｄ＿ｈｅｉｇｈｔ：＝ＧｅｔＳｙｓｔｅｍＭｅｔｒｉｃｓ（ＳＭ＿ＣＹＳＣＲＥＥＮ）；／／读取Ｙ坐标并赋值　
　　　　　　ｃｈａｎｇｅｆｌａｇ：＝ｔｒｕｅ；　
　　　　　　｛改变设置｝　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｆｉｅｌｄｓ：＝ｄｍ＿ｐｅｌｓｗｉｄｔｈ　ＯＲ　ｄｍ＿ｐｅｌｓｈｅｉｇｈｔ　；　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｗｉｄｔｈ：＝ｆｏｒｍ＿ｗｉｄｔｈ；　／／给宽度赋值　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｈｅｉｇｈｔ：＝ｆｏｒｍ＿ｈｅｉｇｈｔ；／／给高度赋值　
　　　　　　ＣｈａｎｇｅＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｄｅｖｉｃｅ＿ｍｏｄｅ，０）；　／／改变设置　
　　　　　　｛修改成功，显示信息｝　
　　　　　　ｓｈｏｗｍｅｓｓａｇｅ（＇设置成功，设置为：＇　
　　　　　　　　　　　　　　　　　＋ｉｎｔｔｏｓｔｒ（ｆｏｒｍ＿ｗｉｄｔｈ）＋＇＊＇＋ｉｎｔｔｏｓｔｒ（ｆｏｒｍ＿ｈｅｉｇｈｔ）　
　　　　　　　　　　　　　　　　　＋＇；＇＋＇原设置为：＇　
　　　　　　　　　　　　　　　　　＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｗｉｄｔｈ）＋＇＊＇＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｈｅｉｇｈｔ））；　
　　　　ｅｎｄ；　第４章　　　表单的使用　
　80                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　
８、 添加程序退出处理代码：双击【Ｆｏｒｍ１】表单上【ｂｕｔｔｏｎ１】控件，在【ｂｅｇｉｎ】和【ｅｎｄ】间加入
如下代码：　
　　｛判断是否改变，是，则恢复设置｝　
　　ｉｆ　ｃｈａｎｇｅｆｌａｇ＝ｔｒｕｅ　ｔｈｅｎ　
　　ｉｆ　ＥｎｕｍＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｎｉｌ，０，ｄｅｖｉｃｅ＿ｍｏｄｅ）　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　｛恢复设置｝　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｆｉｅｌｄｓ：＝ｄｍ＿ｐｅｌｓｗｉｄｔｈ　ＯＲ　ｄｍ＿ｐｅｌｓｈｅｉｇｈｔ　；　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｗｉｄｔｈ：＝ｏｌｄ＿ｗｉｄｔｈ；／／赋原来设置的宽度　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｈｅｉｇｈｔ：＝ｏｌｄ＿ｈｅｉｇｈｔ；／／赋原来设置的高度　
　　　　　　ＣｈａｎｇｅＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｄｅｖｉｃｅ＿ｍｏｄｅ，０）；　／／恢复设置　
　　　　ｅｎｄ；　
　　｛恢复成功，显示信息｝　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇恢复设置成功，设置为：＇　
　　　　　　　　　　　　　　＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｗｉｄｔｈ）＋＇＊＇＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｈｅｉｇｈｔ））；　
　　ｃｌｏｓｅ；／／关闭表单　
　
９、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存全部工程；　
１０、编译运行程序：按动【Ｆ９】快捷键，编译运行程序，程序运行界面如图所示：　
　　　　图
 4.4-2  程序运行界面第一部分  图 4.4-3  程序运行界面第二部分 ★ 本例中，表单的最佳分辨率设置为８００＊６００。所以如果您的电脑分辨率就是８００＊６００，您会发现本
例对屏幕设置未作任何修改。要查看本例效果，请在屏幕设置中修改为其他的分辨率。　４．４．４
 完整的程序代码　【ＡｏｕｔｏＦｏｒｍ．ｄｐｒ】　
　
ｐｒｏｇｒａｍ　ＡｏｕｔｏＦｏｒｍ；　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　81 
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＡｕｔｏＦｏｒｍ　ｉｎ　＇ＵｎｔＡｕｔｏＦｏｒｍ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＡｕｔｏＦｏｒｍ．ｄｆｍ】　
　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　２６０　
　　Ｔｏｐ　＝　１４３　
　　Ｗｉｄｔｈ　＝　３６６　
　　Ｈｅｉｇｈｔ　＝　２７４　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１４　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＯｎＣｒｅａｔｅ　＝　ＦｏｒｍＣｒｅａｔｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　３６　
　　　　Ｔｏｐ　＝　４０　
　　　　Ｗｉｄｔｈ　＝　９２　
　　　　Ｈｅｉｇｈｔ　＝　３１　
　　　　Ｃａｐｔｉｏｎ　＝　＇退出并还原＇　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　第４章　　　表单的使用　
　82                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＡｕｔｏＦｏｒｍ．ｐａｓ】　
　
ｕｎｉｔ　ＵｎｔＡｕｔｏＦｏｒｍ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
／／－－－－－－－－－－－－－－－　
　　｛设置公用变量｝　
　　ｏｌｄ＿ｗｉｄｔｈ：ｉｎｔｅｇｅｒ；／／用于保存为改变设置前的屏幕分辨率宽　
　　ｏｌｄ＿ｈｅｉｇｈｔ：ｉｎｔｅｇｅｒ；／／用于保存为改变设置前的屏幕分辨率高　
　　ｃｈａｎｇｅｆｌａｇ：ｂｏｏｌｅａｎ；／／用于表明是否改变了屏幕设置　
　　ｄｅｖｉｃｅ＿ｍｏｄｅ：ｔＤｅｖｉｃｅｍｏｄｅ；／／用于表明设备模式　
／／－－－－－－－－－－－－－－－－　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　83 
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｃｏｎｓｔ　
　　ｆｏｒｍ＿ｗｉｄｔｈ＝８００；／／用于表明表单最佳分辨率宽　
　　ｆｏｒｍ＿ｈｅｉｇｈｔ＝６００；／／用于表明表单最佳分辨率高　
ｂｅｇｉｎ　
　　｛初始化改变标志｝　
　　ｃｈａｎｇｅｆｌａｇ：＝ｆａｌｓｅ；　
　
　　｛判断分辨率，若不一致，则修改屏幕分辨率｝　
　　ｉｆ（ｓｃｒｅｅｎ．ｗｉｄｔｈ＜＞ｆｏｒｍ＿ｗｉｄｔｈ）ｏｒ（ｓｃｒｅｅｎ．Ｈｅｉｇｈｔ＜＞ｆｏｒｍ＿ｈｅｉｇｈｔ）ｔｈｅｎ　
　　ｉｆ　ＥｎｕｍＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｎｉｌ，０，ｄｅｖｉｃｅ＿ｍｏｄｅ）　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　　　｛改变前，保存原设置以备恢复之用，并设置标志为真｝　
　　　　　　ｏｌｄ＿ｗｉｄｔｈ：＝ＧｅｔＳｙｓｔｅｍＭｅｔｒｉｃｓ（ＳＭ＿ＣＸＳＣＲＥＥＮ）；／／读取Ｘ坐标并赋值　
　　　　　　ｏｌｄ＿ｈｅｉｇｈｔ：＝ＧｅｔＳｙｓｔｅｍＭｅｔｒｉｃｓ（ＳＭ＿ＣＹＳＣＲＥＥＮ）；／／读取Ｙ坐标并赋值　
　　　　　　ｃｈａｎｇｅｆｌａｇ：＝ｔｒｕｅ；　
　　　　　　｛改变设置｝　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｆｉｅｌｄｓ：＝ｄｍ＿ｐｅｌｓｗｉｄｔｈ　ＯＲ　ｄｍ＿ｐｅｌｓｈｅｉｇｈｔ　；　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｗｉｄｔｈ：＝ｆｏｒｍ＿ｗｉｄｔｈ；　／／给宽度赋值　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｈｅｉｇｈｔ：＝ｆｏｒｍ＿ｈｅｉｇｈｔ；／／给高度赋值　
　　　　　　ＣｈａｎｇｅＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｄｅｖｉｃｅ＿ｍｏｄｅ，０）；　／／改变设置　
　　　　　　｛修改成功，显示信息｝　
　　　　　　ｓｈｏｗｍｅｓｓａｇｅ（＇设置成功，设置为：＇　
　　　　　　　　　　　　　　　　　＋ｉｎｔｔｏｓｔｒ（ｆｏｒｍ＿ｗｉｄｔｈ）＋＇＊＇＋ｉｎｔｔｏｓｔｒ（ｆｏｒｍ＿ｈｅｉｇｈｔ）　
　　　　　　　　　　　　　　　　　＋＇；＇＋＇原设置为：＇　
　　　　　　　　　　　　　　　　　＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｗｉｄｔｈ）＋＇＊＇＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｈｅｉｇｈｔ））；　
　　　　ｅｎｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　｛判断是否改变，是，则恢复设置｝　
　　ｉｆ　ｃｈａｎｇｅｆｌａｇ＝ｔｒｕｅ　ｔｈｅｎ　
　　ｉｆ　ＥｎｕｍＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｎｉｌ，０，ｄｅｖｉｃｅ＿ｍｏｄｅ）　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　｛恢复设置｝　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｆｉｅｌｄｓ：＝ｄｍ＿ｐｅｌｓｗｉｄｔｈ　ＯＲ　ｄｍ＿ｐｅｌｓｈｅｉｇｈｔ　；　
　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｗｉｄｔｈ：＝ｏｌｄ＿ｗｉｄｔｈ；／／赋原来设置的宽度　第４章　　　表单的使用　
　84                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　　　ｄｅｖｉｃｅ＿ｍｏｄｅ．ｄｍｐｅｌｓｈｅｉｇｈｔ：＝ｏｌｄ＿ｈｅｉｇｈｔ；／／赋原来设置的高度　
　　　　　　ＣｈａｎｇｅＤｉｓｐｌａｙＳｅｔｔｉｎｇｓ（ｄｅｖｉｃｅ＿ｍｏｄｅ，０）；　／／恢复设置　
　　　　ｅｎｄ；　
　　｛恢复成功，显示信息｝　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇恢复设置成功，设置为：＇　
　　　　　　　　　　　　　　＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｗｉｄｔｈ）＋＇＊＇＋ｉｎｔｔｏｓｔｒ（ｏｌｄ＿ｈｅｉｇｈｔ））；　
　　ｃｌｏｓｅ；／／关闭表单　
ｅｎｄ；　
　
ｅｎｄ．　４．５
 表单实例――不规则表单　４．５．１ 程序描述　四四方方的显示器从一出现就对应用程序产生决定性的影响，到目前为止，几乎所有的应用程序都不
约而同地选择了四边形的表单界面。久而久之，难免生出厌倦之意。如何制作各种形状的表单界面呢？　
这里要介绍的程序实现这么一个功能：在表单初始化时，把表单画成圆形无标题栏形式表单，在表单
上放置一个按钮，通过它来退出程序（因为程序标题栏已被切割）。　４．５．２
 相关知识　程序用到了两个函数：ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ和ＳｅｔＷｉｎｄｏｗＲｇｎ，介绍如下：　
●ＳｅｔＷｉｎｄｏｗＲｇｎ（）　
ｉｎｔ　ＳｅｔＷｉｎｄｏｗＲｇｎ（　　
ＨＷＮＤ　ｈＷｎｄ，　／／需要设置形状的窗口的句柄　　
ＨＲＧＮ　ｈＲｇｎ，　／／多边形的句柄　　
ＢＯＯＬ　ｂＲｅｄｒａｗ　／／窗口是否需要重绘　　
）；　　
其中的ｈＲｇｎ参数决定了窗口的外形，它指向一个不规则窗体结构，我们应该通过ＣｒｅａｔｅＰｏｌｙｇｏｎＲｇｎ
函数来创建它，该函数的说明如下：　
●ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ（）　
ＨＲＧＮ　ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ（　　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　85 
　　　　ｉｎｔ　ｎＬｅｆｔＲｅｃｔ，　／／　包含圆形的矩形的左上角Ｘ轴坐标　
　　　　ｉｎｔ　ｎＴｏｐＲｅｃｔ，　／／　包含圆形的矩形的左上角Ｙ轴坐标　
　　　　ｉｎｔ　ｎＲｉｇｈｔＲｅｃｔ，　／／包含圆形的矩形的右下角Ｘ轴坐标　
　　　　ｉｎｔ　ｎＢｏｔｔｏｍＲｅｃｔ　　／／　包含圆形的矩形的右下角Ｙ轴坐标　
　　　）；　　
●其他相关ＡＰＩ函数　
下面把关于制作不规则表单的ＡＰＩ函数及其功能列举如下：　表
 4.5-1  不规则表单制作API函数 函数　描述　
ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ　制作椭圆形表单　
ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎＩｎｄｉｒｅｃｔ　用Ｒｅｃｔ制作椭圆形表单　
ＣｒｅａｔｅＰｏｌｙｇｏｎＲｇｎ　制作多角形表单　
ＣｒｅａｔｅＰｏｌｙＰｏｌｙｇｏｎＲｇｎ　制作有多个多角形组成的表单　
ＣｒｅａｔｅＲｅｃｔＲｇｎ　制作方形表单　
ＣｒｅａｔｅＲｅｃｔＲｇｎＩｎｄｉｒｅｃｔ　制作有多个方形组成的表单　
ＣｒｅａｔｅＲｏｕｎｄＲｅｃｔＲｇｎ　制作圆角方形表单　
ＣｏｍｂｉｎｅＲｇｎ　制作两个区域合成的表单　
　４．５．３
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 新建工程：选择【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建工程；　
３、 保存工程：选择【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为【ＵｎｔＡｎｏｍａＦｏｒｍ．ｐａｓ】，保存工程为【ＡｎｏｍａＦｏｒｍ．ｄｐｒ】；　
４、 重新命名Ｆｏｒｍ１：在【Ｆｏｒｍ１】对象查看器中修改【Ｎａｍｅ】属性为【ｆｒｍｍａｉｎ】；　
５、 修改ｆｏｒｍ１的ＢｏｒｄｅｒＩｃｏｎ属性：在【Ｆｏｒｍ１】对象查看器中修改【ＢｏｒｄｅｒＩｃｏｎ】属性中的
【ｂｉＳｙｓｔｅｍＭｅｎｕ】属性为【ｔｒｕｅ】，其他的【ＢｏｒｄｅｒＩｃｏｎ】属性为【ｆａｌｓｅ】；　
６、 修改ｆｏｒｍ１的ＢｏｒｄｅｒＳｔｙｌｅ：在【Ｆｏｒｍ１】对象查看器中修改【ＢｏｒｄｅｒＳｔｙｌｅ】为【ｂｓＳｉｎｇｌｅ】；　
７、 修改ｆｏｒｍ１的ｆｏｒｍｓｔｙｌｅ：在【Ｆｏｒｍ１】对象查看器中修改【ｆｏｒｍｓｔｙｌｅ】属性为【ｆｓ－ＳｔｙａｙＯｎＴｏｐ】；　
８、 修改ｆｏｒｍ１的Ｃｏｌｏｒ：在【Ｆｏｒｍ１】对象查看器中修改【Ｃｏｌｏｒ】属性为【ｃｌＲｅｄ】；　
９、 添加【关闭】按钮：在【Ｆｏｒｍ１】上添加【Ｂｕｔｔｏｎ】按钮，选择【Ｂｕｔｔｏｎ１】按钮，在【Ｂｕｔｔｏｎ１】
按钮对象查看器中设置【Ｃａｐｔｉｏｎ】属性为【关闭】；　
１０、添加程序主要代码：双击【ｆｒｍｍａｉｎ】表单，在【Ｔｆｒｍｍａｉｎ．ＦｏｒｍＣｒｅａｔｅ】事件中输入如下代码（阴
影部分）：　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　Ｒｇｎ１：ＨＲｇｎ；　
ｂｅｇｉｎ　
　　Ｒｇｎ１：＝ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ（２７，２７，１７０，１７０）；　第４章　　　表单的使用　
　86                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ＳｅｔＷｉｎｄｏｗＲｇｎ（Ｈａｎｄｌｅ，　Ｒｇｎ１，　Ｔｒｕｅ）；　
ｅｎｄ；　
１１、添加关闭程序代码：双击【Ｂｕｔｔｏｎ１】按钮，在【Ｔｆｒｍｍａｉｎ．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ】事件中输入如下代码
（阴影部分）：　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　Ｃｌｏｓｅ；　
ｅｎｄ；　
１２、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存全部工程；　
１３、编译运行程序：按动【Ｆ９】快捷键，编译运行程序，程序运行界面如图４．５－１所示：　
　图
 4.5-1  程序运行界面 ４．５．４ 完整的程序代码　【ＡｎｏｍａＦｏｒｍ．ｄｐｒ】　
　
ｐｒｏｇｒａｍ　ＡｎｏｍａＦｏｒｍ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＡｎｏｍａＦｏｒｍ　ｉｎ　＇ＵｎｔＡｎｏｍａＦｏｒｍ．ｐａｓ＇　｛ｆｒｍｍａｉｎ｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（Ｔｆｒｍｍａｉｎ，　ｆｒｍｍａｉｎ）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＡｎｏｍａＦｏｒｍ．ｄｆｍ】　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　87 
ｏｂｊｅｃｔ　ｆｒｍｍａｉｎ：　Ｔｆｒｍｍａｉｎ　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２０　
　　ＢｏｒｄｅｒＩｃｏｎｓ　＝　［ｂｉＳｙｓｔｅｍＭｅｎｕ］　
　　ＢｏｒｄｅｒＳｔｙｌｅ　＝　ｂｓＳｉｎｇｌｅ　
　　Ｃａｐｔｉｏｎ　＝　＇ｆｒｍｍａｉｎ＇　
　　ＣｌｉｅｎｔＨｅｉｇｈｔ　＝　４４８　
　　ＣｌｉｅｎｔＷｉｄｔｈ　＝　６８８　
　　Ｃｏｌｏｒ　＝　ｃｌＲｅｄ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＦｏｒｍＳｔｙｌｅ　＝　ｆｓＳｔａｙＯｎＴｏｐ　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＯｎＣｒｅａｔｅ　＝　ＦｏｒｍＣｒｅａｔｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　６４　
　　　　Ｔｏｐ　＝　５６　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇关闭＇　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＡｎｏｍａＦｏｒｍ．ｐａｓ】　
　
ｕｎｉｔ　ＵｎｔＡｎｏｍａＦｏｒｍ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　第４章　　　表单的使用　
　88                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　Ｔｆｒｍｍａｉｎ　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　ｆｒｍｍａｉｎ：　Ｔｆｒｍｍａｉｎ；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　Ｒｇｎ１：ＨＲｇｎ；　
ｂｅｇｉｎ　
　　Ｒｇｎ１：＝ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ（２７，２７，１７０，１７０）；　
　　ＳｅｔＷｉｎｄｏｗＲｇｎ（Ｈａｎｄｌｅ，　Ｒｇｎ１，　Ｔｒｕｅ）；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　Ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｅｎｄ．　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　89 ４．６
 表单实例――随意拖动表单　４．６．１ 程序描述　４．５节中不规则表单程序存在这么一个问题：应用程序的标题栏已被切割，那么程序表单如何拖拉呢？
本例中将详细介绍这一问题的解决方法，利用鼠标在表单的客户区中任意拖动表单。　４．６．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 打开４．５节中示例程序【ＡｎｏｍａＦｏｒｍ．ｄｐｒ】：选择菜单【Ｆｉｌｅ→Ｏｐｅｎ　Ｐｒｏｊｅｃｔ】，在【Ｏｐｅｎ　Ｐｒｏｊｅｃｔ】
窗口（如图４．６－１所示）中选择【ＡｎｏｍａＦｏｒｍ．ｄｐｒ】文件，按动【打开】按钮；　
　　　图
 4.6-1  打开【AnomaForm.dpr】工程文件   图 4.6-2  另存工程文件 ★ 也可选择菜单【Ｆｉｌｅ→Ｒｅｏｐｅｎ】，快速打开最近工作过的文件　
　
３、 另存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ｐｒｏｊｅｃｔ　Ａｓ】，在【Ｓａｖｅ　Ｐｒｏｊｅｃｔ　Ａｓ】窗口（如图４．６－２所示）
中输入文件名【ＤｒａｇＦｏｒｍ．ｄｐｒ】，按动【保存】按钮；　
４、 另存单元：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｓ】，在【Ｓａｖｅ　Ａｓ】窗口（如图４．６－３所示）中输入文件名
【ＵｎｔＤｒａｇＦｏｒｍ．ｄｐｒ】，按动【保存】按钮；　第４章　　　表单的使用　
　90                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　图 4.6-3  另存单元文件 ５、 自定义消息过滤过程：自定义函数或者过程一般包括【定义函数接口部分】和【编写函数主体部
分】两大步骤：　
１） 定义函数接口部分：按动【Ｃｔｒｌ＋Ｆ１２】快捷键，查看【ＵｎｔＤｒａｇＦｏｒｍ】单元，在【Ｉｎｔｅｒｆａｃｅ】
部分的【Ｔｙｐｅ】段的【Ｐｕｂｌｉｃ】部分添加代码，如图４．６－４所示：　
　图
 4.6-4  添加过程的接口部分 ２） 编写函数主体部分：在【ｉｍｐｌｅｍｅｎｔａｔｉｏｎ】部分添加过程的实现部分，如图４．６－５所示：　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　91 
　图
 4.6-5  添加过程的实现部分 ★ 这段代码中用到两个Ｉｆ进行判断，第一个Ｉｆ判断鼠标左键是否按下（产生ＷＭ＿ＬＢｕｔｔｏｎＤｏｗｎ消息），
第二个Ｉｆ判断鼠标是否在窗体区域内（ＨＴＣｌｉｅｎｔ），如果这两个判断都成立，那么鼠标在窗体内
按下就把它当作在窗体的标题栏内按下（通过发送消息ＳｅｎｄＭｅｓｓａｇｅ实现），同时把Ｈａｎｄｌｅｄ变量
设为Ｔｒｅｕ，消息处理完毕，窗体不再接受ＭｏｕｓｅＤｏｗｎ及Ｃｌｉｃｋ事件。　
６、 添加消息拦截代码：双击【ｆｒｍｍａｉｎ】表单，在【Ｔｆｒｍｍａｉｎ．ＦｏｒｍＣｒｅａｔｅ】事件中添加代码，把程
序消息拦截到第５步中自定义的消息过滤处理过程中，让自定义的ＡｐｐＭｅｓｓａｇｅ过程对系统产生的
消息进行处理，如图４．６－６所示：　
　图
 4.6-6  添加消息拦截代码 ７、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存全部工程；　
８、 编译运行程序：按动【Ｆ９】快捷键，编译运行程序，完成本程序的制作　４．６．３
 完整的程序代码　【ＤｒａｇＦｏｒｍ．ｄｐｒ】　
　
ｐｒｏｇｒａｍ　ＤｒａｇＦｏｒｍ；　第４章　　　表单的使用　
　92                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＡｎｏｍａＦｏｒｍ　ｉｎ　＇．．＼不规则表单程序＼ＵｎｔＡｎｏｍａＦｏｒｍ．ｐａｓ＇　｛ｆｒｍｍａｉｎ｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（Ｔｆｒｍｍａｉｎ，　ｆｒｍｍａｉｎ）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＤｒａｇＦｏｒｍ．ｄｆｍ】　
　
ｏｂｊｅｃｔ　ｆｒｍｍａｉｎ：　Ｔｆｒｍｍａｉｎ　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２０　
　　ＢｏｒｄｅｒＩｃｏｎｓ　＝　［ｂｉＳｙｓｔｅｍＭｅｎｕ］　
　　ＢｏｒｄｅｒＳｔｙｌｅ　＝　ｂｓＳｉｎｇｌｅ　
　　Ｃａｐｔｉｏｎ　＝　＇ｆｒｍｍａｉｎ＇　
　　ＣｌｉｅｎｔＨｅｉｇｈｔ　＝　４４８　
　　ＣｌｉｅｎｔＷｉｄｔｈ　＝　６８８　
　　Ｃｏｌｏｒ　＝　ｃｌＲｅｄ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＦｏｒｍＳｔｙｌｅ　＝　ｆｓＳｔａｙＯｎＴｏｐ　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＯｎＣｒｅａｔｅ　＝　ＦｏｒｍＣｒｅａｔｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　６４　
　　　　Ｔｏｐ　＝　５６　
　　　　Ｗｉｄｔｈ　＝　７５　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　93 
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇关闭＇　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＤｒａｇＦｏｒｍ．ｐａｓ】　
　
ｕｎｉｔ　ＵｎｔＤｒａｇＦｏｒｍ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　Ｔｆｒｍｍａｉｎ　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　ｐｒｏｃｅｄｕｒｅ　ＡｐｐＭｅｓｓａｇｅ（ｖａｒ　Ｍｓｇ：ＴＭｓｇ；ｖａｒ　Ｈａｎｄｌｅｄ：Ｂｏｏｌｅａｎ）；　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　ｆｒｍｍａｉｎ：　Ｔｆｒｍｍａｉｎ；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．ＡｐｐＭｅｓｓａｇｅ（ｖａｒ　Ｍｓｇ：ＴＭｓｇ；ｖａｒ　Ｈａｎｄｌｅｄ：Ｂｏｏｌｅａｎ）；　
ｂｅｇｉｎ　第４章　　　表单的使用　
　94                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ｉｆ　Ｍｓｇ．ｍｅｓｓａｇｅ＝ＷＭ＿ＬＢｕｔｔｏｎＤｏｗｎ　ｔｈｅｎ　
　　ｂｅｇｉｎ　
　　　　ｉｆ　ＤｅｆＷｉｎｄｏｗＰｒｏｃ（Ｈａｎｄｌｅ，ＷＭ＿ＮＣＨｉｔＴｅｓｔ，０，ＧｅｔＭｅｓｓａｇｅＰｏｓ）＝ＨＴＣｌｉｅｎｔ　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　　　ＳｅｎｄＭｅｓｓａｇｅ（Ｈａｎｄｌｅ，ＷＭ＿ＮＣＬＢｕｔｔｏｎＤｏｗｎ，ＨＴＣａｐｔｉｏｎ，ＧｅｔＭｅｓｓａｇｅＰｏｓ）；　
　　　　　　Ｈａｎｄｌｅｄ：＝ｔｒｕｅ；　
　　　　ｅｎｄ；　
　　ｅｎｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．ＦｏｒｍＣｒｅａｔｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　Ｒｇｎ１：ＨＲｇｎ；　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＯｎＭｅｓｓａｇｅ：＝ＡｐｐＭｅｓｓａｇｅ；　
　　Ｒｇｎ１：＝ＣｒｅａｔｅＥｌｌｉｐｔｉｃＲｇｎ（２７，２７，１７０，１７０）；　
　　ＳｅｔＷｉｎｄｏｗＲｇｎ（Ｈａｎｄｌｅ，　Ｒｇｎ１，　Ｔｒｕｅ）；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｍａｉｎ．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　Ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｅｎｄ．　４．７
 表单实例――无表单程序设计　４．７．１ 程序描述　很多用过Ｔｕｒｂｏ　Ｐａｓｃａｌ这个ＩＤＥ环境的朋友都在想，既然Ｄｅｌｐｈｉ是从Ｐａｓｃａｌ发展起来的，那么它应
该也能兼容以前的Ｐａｓｃａｌ程序？是的，通过Ｄｅｌｐｈｉ，我们还是可以写出那些脱离表单的程序。下面介绍的
程序就是通过两种方式显示提示信息。　《电脑爱好者》精品图书 　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　95 ４．７．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　
３、 删除表单：选择菜单【Ｐｒｏｊｅｃｔ→Ｒｅｍｏｖｅ　Ｆｒｏｍ　Ｐｒｏｊｅｃｔ】，把【Ｕｎｉｔ１－Ｆｏｒｍ１】从工程中删除，这
时代码编辑框也被关闭了；　
４、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，把工程保存成【ＮｏＦｏｒｍ．ｄｐｒ】；　
５、 打开【Ｖｉｅｗ　Ｕｎｉｔ】窗口：选择菜单【Ｖｉｅｗ→Ｕｎｉｔｓ】，跳出【Ｖｉｅｗ　Ｕｎｉｔ】窗口，如图４．７－１所示：　
６、 打开工程代码：在【Ｖｉｅｗ　Ｕｎｉｔ】窗口中选择Ｐｒｏｊｅｃｔ１，按动【ＯＫ】，打开工程代码，如图４．７－２
所示：　
７、 删除表单引用：虽然我们已经删除了表单，但这里的表单引用子句仍然存在，因此必须删除掉；　
　
　　　　　　图
 4.7-1  单元查看窗口    图 4.7-2  Project1代码     ８、 修改编译指令：把编译指令【｛￥Ｒ　＊．ＲＥＳ｝】换成【｛￥ＡＰＰＴＹＰＥ　ＣＯＮＳＯＬＥ｝】，表示这里用ＣＯＮＳＯＬＥ（ＤＯＳ
控制台）方式来编译这段程序代码；　
９、 删除程序的初始化和运行语句：由于没有表单，程序无需初始化和运行，因此可以把
【　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；】、【　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；】两个语句删除掉；　
１０、编写语句：在【Ｂｅｇｉｎ】和【Ｅｎｄ】之间加入如下代码：　
　　ＭｅｓｓａｇｅＢｏｘ（０，＇Ｈｅｌｌｏ，Ｗｏｒｌｄ！＇，＇无表单程序＇，ＭＢ＿ＩＣＯＮＥＸＣＬＡＭＡＴＩＯＮ＋ＭＢ＿ＯＫ）；　
　　ＷｒｉｔｅＬｎ（＇Ｈｅｌｌｏ，Ｗｏｒｌｄ！＇）；　
　　ＷｒｉｔｅＬｎ（＇Ｐｒｅｓｓ　【Ｅｎｔｅｒ】　ｔｏ　ｃｏｎｔｉｎｕｅ．．．＇）；　
　　ＲｅａｄＬｎ；　
★ 这里语句有两种类型：第一种是调用【ＭｅｓｓａｇｅＢｏｘ（）】这个ＡＰＩ函数的类Ｗｉｎｄｏｗｓ语句，第二种
是任何熟悉Ｔｕｒｂｏ　Ｐａｓｃａｌ朋友都会倍感熟悉亲切的【ＷｒｉｔｅＬｎ】、【ＲｅａｄＬｎ】之类的纯Ｐａｓｃａｌ语句。
这里的两种语句都完成同一功能――输出【Ｈｅｌｌｏ，Ｗｏｒｌｄ！】这个提示信息。　
１１、添加引用子句：由于这里调用了【ＭｅｓｓａｇｅＢｏｘ（）】这个ＡＰＩ函数，因此必须增加包含这个ＡＰＩ函
数的单元【Ｗｉｎｄｏｗｓ】的引用；　
★ 并非所有的ＡＰＩ函数都可以在ＣＯＮＳＯＬＥ类型程序中调用，因为大部分ＡＰＩ函数只适用于Ｗｉｎｄｏｗｓ
的图形界面中。　
１２、再次保存工程：选择【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存全部工程；　
１３、编译执行程序：按动【Ｆ９】快捷键，编译执行程序，程序运行界面如图４．７－３、４．７－４所示：　第４章　　　表单的使用　
　96                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　　　图 4.7-3  程序运行界面第一步   图 4.7-4  程序界面运行第二步 ★ 无表单程序极大地缩小了程序的大小，本例中编译出来的应用程序【ＮｏＦｏｒｍ．ｅｘｅ】只有１７Ｋ，而
有表单的程序动不动就是几百Ｋ的！　
　４．７．３
 完整的程序代码　【ＮｏＦｏｒｍ．ｄｐｒ】　
　
ｐｒｏｇｒａｍ　ＮｏＦｏｒｍ；　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ；　
　
｛￥ＡＰＰＴＹＰＥ　ＣＯＮＳＯＬＥ｝　
　
ｂｅｇｉｎ　
　　ＭｅｓｓａｇｅＢｏｘ（０，＇Ｈｅｌｌｏ，Ｗｏｒｌｄ！＇，＇无表单程序＇，ＭＢ＿ＩＣＯＮＥＸＣＬＡＭＡＴＩＯＮ＋ＭＢ＿ＯＫ）；　
　　ＷｒｉｔｅＬｎ（＇Ｈｅｌｌｏ，Ｗｏｒｌｄ！＇）；　
　　ＷｒｉｔｅＬｎ（＇Ｐｒｅｓｓ　【Ｅｎｔｅｒ】　ｔｏ　ｃｏｎｔｉｎｕｅ．．．＇）；　
　　ＲｅａｄＬｎ；　
ｅｎｄ．　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　99 
　第５章
　控件的使用　◆本章内容：　
●　Ｄｅｌｐｈｉ常用控件（菜单、标签、编辑框、Ｍｅｍｏ、按钮、选项按钮、列表框、界面控件、对话
框、图形控件、定时控件等）介绍　
●　Ｄｅｌｐｈｉ常用控件应用实例　
◆本章目标：　
●　掌握Ｄｅｌｐｈｉ常用控件的属性、方法和事件　
●　理解本章的控件应用实例　
●　进一步掌握Ｄｅｌｐｈｉ系统帮助文件的应用方法　
　５．１
 菜单的使用　５．１．１ 两种菜单介绍　菜单是程序设计中最为常用的控件，完整的应用程序一般都有两种菜单：其一是主菜单（Ｍａｉｎ　Ｍｅｎｕ），
应用程序的所有功能几乎都可以通过对它的操作来实现，这种菜单一般固定地位于程序窗口的顶部；其二是
快捷菜单（Ｐｏｐｕｐ　Ｍｅｎｕ，又称弹出式菜单），一般用来罗列应用程序最为常用的几种功能，便于用户快捷地
使用这些功能，这种菜单一般没有固定的位置，而是随着鼠标位置的变化而变化（正因为如此才快捷！）。　
我们所使用的Ｄｅｌｐｈｉ　ＩＤＥ环境也有这两类菜单，如图５．１－１、５．１－２所示：　
　　　　　　　图
 5.1-1  Delphi IDE主菜单的一角  图 5.1-2  Delphi IDE表单上的快捷菜单  第５章　　　控件的使用　
　100                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　５．１．２ 菜单设计步骤　Ｄｅｌｐｈｉ提供了一个功能丰富的菜单设计器，通过这个菜单设计器，我们可以方便地设计出各类功能菜
单。　
菜单设计通常有这么几个步骤：规划菜单→添加菜单控件→在对象查看器中修改菜单属性→打开菜单
设计器，设计菜单→编写菜单代码→连接菜单（多个菜单或者快捷菜单）→完成。下面结合一个实例详细介
绍这几个步骤。　５．１．２．１
 程序描述　程序有一个主菜单、一个快捷菜单，通过菜单可以控制表单颜色。　５．１．２．２ 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ．ｐａｓ，保存工程为
ＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ．ｄｐｒ；　
４、 规划菜单：设有总菜单【Ｃｏｌｏｒ】、【Ｅｘｉｔ】，总菜单【Ｃｏｌｏｒ】下有【Ｒｅｄ】、【Ｂｌａｃｋ】、【Ｗｈｉｔｅ】、【Ｇｒｅｅｎ】
等菜单项，用于控制表单颜色，总菜单【Ｅｘｉｔ】用于关闭表单，退出程序；　
５、 添加主菜单控件：双击【Ｓｔａｎｄａｒｄ】控件页中的【ＭａｉｎＭｅｎｕ】控件，这样在【Ｆｏｒｍ１】表单上就出
现一个名为【ＭａｉｎＭｅｎｕ１】的菜单，这个控件为不可见控件；　
６、 打开菜单设计器：可以通过三种方式打开菜单设计器：○1双击【Ｆｏｒｍ１】表单上【ＭａｉｎＭｅｎｕ１】控
件，○2单击【ＭａｉｎＭｅｎｕ１】对象查看器中【Ｉｔｅｍｓ】属性右边的【…】按钮，○3用鼠标右击【ＭａｉｎＭｅｎｕ１】，在快捷菜单中选择【Ｍｅｎｕ　Ｄｅｓｉｇｎｅｒ】菜单项；如图５．１－３所示：　
　　　　　　　图
 5.1-3  菜单设计器     图 5.1-4  跳转回菜单设计器  ７、 设计菜单：在上述打开的菜单设计器中按动【Ｅｎｔｅｒ】键，光标将自动跳转到对象查看器的【Ｃａｐｔｉｏｎ】
属性中，也可直接用鼠标把光标放在对象查看器的【Ｃａｐｔｉｏｎ】属性中。在【Ｃａｐｔｉｏｎ】属性中输
入【＆Ｃｏｌｏｒ】，按动【Ｅｎｔｅｒ】键，系统将跳转回菜单设计器，同时菜单设计器上出现【Ｃｏｌｏｒ】的
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　101 
总菜单项，同时焦点下移到【Ｃｏｌｏｒ】总菜单的子菜单项上（如图５．１－４所示），继续按照上述方
法添加【Ｃｏｌｏｒ】菜单的子菜单和【Ｅｘｉｔ】菜单项，如图５．１－５所示：　
　　　　　　　图
 5.1-5  设计完成后的界面    图 5.1-6  嵌套菜单的实现 ★ 菜单中的下划线：在该字母（只限于字母）前加上【＆】号，如：【＆Ｒｅｄ】→【Ｒｅｄ】　
★ 菜单中的分组线：把该菜单项的【Ｃａｐｔｉｏｎ】属性设置为【－】号　
★ 设置菜单项的嵌套子菜单项的快捷键：【Ｃｔｒｌ＋→】，即【Ｃｔｒｌ】键＋右方向键，如图５．１－６所示：　
８、 编写代码１：在菜单设计器中双击【Ｒｅｄ】菜单项，在跳出来的代码编辑框中输入如下代码（阴影
部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
ｅｎｄ；　
９、 编写代码２：用同样方法为【Ｃｏｌｏｒ】菜单项下的其他菜单项加入代码；　
１０、编写代码３：在菜单设计器中双击【Ｅｘｉｔ】菜单项，在跳出的代码编辑框中输入如下代码（阴影部
分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
１１、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
１２、编译运行工程：按动【Ｆ９】快捷键，编译运行工程，完成。　５．１．２．３
 完整的程序代码　【ＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　第５章　　　控件的使用　
　102                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ＵｎｔＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ　ｉｎ　＇ＵｎｔＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　６９６　
　　Ｈｅｉｇｈｔ　＝　４８０　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　Ｍｅｎｕ　＝　ＭａｉｎＭｅｎｕ１　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　ＭａｉｎＭｅｎｕ１：　ＴＭａｉｎＭｅｎｕ　
　　　　Ｌｅｆｔ　＝　１６８　
　　　　Ｔｏｐ　＝　１８４　
　　　　ｏｂｊｅｃｔ　Ｃｏｌｏｒ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｃｏｌｏｒ＇　
　　　　　　ｏｂｊｅｃｔ　Ｒｅｄ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｒｅｄ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｒｅｄ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｂｌａｃｋ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｂｌａｃｋ＇　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　103 
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｂｌａｃｋ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｗｈｉｔｅ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｗｈｉｔｅ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｗｈｉｔｅ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｇｒｅｅｎ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｇｒｅｅｎ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｇｒｅｅｎ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｎ２：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇－＇　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　ＯｔｈｅｒＣｏｌｏｒｓ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｏｔｈｅｒ　Ｃｏｌｏｒｓ＇　
　　　　　　　　ｏｂｊｅｃｔ　Ｇｏｌｄｅｎ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇Ｍｅｎｕ＇　
　　　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｇｏｌｄｅｎ１Ｃｌｉｃｋ　
　　　　　　　　ｅｎｄ　
　　　　　　　　ｏｂｊｅｃｔ　Ａｑｕａ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇Ａｑｕａ＇　
　　　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ａｑｕａ１Ｃｌｉｃｋ　
　　　　　　　　ｅｎｄ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｎ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇－＇　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｆａｃｅ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｆａｃｅ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｆａｃｅ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｅｘｉｔ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇Ｅ＆ｘｉｔ＇　
　　　　　　ＯｎＣｌｉｃｋ　＝　Ｅｘｉｔ１Ｃｌｉｃｋ　
　　　　ｅｎｄ　
　　ｅｎｄ　
ｅｎｄ　第５章　　　控件的使用　
　104                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　
【ＵｎｔＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＣｈａｎｇｅＦｏｒｍＣｏｌｏｒＭｅｎｕ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　Ｍｅｎｕｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　ＭａｉｎＭｅｎｕ１：　ＴＭａｉｎＭｅｎｕ；　
　　　　Ｃｏｌｏｒ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｒｅｄ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｂｌａｃｋ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｗｈｉｔｅ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｇｒｅｅｎ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｎ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｆａｃｅ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｅｘｉｔ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｎ２：　ＴＭｅｎｕＩｔｅｍ；　
　　　　ＯｔｈｅｒＣｏｌｏｒｓ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｇｏｌｄｅｎ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ａｑｕａ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｗｈｉｔｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｇｒｅｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｇｏｌｄｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ａｑｕａ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｆａｃｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　105 
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｌａｃｋ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｗｈｉｔｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＷｈｉｔｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｇｒｅｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＧｒｅｅｎ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｇｏｌｄｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＭｅｎｕ；　
ｅｎｄ；　
　第５章　　　控件的使用　
　106                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ａｑｕａ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＡｑｕａ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｆａｃｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｔｎＦａｃｅ；　
ｅｎｄ；　
　
ｅｎｄ．　５．１．３
 菜单实例――菜单的灰度控制　５．１．３．１ 程序描述　为了使得应用程序界面更富人性化，减少一些不必要的错误，不少程序的系统菜单都有灰度功能，
Ｄｅｌｐｈｉ　ＩＤＥ也有这个功能，如图５．１－７所示：　
　　　　　　图
 5.1-7  Delphi IDE灰度菜单    图 5.1-8  删除菜单项 ５．１．２节【修改表单颜色的菜单】中，如果表单已经是红色的，那么【Ｒｅｄ】菜单项就应该是灰度的了，
这样才更符合逻辑。本例实现：用户单击【Ｒｅｄ】菜单项，表单变成红色，同时【Ｒｅｄ】菜单项灰度，【Ｂｌａｃｋ】
菜单非灰度；用户单击【Ｂｌａｃｋ】菜单项，表单变成黑色，同时【Ｂｌａｃｋ】菜单项灰度，【Ｒｅｄ】菜单非灰度。　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　107 ５．１．３．２
 设计详细步骤　１、 打开５．１．２节【修改表单颜色的菜单】程序；　
２、 另存工程：另存单元为ＵｎｔＣｏｎｔｒｏｌＭｅｎｕ．ｐａｓ，保存工程为ＣｏｎｔｒｏｌＭｅｎｕ．ｄｐｒ；　　
３、 修改菜单：打开【ＭａｉｎＭｅｎｕ１】的菜单设计器，删除（在欲删除菜单项上右击，在快捷菜单中选择
【Ｄｅｌｅｔｅ】，如图５．１－８所示：）【Ｃｏｌｏｒ】菜单项下的所有菜单，保留【Ｒｅｄ】和【Ｂｌａｃｋ】两项；　
４、 添加【Ｒｅｄ】菜单项代码：双击【Ｒｅｄ】菜单项，添加如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
　　Ｒｅｄ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　Ｂｌａｃｋ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
★ 【Ｒｅｄ】菜单项的【Ｎａｍｅ】属性为【Ｒｅｄ１】，可以从对象查看器中获知　
５、 添加【Ｂｌａｃｋ】菜单项代码：双击【Ｂｌａｃｋ】菜单项，添加如下代码：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｌａｃｋ；　
　　Ｂｌａｃｋ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　Ｒｅｄ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
６、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
７、 编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图５．１－９所示：　　
　图
 5.1-9  程序运行界面图 ５．１．３．３ 完整的程序代码　【ＣｏｎｔｒｏｌＭｅｎｕ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＣｏｎｔｒｏｌＭｅｎｕ；　第５章　　　控件的使用　
　108                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＣｏｎｔｒｏｌＭｅｎｕ　ｉｎ　＇ＵｎｔＣｏｎｔｒｏｌＭｅｎｕ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＣｏｎｔｒｏｌＭｅｎｕ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　６９６　
　　Ｈｅｉｇｈｔ　＝　４８０　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　Ｍｅｎｕ　＝　ＭａｉｎＭｅｎｕ１　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　ＭａｉｎＭｅｎｕ１：　ＴＭａｉｎＭｅｎｕ　
　　　　Ｌｅｆｔ　＝　１６８　
　　　　Ｔｏｐ　＝　１８４　
　　　　ｏｂｊｅｃｔ　Ｃｏｌｏｒ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｃｏｌｏｒ＇　
　　　　　　ｏｂｊｅｃｔ　Ｒｅｄ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｒｅｄ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｒｅｄ１Ｃｌｉｃｋ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　109 
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｂｌａｃｋ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｂｌａｃｋ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｂｌａｃｋ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｅｘｉｔ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇Ｅ＆ｘｉｔ＇　
　　　　　　ＯｎＣｌｉｃｋ　＝　Ｅｘｉｔ１Ｃｌｉｃｋ　
　　　　ｅｎｄ　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＣｏｎｔｒｏｌＭｅｎｕ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＣｏｎｔｒｏｌＭｅｎｕ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　Ｍｅｎｕｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　ＭａｉｎＭｅｎｕ１：　ＴＭａｉｎＭｅｎｕ；　
　　　　Ｃｏｌｏｒ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｒｅｄ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｂｌａｃｋ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｅｘｉｔ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｗｈｉｔｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｇｒｅｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｇｏｌｄｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ａｑｕａ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｆａｃｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　第５章　　　控件的使用　
　110                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
　　Ｒｅｄ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　Ｂｌａｃｋ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｌａｃｋ；　
　　Ｂｌａｃｋ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　Ｒｅｄ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｗｈｉｔｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＷｈｉｔｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｇｒｅｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　111 
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＧｒｅｅｎ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｇｏｌｄｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＭｅｎｕ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ａｑｕａ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＡｑｕａ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｆａｃｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｔｎＦａｃｅ；　
ｅｎｄ；　
　
ｅｎｄ．　
　５．１．４
 菜单实例――双语菜单　５．１．４．１ 程序描述　很多优秀的程序员时刻准备着冲出国门，同时又不能忘本。怎么办，能不能做个菜单，老外也看得懂，
国人看着又不费力？　
这里我们就来尝试尝试“双语菜单”的制作：在程序主菜单中增加一个【Ｌａｎｇｕａｇｅ】菜单项以选择程
序菜单语言，选择【Ｃｈｉｎｅｓｅ】时，显示中文菜单，隐藏Ｅ文菜单；选择【Ｅｎｇｌｉｓｈ】时，显示Ｅ文菜单，隐
藏中文菜单。　第５章　　　控件的使用　
　112                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　５．１．４．２ 设计详细步骤　１、 打开５．１．３节【菜单的灰度控制】程序；　
２、 另存工程：另存单元为ＵｎｔＬａｎｇｕａｇｅＭｅｎｕ．ｐａｓ，保存工程为ＬａｎｇｕａｇｅＭｅｎｕ．ｄｐｒ；　　
３、 修改菜单：打开【ＭａｉｎＭｅｎｕ１】的菜单设计器，增加与【Ｃｏｌｏｒ】对应的【颜色】菜单项，其下的
菜单项也一一对应，增加与【Ｅｘｉｔ】对应的【退出】菜单项。增加【Ｌａｎｇｕａｇｅ】菜单，其下增加
【Ｃｈｉｎｅｓｅ】、【Ｅｎｇｌｉｓｈ】两个子菜单项；　
４、 设置菜单项属性：在菜单设计器中，选中【颜色】菜单项（该菜单项的【Ｎａｍｅ】属性为【Ｃ１】），
在【Ｃ１】的对象查看器中设置【Ｖｉｓｉｂｌｅ】属性为【ｆａｌｓｅ】；选中【退出】菜单项（该菜单项的【Ｎａｍｅ】
属性为【Ｎ１】），在【Ｎ１】的对象查看器中设置【Ｖｉｓｉｂｌｅ】属性为【ｆａｌｓｅ】；　
５、 添加【Ｃｈｉｎｅｓｅ】菜单项代码：双击【Ｃｈｉｎｅｓｅ】菜单项，添加如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｃｈｉｎｅｓｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
｛关闭Ｅ文菜单｝　
　　ｃｏｌｏｒ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
　　ｅｘｉｔ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
｛显示中文菜单｝　
　　ｃ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
　　ｎ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
｛控制【Ｌａｎｇｕａｇｅ】子菜单项的灰度｝　
　　ｃｈｉｎｅｓｅ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　ｅｎｇｌｉｓｈ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
★ ｛｝部分为说明，可以不输入　
　
６、 添加【Ｅｎｇｌｉｓｈ】菜单项代码：双击【Ｅｎｇｌｉｓｈ】菜单项，添加如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｎｇｌｉｓｈ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
｛关闭中文菜单｝　
　　ｃ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
　　ｎ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
｛显示Ｅ文菜单｝　
　　ｃｏｌｏｒ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
　　ｅｘｉｔ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
｛控制【Ｌａｎｇｕａｇｅ】子菜单项的灰度｝　
　　ｅｎｇｌｉｓｈ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　ｃｈｉｎｅｓｅ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　113 
７、 连接重用代码：在菜单设计器中选择【红色】菜单项，按【Ｆ１１】跳转到【Ｒ１】（【红色】菜单项
的名字为【Ｒ１】）的对象查看器，选择【Ｅｖｅｎｔｓ】页，下拉【ＯｎＣｌｉｃｋ】事件右边的下拉框，选择
其中的【Ｒｅｄ１Ｃｌｉｃｋ】（【Ｒｅｄ】菜单项的名字为【Ｒｅｄ１】）事件代码（如图５．１－１０所示），这样【红
色】菜单项就可以连接重用【Ｒｅｄ】菜单项的代码了。用同样方法连接【黑色】和【Ｂｌａｃｋ】、【退
出】和【Ｅｘｉｔ】；　
　图
 5.1-10  连接代码 ８、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
９、 编译运行工程：按动【Ｆ９】快捷键，编译运行工程，完成。　　
　
★ 思考：如果在Ｅ文的Ｗｉｎｄｏｗｓ平台中，这种伎俩行不行？（这时候中文字体就显示不了了，要自
带中文字库的，挺麻烦的！）　
★ 思考：如何记忆菜单语言状况？本程序每次打开都是先Ｅ文菜单，能不能让程序记忆用户选择的
菜单？（可以用注册表或者ＩＮＩ文件等形式来记录用户的选择）　５．１．４．３
 完整的程序代码　【ＬａｎｇｕａｇｅＭｅｎｕ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＬａｎｇｕａｇｅＭｅｎｕ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＬａｎｇｕａｇｅＭｅｎｕ　ｉｎ　＇ＵｎｔＬａｎｇｕａｇｅＭｅｎｕ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　第５章　　　控件的使用　
　114                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＬａｎｇｕａｇｅＭｅｎｕ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　６９６　
　　Ｈｅｉｇｈｔ　＝　４８０　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　Ｍｅｎｕ　＝　ＭａｉｎＭｅｎｕ１　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　ＭａｉｎＭｅｎｕ１：　ＴＭａｉｎＭｅｎｕ　
　　　　Ｌｅｆｔ　＝　１６８　
　　　　Ｔｏｐ　＝　１８４　
　　　　ｏｂｊｅｃｔ　Ｃｏｌｏｒ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｃｏｌｏｒ＇　
　　　　　　ｏｂｊｅｃｔ　Ｒｅｄ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｒｅｄ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｒｅｄ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｂｌａｃｋ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｂｌａｃｋ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｂｌａｃｋ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｅｘｉｔ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇Ｅ＆ｘｉｔ＇　
　　　　　　ＯｎＣｌｉｃｋ　＝　Ｅｘｉｔ１Ｃｌｉｃｋ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　115 
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｃ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇颜色（＆Ｃ）＇　
　　　　　　Ｖｉｓｉｂｌｅ　＝　Ｆａｌｓｅ　
　　　　　　ｏｂｊｅｃｔ　Ｒ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇红色（＆Ｒ）＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｒｅｄ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｂ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇黑色（＆Ｂ）＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｂｌａｃｋ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｎ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇退出（＆Ｘ）＇　
　　　　　　Ｖｉｓｉｂｌｅ　＝　Ｆａｌｓｅ　
　　　　　　ＯｎＣｌｉｃｋ　＝　Ｅｘｉｔ１Ｃｌｉｃｋ　
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｌａｎｇｕａｇｅ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｌａｎｇｕａｇｅ＇　
　　　　　　ｏｂｊｅｃｔ　Ｃｈｉｎｅｓｅ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇Ｃ＆ｈｉｎｅｓｅ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｃｈｉｎｅｓｅ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　　　ｏｂｊｅｃｔ　Ｅｎｇｌｉｓｈ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｅｎｇｌｉｓｈ＇　
　　　　　　　　ＯｎＣｌｉｃｋ　＝　Ｅｎｇｌｉｓｈ１Ｃｌｉｃｋ　
　　　　　　ｅｎｄ　
　　　　ｅｎｄ　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＬａｎｇｕａｇｅＭｅｎｕ．ｐａｓ】　
　
ｕｎｉｔ　ＵｎｔＬａｎｇｕａｇｅＭｅｎｕ；　
　
ｉｎｔｅｒｆａｃｅ　
　第５章　　　控件的使用　
　116                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　Ｍｅｎｕｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　ＭａｉｎＭｅｎｕ１：　ＴＭａｉｎＭｅｎｕ；　
　　　　Ｃｏｌｏｒ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｒｅｄ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｂｌａｃｋ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｅｘｉｔ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｃ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｒ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｂ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｎ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｌａｎｇｕａｇｅ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｃｈｉｎｅｓｅ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｅｎｇｌｉｓｈ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｗｈｉｔｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｇｒｅｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｇｏｌｄｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ａｑｕａ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｆａｃｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｃｈｉｎｅｓｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｅｎｇｌｉｓｈ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　117 
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｒｅｄ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
　　Ｒｅｄ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　Ｂｌａｃｋ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｘｉｔ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｌａｃｋ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｌａｃｋ；　
　　Ｂｌａｃｋ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　Ｒｅｄ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｗｈｉｔｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＷｈｉｔｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｇｒｅｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＧｒｅｅｎ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｇｏｌｄｅｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＭｅｎｕ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ａｑｕａ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　第５章　　　控件的使用　
　118                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＡｑｕａ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｆａｃｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｔｎＦａｃｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｃｈｉｎｅｓｅ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
｛关闭Ｅ文菜单｝　
　　ｃｏｌｏｒ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
　　ｅｘｉｔ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
｛显示中文菜单｝　
　　ｃ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
　　ｎ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
｛控制【Ｌａｎｇｕａｇｅ】子菜单项的灰度｝　
　　ｃｈｉｎｅｓｅ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　ｅｎｇｌｉｓｈ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｎｇｌｉｓｈ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
｛关闭中文菜单｝　
　　ｃ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
　　ｎ１．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
｛显示Ｅ文菜单｝　
　　ｃｏｌｏｒ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
　　ｅｘｉｔ１．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
｛控制【Ｌａｎｇｕａｇｅ】子菜单项的灰度｝　
　　ｅｎｇｌｉｓｈ１．Ｅｎａｂｌｅｄ：＝ｆａｌｓｅ；　
　　ｃｈｉｎｅｓｅ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｅｎｄ．　
　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　119 ５．１．４．４
 程序在光盘中的位置　以上程序在光盘中的位置为：【示例程序＼５．１．４－双语菜单】　　５．１．５ 菜单实例――图形化菜单　５．１．５．１ 程序描述　到目前为止我们所做的几个例子程序的菜单从外观上来讲还是很粗糙的，到底缺少了什么？对了，少
了菜单的图标。　
这里我们选用图形化的快捷菜单来介绍：快捷菜单上有【红色】、【蓝色】两个菜单项，分别用来使表
单变成红色或者蓝色。　５．１．５．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＢｍｐＭｅｎｕ．ｐａｓ，保存工程为ＢｍｐＭｅｎｕ．ｄｐｒ；　　
４、 放置控件：在表单上放置一个【ＰｏｐｕｐＭｅｎｕ】控件，名为【ＰｏｐｕｐＭｅｎｕ１】；　
５、 进入菜单设计器，设计菜单：进入菜单设计器，双击【ＰｏｐＭｅｎｕ１】，给菜单添加两个菜单项【红色】、
【蓝色】；　
６、 添加菜单项图形：在菜单设计器中，选择【红色】菜单项，按【Ｆ１１】，跳转到对象查看器，点击
【Ｂｉｔｍａｐ】属性右边【…】，跳出【Ｐｉｃｔｕｒｅ　Ｅｄｉｔｏｒ】窗口（如图５．１－１１所示），按动【Ｌｏａｄ】按
钮，为【红色】菜单项添加图形。同样为【蓝色】菜单项添加图形；　
　　　　图
 5.1-11  图形编辑器窗口     图 5.1-12  运行界面图 ★ 这里添加的图形格式只能是＊．ｂｍｐ格式，这里还可以使用【ＩｍａｇｅＬｉｓｔ】控件，该控件支持＊．ｂｍｐ、
＊．ｉｃｏ等格式，留待后面予以介绍。　第５章　　　控件的使用　
　120                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　
７、 添加菜单项代码１：双击【红色】菜单项，进入代码编辑框，输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
ｅｎｄ；　
８、 添加菜单项代码１：双击【红色】菜单项，进入代码编辑框，输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｌｕｅ；　
ｅｎｄ；　
９、 把快捷菜单连接到表单上：选择表单，按动【Ｆ１１】，跳转到【Ｆｏｒｍ１】的对象查看器上，用鼠标单
击下拉【ＰｏｐｕｐＭｅｎｕ】属性右边的下拉框，选择【ＰｏｐｕｐＭｅｎｕ１】，完成快捷菜单与表单的连接；　
１０、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
１１、编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图５．１－１２所示：　　５．１．５．３
 完整的程序代码　【ＢｍｐＭｅｎｕ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＢｍｐＭｅｎｕ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＢｍｐＭｅｎｕ　ｉｎ　＇ＵｎｔＢｍｐＭｅｎｕ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＢｍｐＭｅｎｕ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　６９６　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　121 
　　Ｈｅｉｇｈｔ　＝　４８０　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｏｐｕｐＭｅｎｕ　＝　ＰｏｐｕｐＭｅｎｕ１　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　ＰｏｐｕｐＭｅｎｕ１：　ＴＰｏｐｕｐＭｅｎｕ　
　　　　Ｌｅｆｔ　＝　３２８　
　　　　Ｔｏｐ　＝　２０８　
　　　　ｏｂｊｅｃｔ　Ｎ１：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｂｉｔｍａｐ．Ｄａｔａ　＝　｛×××｝　　／／【×××】表示位图文件内容，从略　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇红色＇　
　　　　　　ＯｎＣｌｉｃｋ　＝　Ｎ１Ｃｌｉｃｋ　
　　　　ｅｎｄ　
　　　　ｏｂｊｅｃｔ　Ｎ２：　ＴＭｅｎｕＩｔｅｍ　
　　　　　　Ｂｉｔｍａｐ．Ｄａｔａ　＝　｛×××｝　　／／【×××】表示位图文件内容，从略　
　　　　　　Ｃａｐｔｉｏｎ　＝　＇蓝色＇　
　　　　　　ＯｎＣｌｉｃｋ　＝　Ｎ２Ｃｌｉｃｋ　
　　　　ｅｎｄ　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＢｍｐＭｅｎｕ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＢｍｐＭｅｎｕ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　Ｍｅｎｕｓ；　
　
ｔｙｐｅ　第５章　　　控件的使用　
　122                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　ＰｏｐｕｐＭｅｎｕ１：　ＴＰｏｐｕｐＭｅｎｕ；　
　　　　Ｎ１：　ＴＭｅｎｕＩｔｅｍ；　
　　　　Ｎ２：　ＴＭｅｎｕＩｔｅｍ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＲｅｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．Ｃｏｌｏｒ：＝ｃｌＢｌｕｅ；　
ｅｎｄ；　
　
ｅｎｄ．　
　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　123 ５．２
 标签的使用　５．２．１ 标签介绍　标签（Ｌａｂｅｌ）一般放在其他控件旁边，用来标记这些控件，从而对用户的操作进行提示，也可以用来
显示其它信息。　５．２．２
 带快捷键标签　５．２．２．１ 程序描述　下面程序介绍带快捷键标签程序设计的步骤：在一个表单上放置三个标签，三个编辑框，其中一个标
签设置了快捷键，光标很快就会进入该控件。　５．２．２．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＦａｓｔＬａｂｅｌ．ｐａｓ，保存工程为
ＦａｓｔＬａｂｅｌ．ｄｐｒ；　　
４、 在表单上放置控件：在表单上放置三个标签，三个编辑框，设置三个标签的【Ｃａｐｔｉｏｎ】属性分别
为：【Ｎｏ】、【Ｎａｍｅ】、【＆Ｍａｒｋ】，控件在表单上布置如图所示：　
　　　　　图
 5.2-1  界面布置图    图 5.2-2  设置【Tab Order】   图 5.2-3  运行界面图 ５、 设置编辑框的【Ｔａｂ　Ｏｒｄｅｒ】：所谓【Ｔａｂ　Ｏｒｄｅｒ】是指程序运行时用户按动【Ｔａｂ】键，光标跳转第５章　　　控件的使用　
　124                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　的顺序。在【Ｆｏｒｍ１】上右击，在快捷菜单中选择【Ｔａｂ　Ｏｒｄｅｒ】，跳出【Ｅｄｉｔ　Ｔａｂ　Ｏｒｄｅｒ】窗口，
按照Ｅｄｉｔ１→Ｅｄｉｔ２→Ｅｄｉｔ３的顺序设置好，如图５．２－２所示：　
６、 设置Ｌａｂｅｌ的快捷键：选中【Ｃａｐｔｉｏｎ】为【Ｍａｒｋ】的Ｌａｂｅｌ，按【Ｆ１１】跳转到对象查看器中，把
【ＦｏｃｕｓＣｏｎｔｒｏｌ】属性设置为【Ｅｄｉｔ３】，也就是把【Ｌａｂｅｌ３】的快捷键连接到【Ｅｄｉｔ３】；　
７、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
８、 编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图５．２－３所示：　　５．２．２．３
 完整的程序代码　【ＦａｓｔＬａｂｅｌ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＦａｓｔＬａｂｅｌ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＦａｓｔＬａｂｅｌ　ｉｎ　＇ＵｎｔＦａｓｔＬａｂｅｌ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＦａｓｔＬａｂｅｌ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　２５８　
　　Ｈｅｉｇｈｔ　＝　２２８　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　125 
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ１：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　２４　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　１８　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　Ｃａｐｔｉｏｎ　＝　＇Ｎｏ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ２：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　２４　
　　　　Ｔｏｐ　＝　８３　
　　　　Ｗｉｄｔｈ　＝　３７　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　Ｃａｐｔｉｏｎ　＝　＇Ｎａｍｅ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ３：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　２４　
　　　　Ｔｏｐ　＝　１３１　
　　　　Ｗｉｄｔｈ　＝　３０　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　Ｃａｐｔｉｏｎ　＝　＇＆Ｍａｒｋ＇　
　　　　ＦｏｃｕｓＣｏｎｔｒｏｌ　＝　Ｅｄｉｔ３　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ１：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　８８　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　１２１　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　Ｔｅｘｔ　＝　＇Ｅｄｉｔ１＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ２：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　８８　
　　　　Ｔｏｐ　＝　８０　
　　　　Ｗｉｄｔｈ　＝　１２１　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　１　第５章　　　控件的使用　
　126                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　Ｔｅｘｔ　＝　＇Ｅｄｉｔ２＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ３：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　８８　
　　　　Ｔｏｐ　＝　１２８　
　　　　Ｗｉｄｔｈ　＝　１２１　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　２　
　　　　Ｔｅｘｔ　＝　＇Ｅｄｉｔ３＇　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＦａｓｔＬａｂｅｌ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＦａｓｔＬａｂｅｌ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｌａｂｅｌ１：　ＴＬａｂｅｌ；　
　　　　Ｌａｂｅｌ２：　ＴＬａｂｅｌ；　
　　　　Ｌａｂｅｌ３：　ＴＬａｂｅｌ；　
　　　　Ｅｄｉｔ１：　ＴＥｄｉｔ；　
　　　　Ｅｄｉｔ２：　ＴＥｄｉｔ；　
　　　　Ｅｄｉｔ３：　ＴＥｄｉｔ；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　127 
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｅｎｄ．　５．２．３
 标签实例――动态标签　５．２．３．１ 程序描述　上过网的人一定知道网络上那些连接了的小标志（热点，ｈｏｔｓｐｏｔ），当鼠标停留在上面时，鼠标就变成
手形，同时标志也会变成另外一种颜色，具有动感效果，我们称之为“动感标签”。这种标签在Ｗｉｎｄｏｗｓ类
型的帮助文件中也是很常见的。　５．２．３．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为Ｕｎｔｄｇｔｂ．ｐａｓ，保存工程为ｐｒｊｄｇｔｂ．ｄｐｒ；　
４、 添加标签控件：在表单上放置ｌａｂｌｅ１１和ｌａｂｅｌ２，分别取名（修改其【Ｎａｍｅ】属性）为【ｌｂｌｆｒｏｎｔ】、
【ｌｂｌｂａｃｋ】；　
５、 设置标签颜色属性：设【ｌｂｌｂａｃｋ．ｆｏｎｔ．ｃｏｌｏｒ】（即【ｌｂｌｂａｃｋ】标签的【Ｆｏｎｔ】属性下的子属性，
下同）为黄色（双击【ｌｂｌｂａｃｋ．ｆｏｎｔ．ｃｏｌｏｒ】右边的空格处，跳出调色板，即可选择您所喜欢的
颜色，但注意【ｌｂｌｂａｃｋ．ｆｏｎｔ．ｃｏｌｏｒ】与【ｌｂｌｆｒｏｎｔ．ｆｏｎｔ．ｃｏｌｏｒ】不要相同）；设
【ｌｂｌｆｒｏｎｔ．ｆｏｎｔ．ｃｏｌｏｒ】为黑色；　
６、 设置标签是否可见属性：设【ｌｂｌｂａｃｋ．ｖｉｓｉｂｌｅ】为【ｆａｌｓｅ】，使【ｌｂｌｂａｃｋ】不可见；　
７、 设置标签是否透明属性：设【ｌｂｌｆｒｏｎｔ．ｔｒａｎｓｐａｒａｎｔ】为【ｔｒｕｅ】，使【ｌｂｌｆｒｏｎｔ】透明；　
８、 设置标签鼠标：设【ｌｂｌｆｒｏｎｔ．ｃｕｒｓｏｒ】为【ｃｒｈａｎｇｐｏｉｎｔ】，使【ｌｂｌｆｒｏｎｔ】的鼠标为手形；　
９、 设置标签位置：选中【ｌｂｌｆｒｏｎｔ】，右击该标签，在快捷菜单中选择【Ｂｒｉｎｇ　ｔｏ　Ｆｒｏｎｔ】，保证
【ｌｂｌｆｒｏｎｔ】置于【ｌｂｌｂａｃｋ】之前；　
１０、调整标签位置：移动【ｌｂｌｆｒｏｎｔ】和【ｌｂｌｂａｃｋ】，使二者交叉重叠；　
★ 当您觉得用鼠标移动无法达到满意效果时，可用ｃｔｒｌ＋方向键来微调　
１１、添加代码１：选择【ｌｂｌｆｒｏｎｔ】的【Ｅｖｅｎｔｓ】页，双击【ＯｎｍＭｕｓｅＭｏｖｅ】事件右边空白处，跳出单第５章　　　控件的使用　
　128                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　元编辑器，加入如下语句（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＭｏｕｓｅＭｏｖｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　
　　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
｛即当鼠标出现在ｌｂｌｆｒｏｎｔ上方时，ｌｂｌｂａｃｋ就显示出来，形成动感效果｝　
　　ｌｂｌｂａｃｋ．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
ｅｎｄ；　
１２、添加代码２：选择【ｆｒｍｄｇｂｚ】的【Ｅｖｅｎｔｓ】页，双击【ＯｎＭｏｕｓｅＭｏｖｅ】事件右边空白处，跳出单元
编辑器，加入如下语句（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ＦｏｒｍＭｏｕｓｅＭｏｖｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　
　　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
｛当鼠标离开ｌｂｌｆｒｏｎｔ时，ｌｂｌｂａｃｋ就消隐｝　
　　ｌｂｌｂａｃｋ．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
ｅｎｄ；　
　
１３、添加代码３：选择【ｌｂｌｆｒｏｎｔ】的【Ｅｖｅｎｔｓ】页，双击【ＯｎＭｏｕｓｅＤｏｗｎ】事件右边空白处，跳出单
元编辑器，加入如下语句（阴影部分）：　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＭｏｕｓｅＤｏｗｎ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｂｕｔｔｏｎ：　ＴＭｏｕｓｅＢｕｔｔｏｎ；　
　　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
｛当鼠标按下时，ｌｂｌｆｒｏｎｔ和ｌｂｌｂａｃｋ同时向右下方移动，形成动感｝　
　　　ｌｂｌｂａｃｋ．ｌｅｆｔ：＝ｌｂｌｂａｃｋ．ｌｅｆｔ＋８；　
　　　ｌｂｌｂａｃｋ．ｔｏｐ：＝ｌｂｌｂａｃｋ．ｔｏｐ＋８；　
　　　ｌｂｌｆｒｏｎｔ．ｌｅｆｔ：＝ｌｂｌｆｒｏｎｔ．ｌｅｆｔ＋８；　
　　　ｌｂｌｆｒｏｎｔ．ｔｏｐ：＝ｌｂｌｆｒｏｎｔ．ｔｏｐ＋８；　
ｅｎｄ；　
　
１４、加入代码４：选择【ｌｂｌｆｒｏｎｔ】的【Ｅｖｅｎｔｓ】页，双击【ＯｎＭｏｕｓｅＵｐ】事件右边空白处，跳出单元
编辑器，加入如下语句（阴影部分）：　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＭｏｕｓｅＵｐ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｂｕｔｔｏｎ：　ＴＭｏｕｓｅＢｕｔｔｏｎ；　
　　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
｛当鼠标放开时，标签向左上方移动，恢复ｌｂｌｆｒｏｎｔ和ｌｂｌｂａｃｋ的位置｝　
　　　ｌｂｌｂａｃｋ．ｌｅｆｔ：＝ｌｂｌｂａｃｋ．ｌｅｆｔ－８；　
　　　ｌｂｌｂａｃｋ．ｔｏｐ：＝ｌｂｌｂａｃｋ．ｔｏｐ－８；　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　129 
　　　ｌｂｌｆｒｏｎｔ．ｌｅｆｔ：＝ｌｂｌｆｒｏｎｔ．ｌｅｆｔ－８；　
　　　ｌｂｌｆｒｏｎｔ．ｔｏｐ：＝ｌｂｌｆｒｏｎｔ．ｔｏｐ－８；　
ｅｎｄ；　
　
１５、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　
１６、编译运行工程：按动【Ｆ９】快捷键，编译运行工程，完成。　５．２．３．３
 完整的程序代码　【ｐｒｊｄｇｔｂ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ｐｒｊｄｇｔｂ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ｕｎｔｄｔｂｚ　ｉｎ　＇ｕｎｔｄｔｂｚ．ｐａｓ＇　｛ｆｒｍｄｔｂｚ｝，　
　　ｕｎｔｆｏｒｍ１　ｉｎ　＇ｕｎｔｆｏｒｍ１．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（Ｔｆｒｍｄｔｂｚ，　ｆｒｍｄｔｂｚ）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ｕｎｔｄｔｂｚ．ｄｆｍ】　
ｏｂｊｅｃｔ　ｆｒｍｄｔｂｚ：　Ｔｆｒｍｄｔｂｚ　
　　Ｌｅｆｔ　＝　２０１　
　　Ｔｏｐ　＝　１１３　
　　Ｗｉｄｔｈ　＝　４７９　
　　Ｈｅｉｇｈｔ　＝　２９２　
　　Ｃａｐｔｉｏｎ　＝　＇ｆｒｍｄｔｂｚ＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１４　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　第５章　　　控件的使用　
　130                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｔｒｕｅ　
　　ＯｎＭｏｕｓｅＭｏｖｅ　＝　ＦｏｒｍＭｏｕｓｅＭｏｖｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　ｌｂｌｂａｃｋ：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　９８　
　　　　Ｔｏｐ　＝　６９　
　　　　Ｗｉｄｔｈ　＝　１８８　
　　　　Ｈｅｉｇｈｔ　＝　４０　
　　　　Ｃａｐｔｉｏｎ　＝　＇上午的问好．．．＇　
　　　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＹｅｌｌｏｗ　
　　　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－３３　
　　　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［ｆｓＢｏｌｄ］　
　　　　ＰａｒｅｎｔＦｏｎｔ　＝　Ｆａｌｓｅ　
　　　　Ｖｉｓｉｂｌｅ　＝　Ｆａｌｓｅ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ｌｂｌｆｒｏｎｔ：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　９６　
　　　　Ｔｏｐ　＝　６８　
　　　　Ｗｉｄｔｈ　＝　１８８　
　　　　Ｈｅｉｇｈｔ　＝　４０　
　　　　Ｃｕｒｓｏｒ　＝　ｃｒＨａｎｄＰｏｉｎｔ　
　　　　Ｃａｐｔｉｏｎ　＝　＇上午的问好．．．＇　
　　　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－３３　
　　　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［ｆｓＢｏｌｄ］　
　　　　ＰａｒｅｎｔＦｏｎｔ　＝　Ｆａｌｓｅ　
　　　　Ｔｒａｎｓｐａｒｅｎｔ　＝　Ｔｒｕｅ　
　　　　ＯｎＣｌｉｃｋ　＝　ｌｂｌｆｒｏｎｔＣｌｉｃｋ　
　　　　ＯｎＭｏｕｓｅＤｏｗｎ　＝　ｌｂｌｆｒｏｎｔＭｏｕｓｅＤｏｗｎ　
　　　　ＯｎＭｏｕｓｅＭｏｖｅ　＝　ｌｂｌｆｒｏｎｔＭｏｕｓｅＭｏｖｅ　
　　　　ＯｎＭｏｕｓｅＵｐ　＝　ｌｂｌｆｒｏｎｔＭｏｕｓｅＵｐ　
　　ｅｎｄ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　131 
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　２６６　
　　　　Ｔｏｐ　＝　１８７　
　　　　Ｗｉｄｔｈ　＝　９２　
　　　　Ｈｅｉｇｈｔ　＝　３１　
　　　　Ｃａｐｔｉｏｎ　＝　＇ｃｌｏｓｅ＇　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
【ｕｎｔｄｔｂｚ．ｐａｓ】　
ｕｎｉｔ　ｕｎｔｄｔｂｚ；　
ｉｎｔｅｒｆａｃｅ　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
ｔｙｐｅ　
　　Ｔｆｒｍｄｔｂｚ　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　ｌｂｌｂａｃｋ：　ＴＬａｂｅｌ；　
　　　　ｌｂｌｆｒｏｎｔ：　ＴＬａｂｅｌ；　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　ｌｂｌｆｒｏｎｔＭｏｕｓｅＭｏｖｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　
　　　　　　Ｙ：　Ｉｎｔｅｇｅｒ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｏｒｍＭｏｕｓｅＭｏｖｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　
　　　　　　Ｙ：　Ｉｎｔｅｇｅｒ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　ｌｂｌｆｒｏｎｔＭｏｕｓｅＤｏｗｎ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｂｕｔｔｏｎ：　ＴＭｏｕｓｅＢｕｔｔｏｎ；　
　　　　　　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　ｌｂｌｆｒｏｎｔＭｏｕｓｅＵｐ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｂｕｔｔｏｎ：　ＴＭｏｕｓｅＢｕｔｔｏｎ；　
　　　　　　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　ｌｂｌｆｒｏｎｔＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　第５章　　　控件的使用　
　132                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　ｖａｒ　
　　ｆｒｍｄｔｂｚ：　Ｔｆｒｍｄｔｂｚ；　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
ｕｓｅｓ　ｕｎｔｆｏｒｍ１；　
｛￥Ｒ　＊．ＤＦＭ｝　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＭｏｕｓｅＭｏｖｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　
　　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
　　ｌｂｌｂａｃｋ．Ｖｉｓｉｂｌｅ：＝ｔｒｕｅ；　
ｅｎｄ；　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ＦｏｒｍＭｏｕｓｅＭｏｖｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　
　　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
　　ｌｂｌｂａｃｋ．Ｖｉｓｉｂｌｅ：＝ｆａｌｓｅ；　
ｅｎｄ；　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＭｏｕｓｅＤｏｗｎ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｂｕｔｔｏｎ：　ＴＭｏｕｓｅＢｕｔｔｏｎ；　
　　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
　　　ｌｂｌｂａｃｋ．ｌｅｆｔ：＝ｌｂｌｂａｃｋ．ｌｅｆｔ＋８；　
　　　ｌｂｌｂａｃｋ．ｔｏｐ：＝ｌｂｌｂａｃｋ．ｔｏｐ＋８；　
　　　ｌｂｌｆｒｏｎｔ．ｌｅｆｔ：＝ｌｂｌｆｒｏｎｔ．ｌｅｆｔ＋８；　
　　　ｌｂｌｆｒｏｎｔ．ｔｏｐ：＝ｌｂｌｆｒｏｎｔ．ｔｏｐ＋８；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＭｏｕｓｅＵｐ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ；　Ｂｕｔｔｏｎ：　ＴＭｏｕｓｅＢｕｔｔｏｎ；　
　　Ｓｈｉｆｔ：　ＴＳｈｉｆｔＳｔａｔｅ；　Ｘ，　Ｙ：　Ｉｎｔｅｇｅｒ）；　
ｂｅｇｉｎ　
　　　ｌｂｌｂａｃｋ．ｌｅｆｔ：＝ｌｂｌｂａｃｋ．ｌｅｆｔ－８；　
　　　ｌｂｌｂａｃｋ．ｔｏｐ：＝ｌｂｌｂａｃｋ．ｔｏｐ－８；　
　　　ｌｂｌｆｒｏｎｔ．ｌｅｆｔ：＝ｌｂｌｆｒｏｎｔ．ｌｅｆｔ－８；　
　　　ｌｂｌｆｒｏｎｔ．ｔｏｐ：＝ｌｂｌｆｒｏｎｔ．ｔｏｐ－８；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．ｌｂｌｆｒｏｎｔＣｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｏｒｍ１．ｓｈｏｗ；　
ｅｎｄ；　
　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　133 
ｐｒｏｃｅｄｕｒｅ　Ｔｆｒｍｄｔｂｚ．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｅｎｄ．　５．３
 编辑框的使用　５．３．１ 编辑框介绍　编辑框（Ｅｄｉｔ）控件我们在前几节就碰到了，它是应用程序最常用的控件之一，它的作用主要是让用
户输入文字。当用户在编辑框中输入文字时，ＴＥｄｉｔ控件的【Ｔｅｘｔ】属性总是编辑框的最新内容，并且将触
发【ＯｎＣｈａｎｇｅ】事件，表示编辑框的内容发生了变化。下面介绍编辑框控件常用的属性、方法和事件：　
　
属性、方法和事件　功能解释　
ＡｕｔｏＳｅｌｅｃｔ　当编辑框获得输入焦点时，编辑框中的文字是否自动被选中　
ＡｕｔｏＳｉｚｅ　是否随字体变化而自动变动尺寸　
ＭａｘＬｅｎｇｔｈ　最多可以输入的字符数，缺省时为０，表示可以输入任意多的字符　
ＯｎＣｈａｎｇｅ　由编辑框内容变化而引起的事件　
ＯｎＥｎｔｅｒ　由编辑框获取焦点而引起的事件　
ＯｎＫｅｙＰｒｅｓｓ　由编辑框中有按键按下而引起的事件　
ＰａｓｓｗｏｒｄＣｈａｒ　密码掩码属性，为＃０，没有掩码。为＊，则以＊掩码　
ＲｅａｄＯｎｌｙ　编辑框内容是否可以编辑　
Ｔｅｘｔ　显示和保存编辑框中的字符串　
Visible 
是否可见　
　第５章　　　控件的使用　
　134                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　５．３．２ 编辑框实例――密码检验编辑框　５．３．２．１ 程序描述　表单上有两个标签，两个编辑框，两个按钮，标签提示编辑框的功能，第一个编辑框用于输入用户名，
第二个编辑框用于输入密码，两个按钮一个是【确定】，一个是【取消】。　
如果密码编辑框的内容为空，那么【确定】按钮无效，假设用户名为【ｕｓｅｒ】，密码也为【ｕｓｅｒ】且不
加密。　５．３．２．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＰａｓｓＥｄｉｔ．ｐａｓ，保存工程为ＰａｓｓＥｄｉｔ．ｄｐｒ；　　
４、 放置控件：在表单上放置两个标签，两个编辑框，两个按钮，布置好，并把【Ｌａｂｅｌ１】的【Ｃａｐｔｉｏｎ】
属性修改为【Ｕｓｅｒ】，把【Ｌａｂｅｌ２】的【Ｃａｐｔｉｏｎ】属性修改为【Ｋｅｙ】，把【Ｂｕｔｔｏｎ１】的【Ｃａｐｔｉｏｎ】
属性修改为【ＯＫ】，把【Ｂｕｔｔｏｎ２】的【Ｃａｐｔｉｏｎ】属性修改为【Ｃａｎｃｅｌ】，清除【Ｅｄｉｔ１】和【Ｅｄｉｔ２】
的【Ｔｅｘｔ】属性，如图５．３－１所示：　
　　　　　　图
 5.3-1  界面布置图   图 5.3-2  程序运行界面图 ５、 修改【Ｅｄｉｔ２】为掩码类型：选中【Ｅｄｉｔ２】，在【Ｅｄｉｔ２】对象查看器中修改【ＰａｓｓｗｏｒｄＣｈａｒ】属
性为【＊】；　
６、 修改【Ｂｕｔｔｏｎ１】属性：选中【Ｂｕｔｔｏｎ１】，在【Ｂｕｔｔｏｎ１】的对象查看器中修改【Ｅｎａｂｌｅ】属性为
【Ｆａｌｓｅ】；　
７、 修改【Ｅｄｉｔ２】属性：选中【Ｅｄｉｔ２】，在【Ｅｄｉｔ２】的对象查看器中修改【Ｅｎａｂｌｅ】属性为【Ｆａｌｓｅ】；　
８、 添加【Ｅｄｉｔ１】的【ＯｎＣｈａｎｇｅ】代码：双击【Ｅｄｉｔ１】，在跳出来的代码编辑框中输入如下代码（阴
影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｄｉｔ１Ｃｈａｎｇｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　135 
｛若【Ｕｓｅｒ】框中有内容，那就让【Ｐａｓｓｗｏｒｄ】框有效，以便于继续输入密码｝　
　　ｉｆ　Ｅｄｉｔ１．Ｔｅｘｔ＜＞＇＇　ｔｈｅｎ　
　　　　Ｅｄｉｔ２．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
９、 添加【Ｅｄｉｔ２】的【ＯｎＣｈａｎｇｅ】代码：双击【Ｅｄｉｔ２】，在跳出来的代码编辑框中输入如下代码（阴
影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｄｉｔ１Ｃｈａｎｇｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
｛若【Ｐａｓｓｗｏｒｄ】框中有内容，那就让【ＯＫ】按钮有效，以便于继续检验密码｝　
　　ｉｆ　Ｅｄｉｔ２．Ｔｅｘｔ＜＞＇＇　ｔｈｅｎ　
　　　　Ｂｕｔｔｏｎ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
１０、添加【Ｂｕｔｔｏｎ１】的【ＯｎＣｌｉｃｋ】代码：双击【Ｂｕｔｔｏｎ１】，在跳出的代码编辑框中输入如下代码（阴
影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
｛若用户名、密码相符，则声音信息提示成功，否则声音信息提示不成功｝　
　　ｉｆ　（Ｅｄｉｔ１．Ｔｅｘｔ＝＇ｕｓｅｒ＇）ａｎｄ（Ｅｄｉｔ２．Ｔｅｘｔ＝＇ｕｓｅｒ＇）　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　　　ｍｅｓｓａｇｅｂｅｅｐ（０）；　
　　　　　　ｓｈｏｗｍｅｓｓａｇｅ（＇Ｐａｓｓｗｏｒｄ　ｏｋ！＇）　
　　　　ｅｎｄ　
　　ｅｌｓｅ　
　　　　ｂｅｇｉｎ　
　　　　　　ｍｅｓｓａｇｅｂｅｅｐ（０）；　
　　　　　　ｓｈｏｗｍｅｓｓａｇｅ（＇Ｐａｓｓｗｏｒｄ　ｎｏｔ　ｒｉｇｈｔ！＇）；　
　　　　ｅｎｄ；　
ｅｎｄ；　
１１、添加【Ｂｕｔｔｏｎ２】的【ＯｎＣｌｉｃｋ】代码：双击【Ｂｕｔｔｏｎ２】，在跳出的代码编辑框中输入如下代码（阴
影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
１２、再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
１３、编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图５．３－２所示：　　 第５章　　　控件的使用　
　136                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　５．３．２．３ 完整的程序代码　【ＰａｓｓＥｄｉｔ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＰａｓｓＥｄｉｔ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＰａｓｓＥｄｉｔ　ｉｎ　＇ＵｎｔＰａｓｓＥｄｉｔ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＰａｓｓＥｄｉｔ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　２９４　
　　Ｔｏｐ　＝　１３８　
　　Ｗｉｄｔｈ　＝　３１６　
　　Ｈｅｉｇｈｔ　＝　２２９　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ１：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　３２　
　　　　Ｔｏｐ　＝　３５　
　　　　Ｗｉｄｔｈ　＝　２９　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　137 
　　　　Ｃａｐｔｉｏｎ　＝　＇Ｕｓｅｒ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｌａｂｅｌ２：　ＴＬａｂｅｌ　
　　　　Ｌｅｆｔ　＝　３２　
　　　　Ｔｏｐ　＝　７７　
　　　　Ｗｉｄｔｈ　＝　２３　
　　　　Ｈｅｉｇｈｔ　＝　１６　
　　　　Ｃａｐｔｉｏｎ　＝　＇Ｋｅｙ＇　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ１：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　９６　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　１２１　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　ＯｎＣｈａｎｇｅ　＝　Ｅｄｉｔ１Ｃｈａｎｇｅ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ２：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　９６　
　　　　Ｔｏｐ　＝　７２　
　　　　Ｗｉｄｔｈ　＝　１２１　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　Ｅｎａｂｌｅｄ　＝　Ｆａｌｓｅ　
　　　　ＰａｓｓｗｏｒｄＣｈａｒ　＝　＇＊＇　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　　　ＯｎＣｈａｎｇｅ　＝　Ｅｄｉｔ２Ｃｈａｎｇｅ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　４０　
　　　　Ｔｏｐ　＝　１２８　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇ＯＫ＇　
　　　　Ｅｎａｂｌｅｄ　＝　Ｆａｌｓｅ　
　　　　ＴａｂＯｒｄｅｒ　＝　２　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ２：　ＴＢｕｔｔｏｎ　第５章　　　控件的使用　
　138                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　Ｌｅｆｔ　＝　１４４　
　　　　Ｔｏｐ　＝　１２８　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇Ｃａｎｃｅｌ＇　
　　　　ＴａｂＯｒｄｅｒ　＝　３　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ２Ｃｌｉｃｋ　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＰａｓｓＥｄｉｔ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＰａｓｓＥｄｉｔ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｌａｂｅｌ１：　ＴＬａｂｅｌ；　
　　　　Ｌａｂｅｌ２：　ＴＬａｂｅｌ；　
　　　　Ｅｄｉｔ１：　ＴＥｄｉｔ；　
　　　　Ｅｄｉｔ２：　ＴＥｄｉｔ；　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　Ｂｕｔｔｏｎ２：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｅｄｉｔ１Ｃｈａｎｇｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｅｄｉｔ２Ｃｈａｎｇｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　139 
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｄｉｔ１Ｃｈａｎｇｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　Ｅｄｉｔ１．Ｔｅｘｔ＜＞＇＇　ｔｈｅｎ　
　　　　Ｅｄｉｔ２．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｅｄｉｔ２Ｃｈａｎｇｅ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　Ｅｄｉｔ２．Ｔｅｘｔ＜＞＇＇　ｔｈｅｎ　
　　　　Ｂｕｔｔｏｎ１．Ｅｎａｂｌｅｄ：＝ｔｒｕｅ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　（Ｅｄｉｔ１．Ｔｅｘｔ＝＇ｕｓｅｒ＇）ａｎｄ（Ｅｄｉｔ２．Ｔｅｘｔ＝＇ｕｓｅｒ＇）　ｔｈｅｎ　
　　　　ｂｅｇｉｎ　
　　　　　　ｍｅｓｓａｇｅｂｅｅｐ（０）；　
　　　　　　ｓｈｏｗｍｅｓｓａｇｅ（＇Ｐａｓｓｗｏｒｄ　ｏｋ！＇）　
　　　　ｅｎｄ　
　　ｅｌｓｅ　
　　　　ｂｅｇｉｎ　
　　　　　　ｍｅｓｓａｇｅｂｅｅｐ（０）；　
　　　　　　ｓｈｏｗｍｅｓｓａｇｅ（＇Ｐａｓｓｗｏｒｄ　ｎｏｔ　ｒｉｇｈｔ！＇）；　
　　　　ｅｎｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｃｌｏｓｅ；　
ｅｎｄ；　
　
ｅｎｄ．　第５章　　　控件的使用　
　140                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　５．４ Ｍｅｍｏ的使用　５．４．１ Ｍｅｍｏ介绍　Ｍｅｍｏ控件是上一节我们所讨论的编辑框的扩展，它也是应用程序最常用的控件之一，它的作用主要是
让用户输入编辑多行文字。Ｍｅｍｏ位于控件盘的【Ｓｔａｎｄａｒｄ】页，它还有一个多功能方面扩展的控件，即位于
控件盘的【Ｗｉｎ３２】页的【ＲｉｃｈＥｄｉｔ】控件。下面介绍Ｍｅｍｏ控件常用的属性、方法和事件：　表
 5.4-1 属性、方法和事件　功能解释　
Ｆｏｎｔ　设定Ｍｅｍｏ中文字的字体，包括一系列子属性　
Ｌｉｎｅｓ　设定Ｍｅｍｏ中文字的内容　
ＲｅａｄＯｎｌｙ　控制Ｍｅｍｏ中文字的内容是否只读　
ＳｃｒｏｌｌＢａｒｓ　设定Ｍｅｍｏ框的上下左右滚动条　
ＷａｎｔＲｅｔｕｒｎｓ　控制Ｍｅｍｏ中文字的内容是否允许用户插入回车符号　
ＷｏｒｄＷｒａｐ　控制Ｍｅｍｏ中文字的内容是否自动插入软回车换行　
ＳｅｌＬｅｎｇｔｈ　设定Ｍｅｍｏ中被选中文字的长度　
ＳｅｌＳｔａｒｔ　设定Ｍｅｍｏ中被选中文字的开始位置　
ＳｅｌＴｅｘｔ　设置Ｍｅｍｏ中被选中文字内容　
Clear 
清除Ｍｅｍｏ中内容　
OnChange 
由改变Ｍｅｍｏ中内容而引起的事件　
　５．４．２
 Ｍｅｍｏ实例――Ｍｅｍｏ数据交换　５．４．２．１ 程序描述　程序演示：Ｍｅｍｏ与外部文件数据交换、Ｍｅｍｏ与剪切板（ＣｌｉｐＢｏａｒｄ）数据交换。表单上放置两个Ｍｅｍｏ
和四个按钮：按动按钮１，Ｍｅｍｏ１读入外部文件ＴｅｓｔＬｏａｄ．ｔｘｔ内容；按动按钮２，Ｍｅｍｏ１的内容拷贝到剪切
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　141 
板；按动按钮３，Ｍｅｍｏ２从剪切板读入内容；按动按钮４，Ｍｅｍｏ２的内容保存到外部文件ＴｅｓｔＳａｖｅ．ｔｘｔ。在读
取和保存外部文件时，程序调用控件盘【Ｄｉａｌｏｇｓ】（对话框）页中【ＯｐｅｎＤｉａｌｏｇ】（打开文件对话框）和
【ＳａｖｅＤｉａｌｏｇ】（保存文件对话框）两个控件。　５．４．２．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ．ｐａｓ，保存工程为
ＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ．ｄｐｒ；　　
４、 放置控件：在表单上放置两个Ｍｅｍｏ控件、四个按钮控件、一个ＯｐｅｎＤｉａｌｏｇ控件、一个ＳａｖｅＤｉａｌｏｇ
控件；设置Ｍｅｍｏ１、Ｍｅｍｏ２的ＳｃｒｏｌｌＢａｒｓ属性为【ｓｓＢｏｔｈ】；布置好之后，如图５．４－１所示：　
　图
 5.4-1  程序界面图 ５、 添加【打开文件】按钮代码：双击【打开文件】按钮，在代码编辑框中输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　ｏｐｅｎｄｉａｌｏｇ１．Ｅｘｅｃｕｔｅ　ｔｈｅｎ　
　　ｂｅｇｉｎ　
　　　　ｍｅｍｏ１．Ｃｌｅａｒ；　
　　　　ｍｅｍｏ１．Ｌｉｎｅｓ．ＬｏａｄＦｒｏｍＦｉｌｅ（ｏｐｅｎｄｉａｌｏｇ１．ＦｉｌｅＮａｍｅ）；　
　　ｅｎｄ；　
ｅｎｄ；　
６、 添加【拷贝】按钮代码：双击【拷贝】按钮，在代码编辑框中输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｍｅｍｏ１．ＣｏｐｙＴｏＣｌｉｐｂｏａｒｄ；　
ｅｎｄ；　
７、 添加【粘帖】按钮代码：双击【粘帖】按钮，在代码编辑框中输入如下代码：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ３Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　第５章　　　控件的使用　
　142                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　ｍｅｍｏ２．ＰａｓｔｅＦｒｏｍＣｌｉｐｂｏａｒｄ；　
ｅｎｄ；　
８、 添加【保存文件】按钮代码：双击【保存文件】按钮，在代码编辑框中输入如下代码：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ４Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　ｓａｖｅｄｉａｌｏｇ１．Ｅｘｅｃｕｔｅ　ｔｈｅｎ　
　　　　ｍｅｍｏ２．Ｌｉｎｅｓ．ＳａｖｅＴｏＦｉｌｅ（ＳａｖｅＤｉａｌｏｇ１．Ｆｉｌｅｎａｍｅ）；　
ｅｎｄ；　
９、 　再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
１０、　编译运行工程：按动【Ｆ９】快捷键，编译运行工程，完成。　５．４．２．３
 完整的程序代码　【ＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ　ｉｎ　＇ＵｎｔＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ．ｄｆｍ】　
　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　４２０　
　　Ｈｅｉｇｈｔ　＝　１８７　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　143 
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｍｅｍｏ１：　ＴＭｅｍｏ　
　　　　Ｌｅｆｔ　＝　１６　
　　　　Ｔｏｐ　＝　１６　
　　　　Ｗｉｄｔｈ　＝　１８５　
　　　　Ｈｅｉｇｈｔ　＝　８９　
　　　　Ｌｉｎｅｓ．Ｓｔｒｉｎｇｓ　＝　（　
　　　　　　＇Ｍｅｍｏ１＇）　
　　　　ＳｃｒｏｌｌＢａｒｓ　＝　ｓｓＢｏｔｈ　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｍｅｍｏ２：　ＴＭｅｍｏ　
　　　　Ｌｅｆｔ　＝　２１６　
　　　　Ｔｏｐ　＝　１６　
　　　　Ｗｉｄｔｈ　＝　１８５　
　　　　Ｈｅｉｇｈｔ　＝　８９　
　　　　Ｌｉｎｅｓ．Ｓｔｒｉｎｇｓ　＝　（　
　　　　　　＇Ｍｅｍｏ２＇）　
　　　　ＳｃｒｏｌｌＢａｒｓ　＝　ｓｓＢｏｔｈ　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　２４　
　　　　Ｔｏｐ　＝　１２０　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇打开文件＇　
　　　　ＴａｂＯｒｄｅｒ　＝　２　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ２：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　１１２　第５章　　　控件的使用　
　144                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　Ｔｏｐ　＝　１２０　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇拷贝＇　
　　　　ＴａｂＯｒｄｅｒ　＝　３　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ２Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ３：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　２４０　
　　　　Ｔｏｐ　＝　１２０　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇粘帖＇　
　　　　ＴａｂＯｒｄｅｒ　＝　４　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ３Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ４：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　３２８　
　　　　Ｔｏｐ　＝　１２０　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇保存文件＇　
　　　　ＴａｂＯｒｄｅｒ　＝　５　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ４Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ＯｐｅｎＤｉａｌｏｇ１：　ＴＯｐｅｎＤｉａｌｏｇ　
　　　　Ｌｅｆｔ　＝　１４４　
　　　　Ｔｏｐ　＝　４８　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ＳａｖｅＤｉａｌｏｇ１：　ＴＳａｖｅＤｉａｌｏｇ　
　　　　Ｌｅｆｔ　＝　３４４　
　　　　Ｔｏｐ　＝　４８　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＭｅｍｏＤａｔａＥｘｃｈａｎｇｅ；　
　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　145 
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｍｅｍｏ１：　ＴＭｅｍｏ；　
　　　　ＯｐｅｎＤｉａｌｏｇ１：　ＴＯｐｅｎＤｉａｌｏｇ；　
　　　　ＳａｖｅＤｉａｌｏｇ１：　ＴＳａｖｅＤｉａｌｏｇ；　
　　　　Ｍｅｍｏ２：　ＴＭｅｍｏ；　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　Ｂｕｔｔｏｎ２：　ＴＢｕｔｔｏｎ；　
　　　　Ｂｕｔｔｏｎ３：　ＴＢｕｔｔｏｎ；　
　　　　Ｂｕｔｔｏｎ４：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ３Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ４Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　ｏｐｅｎｄｉａｌｏｇ１．Ｅｘｅｃｕｔｅ　ｔｈｅｎ　
　　ｂｅｇｉｎ　
　　　　ｍｅｍｏ１．Ｃｌｅａｒ；　第５章　　　控件的使用　
　146                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　ｍｅｍｏ１．Ｌｉｎｅｓ．ＬｏａｄＦｒｏｍＦｉｌｅ（ｏｐｅｎｄｉａｌｏｇ１．ＦｉｌｅＮａｍｅ）；　
　　ｅｎｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｍｅｍｏ１．ＣｏｐｙＴｏＣｌｉｐｂｏａｒｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ３Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｍｅｍｏ２．ＰａｓｔｅＦｒｏｍＣｌｉｐｂｏａｒｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ４Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｉｆ　ｓａｖｅｄｉａｌｏｇ１．Ｅｘｅｃｕｔｅ　ｔｈｅｎ　
　　　　ｍｅｍｏ２．Ｌｉｎｅｓ．ＳａｖｅＴｏＦｉｌｅ（ＳａｖｅＤｉａｌｏｇ１．Ｆｉｌｅｎａｍｅ）；　
ｅｎｄ；　
ｅｎｄ．　
　５．４．３
 Ｍｅｍｏ实例――Ｍｅｍｏ的查找功能　５．４．３．１ 程序描述　Ｍｅｍｏ控件经常用于编制诸如记事本、文本编辑器之类的应用程序，在这类应用程序里“查找”功能是
必不可少的功能之一。本例通过一个简单的的Ｍｅｍｏ内容查找功能程序，介绍了这一功能的实现方法。同时，
本例还将介绍如何把Ｄｅｌｐｈｉ系统帮助文件中的例程引入到我们自己的程序中，从而简化程序的编制复杂度。　５．４．３．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　147 
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＭｅｍｏＦｉｎｄ．ｐａｓ，保存工程为ＭｅｍｏＦｉｎｄ．ｄｐｒ；　　
４、 界面设计：在表单【Ｆｏｒｍ１】上放置一个【Ｍｅｍｏ】控件，名为【Ｍｅｍｏ１】，设置【Ｍｅｍｏ１】的【ＳｃｒｏｌｌＢａｒｓ】
属性为【ｓｓＢｏｔｈ】，点击【Ｍｅｍｏ１】对象查看器中【Ｌｉｎｅｓ】属性右边的【…】按钮，在跳出的【Ｓｔｒｉｎｇ　
Ｌｉｓｔ　Ｅｄｉｔｏｒ】中输入【Ｍｅｍｏ１】的内容；在表单【Ｆｏｒｍ１】上放置一个【ＦｉｎｄＤｉａｌｏｇ】控件，名为
【ＦｉｎｄＤｉａｌｏｇ１】；在表单上【Ｆｏｒｍ１】上放置一个【Ｂｕｔｔｏｎ】控件，名为【Ｂｕｔｔｏｎ１】，设置【Ｂｕｔｔｏｎ１】
的【Ｃａｐｔｉｏｎ】属性为【查找】，调整界面，界面图如图５．４－２所示：　
　　　图
 5.4-2   程序界面图 图 5.4-3  运行界面图 ５、 编写程序代码：双击【Ｂｕｔｔｏｎ１】按钮，输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｉｎｄｄｉａｌｏｇ１．Ｅｘｅｃｕｔｅ；　
ｅｎｄ；　
这段程序用于控制查找对话框的执行；　
双击【ＦｉｎｄＤｉａｌｏｇ１】的对象查看器【Ｅｖｅｎｔｓ】页中的【ＯｎＦｉｎｄ】事件右边空白处，输入如下代码
（阴影部分）：　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｉｎｄＤｉａｌｏｇ１Ｆｉｎｄ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　Ｉ，　Ｊ，　ＰｏｓＲｅｔｕｒｎ，　ＳｋｉｐＣｈａｒｓ：　Ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
　　ｆｏｒ　Ｉ　：＝　０　ｔｏ　Ｍｅｍｏ１．Ｌｉｎｅｓ．Ｃｏｕｎｔ　ｄｏ　
　　ｂｅｇｉｎ　
　　　　ＰｏｓＲｅｔｕｒｎ　：＝　Ｐｏｓ（ＦｉｎｄＤｉａｌｏｇ１．ＦｉｎｄＴｅｘｔ，Ｍｅｍｏ１．Ｌｉｎｅｓ［Ｉ］）；　
　　　　ｉｆ　ＰｏｓＲｅｔｕｒｎ　＜＞　０　ｔｈｅｎ　｛ｆｏｕｎｄ！｝　
　　　　ｂｅｇｉｎ　
　　　　　　Ｓｋｉｐｃｈａｒｓ　：＝　０；　
　　　　　　ｆｏｒ　Ｊ　：＝　０　ｔｏ　Ｉ　－　１　ｄｏ　
　　　　　　　　Ｓｋｉｐｃｈａｒｓ　：＝　Ｓｋｉｐｃｈａｒｓ　＋　Ｌｅｎｇｔｈ（Ｍｅｍｏ１．Ｌｉｎｅｓ［Ｊ］）；　
　　　　　　ＳｋｉｐＣｈａｒｓ　：＝　ＳｋｉｐＣｈａｒｓ　＋　（Ｉ＊２）；　第５章　　　控件的使用　
　148                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　　　ＳｋｉｐＣｈａｒｓ　：＝　ＳｋｉｐＣｈａｒｓ　＋　ＰｏｓＲｅｔｕｒｎ　－　１；　
　　　　　　Ｍｅｍｏ１．ＳｅｔＦｏｃｕｓ；　
　　　　　　Ｍｅｍｏ１．ＳｅｌＳｔａｒｔ　：＝　ＳｋｉｐＣｈａｒｓ；　
　　　　　　Ｍｅｍｏ１．ＳｅｌＬｅｎｇｔｈ　：＝　Ｌｅｎｇｔｈ（ＦｉｎｄＤｉａｌｏｇ１．ＦｉｎｄＴｅｘｔ）；　
　　　　　　Ｂｒｅａｋ；　
　　　　ｅｎｄ；　
　　ｅｎｄ；　
ｅｎｄ；　
这段代码用于实现【ＦｉｎｄＤｉａｌｏｇ１】的查找标记过程：【Ｂｕｔｔｏｎ１】调用【ＦｉｎｄＤｉａｌｏｇ１】→用户在
【ＦｉｎｄＤｉａｌｏｇ１】中输入待查找内容→触发【ＦｉｎｄＤｉａｌｏｇ１】的【ＯｎＦｉｎｄ】事件，执行上述代码→如果
查找到，那么【Ｐｏｓ】函数返回非０值→通过【ＳｅｌＳｔａｒｔ】、【ＳｅｌＬｅｎｇｔｈ】等函数，把查找到内容点亮
→完成查找。　
★ 这段代码是【ＴＣｕｓｔｏｍＥｄｉｔ．ＳｅｌＬｅｎｇｔｈ】的【Ｅｘａｍｐｌｅ】，选中【Ｍｅｍｏ１】，按动【Ｆ１】，选择【ＴＭｅｍｏ】
的【Ｐｒｏｐｅｒｔｉｅｓ】，点击【ＳｅｌＬｅｎｇｔｈ】属性，点击【Ｅｘａｍｐｌｅ】，即可调出本例，请把上述代码和
帮助文件内容相对照学习。　
６、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
７、 编译运行工程：按动【Ｆ９】快捷键，编译运行工程，运行界面如图５．４－３所示：　　５．４．３．３
 完整的程序代码　【ＭｅｍｏＦｉｎｄ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＭｅｍｏＦｉｎｄ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＭｅｍｏＦｉｎｄ　ｉｎ　＇ＵｎｔＭｅｍｏＦｉｎｄ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＭｅｍｏＦｉｎｄ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９６　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　149 
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　４５５　
　　Ｈｅｉｇｈｔ　＝　２３２　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｍｅｍｏ１：　ＴＭｅｍｏ　
　　　　Ｌｅｆｔ　＝　８　
　　　　Ｔｏｐ　＝　８　
　　　　Ｗｉｄｔｈ　＝　４２５　
　　　　Ｈｅｉｇｈｔ　＝　１４５　
　　　　Ｌｉｎｅｓ．Ｓｔｒｉｎｇｓ　＝　（　
　　　　　　＇Ｔｈｅ　ｆｏｌｌｏｗｉｎｇ　ＯｎＦｉｎｄ　ｅｖｅｎｔ　ｈａｎｄｌｅｒ　ｓｅａｒｃｈｅｓ　ａ　ｍｅｍｏ　ｃｏｍｐｏｎｅｎｔ　ｆｏｒ＇　
　　　　　　＇　ｔｈｅ　ｔｅｘｔ　ｓｐｅｃｉｆｉｅｄ　ｉｎ　ｔｈｅ　ＦｉｎｄＴｅｘｔ　ｐｒｏｐｅｒｔｙ　ｏｆ　ａ　ｆｉｎｄ　ｄｉａｌｏｇ＇　
　　　　　　＇　ｃｏｍｐｏｎｅｎｔ．　Ｉｆ　ｆｏｕｎｄ，　ｔｈｅ　ｆｉｒｓｔ　ｏｃｃｕｒｒｅｎｃｅ　ｏｆ　ｔｈｅ　ｔｅｘｔ　ｉｎ　Ｍｅｍｏ１＇　
　　　　　　＇　ｉｓ　ｓｅｌｅｃｔｅｄ．　Ｔｈｅ　ｃｏｄｅ　ｕｓｅｓ　ｔｈｅ　Ｐｏｓ　ｆｕｎｃｔｉｏｎ　ｔｏ　ｃｏｍｐａｒｅ　ｓｔｒｉｎｇｓ，＇　
　　　　　　＇　ａｎｄ　ｓｔｏｒｅｓ　ｔｈｅ　ｎｕｍｂｅｒ　ｏｆ　ｃｈａｒａｃｔｅｒｓ　ｔｏ　ｓｋｉｐ　ｗｈｅｎ　ｄｅｔｅｒｍｉｎｉｎｇ　＇　
　　　　　　＇ｔｈｅ　ｓｅｌｅｃｔｉｏｎ　ｐｏｓｉｔｉｏｎ　ｉｎ　ｔｈｅ　ＳｋｉｐＣｈａｒｓ　ｖａｒｉａｂｌｅ．　Ｂｅｃａｕｓｅ　ｔｈｅｒｅ　＇　
　　　　　　＇ｉｓ　ｎｏ　ｈａｎｄｌｉｎｇ　ｏｆ　ｃａｓｅ，　ｗｈｏｌｅ　ｗｏｒｄ，　ｏｒ　ｓｅａｒｃｈ　ｄｉｒｅｃｔｉｏｎ　ｉｎ　ｔｈｉｓ　＇　
　　　　　　　
　　　　　　　　＇ａｌｇｏｒｉｔｈｍ，　ｉｔ　ｉｓ　ａｓｓｕｍｅｄ　ｔｈａｔ　ｔｈｅ　Ｏｐｔｉｏｎｓ　ｐｒｏｐｅｒｔｙ　ｏｆ　ＦｉｎｄＤｉａｌｏｇ＇　＋　
　　　　　　　　＇１＇　
　　　　　　＇　ｗａｓ　ｓｅｔ　ｔｏ　［ｆｒＨｉｄｅＭａｔｃｈＣａｓｅ，　ｆｒＨｉｄｅＷｈｏｌｅＷｏｒｄ，　ｆｒＨｉｄｅＵｐＤｏｗｎ］．＇）　
　　　　ＳｃｒｏｌｌＢａｒｓ　＝　ｓｓＢｏｔｈ　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　１５２　
　　　　Ｔｏｐ　＝　１６８　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　第５章　　　控件的使用　
　150                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　　　　　Ｃａｐｔｉｏｎ　＝　＇查找＇　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　ＦｉｎｄＤｉａｌｏｇ１：　ＴＦｉｎｄＤｉａｌｏｇ　
　　　　Ｏｐｔｉｏｎｓ　＝　［ｆｒＤｏｗｎ，　ｆｒＨｉｄｅＭａｔｃｈＣａｓｅ，　ｆｒＨｉｄｅＷｈｏｌｅＷｏｒｄ，　ｆｒＨｉｄｅＵｐＤｏｗｎ］　
　　　　ＯｎＦｉｎｄ　＝　ＦｉｎｄＤｉａｌｏｇ１Ｆｉｎｄ　
　　　　Ｌｅｆｔ　＝　３６８　
　　　　Ｔｏｐ　＝　８８　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＭｅｍｏＦｉｎｄ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＭｅｍｏＦｉｎｄ；　
　
ｉｎｔｅｒｆａｃｅ　
　
ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｍｅｍｏ１：　ＴＭｅｍｏ；　
　　　　ＦｉｎｄＤｉａｌｏｇ１：　ＴＦｉｎｄＤｉａｌｏｇ；　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　ｐｒｏｃｅｄｕｒｅ　ＦｉｎｄＤｉａｌｏｇ１Ｆｉｎｄ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　151 
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．ＦｉｎｄＤｉａｌｏｇ１Ｆｉｎｄ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｖａｒ　
　　Ｉ，　Ｊ，　ＰｏｓＲｅｔｕｒｎ，　ＳｋｉｐＣｈａｒｓ：　Ｉｎｔｅｇｅｒ；　
ｂｅｇｉｎ　
　　ｆｏｒ　Ｉ　：＝　０　ｔｏ　Ｍｅｍｏ１．Ｌｉｎｅｓ．Ｃｏｕｎｔ　ｄｏ　
　　ｂｅｇｉｎ　
　　　　ＰｏｓＲｅｔｕｒｎ　：＝　Ｐｏｓ（ＦｉｎｄＤｉａｌｏｇ１．ＦｉｎｄＴｅｘｔ，Ｍｅｍｏ１．Ｌｉｎｅｓ［Ｉ］）；　
　　　　ｉｆ　ＰｏｓＲｅｔｕｒｎ　＜＞　０　ｔｈｅｎ　｛ｆｏｕｎｄ！｝　
　　　　ｂｅｇｉｎ　
　　　　　　Ｓｋｉｐｃｈａｒｓ　：＝　０；　
　　　　　　ｆｏｒ　Ｊ　：＝　０　ｔｏ　Ｉ　－　１　ｄｏ　
　　　　　　　　Ｓｋｉｐｃｈａｒｓ　：＝　Ｓｋｉｐｃｈａｒｓ　＋　Ｌｅｎｇｔｈ（Ｍｅｍｏ１．Ｌｉｎｅｓ［Ｊ］）；　
　　　　　　ＳｋｉｐＣｈａｒｓ　：＝　ＳｋｉｐＣｈａｒｓ　＋　（Ｉ＊２）；　
　　　　　　ＳｋｉｐＣｈａｒｓ　：＝　ＳｋｉｐＣｈａｒｓ　＋　ＰｏｓＲｅｔｕｒｎ　－　１；　
　
　　　　　　Ｍｅｍｏ１．ＳｅｔＦｏｃｕｓ；　
　　　　　　Ｍｅｍｏ１．ＳｅｌＳｔａｒｔ　：＝　ＳｋｉｐＣｈａｒｓ；　
　　　　　　Ｍｅｍｏ１．ＳｅｌＬｅｎｇｔｈ　：＝　Ｌｅｎｇｔｈ（ＦｉｎｄＤｉａｌｏｇ１．ＦｉｎｄＴｅｘｔ）；　
　　　　　　Ｂｒｅａｋ；　
　　　　ｅｎｄ；　
　　ｅｎｄ；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｆｉｎｄｄｉａｌｏｇ１．Ｅｘｅｃｕｔｅ；　
ｅｎｄ；　
　
ｅｎｄ．　
　
　第５章　　　控件的使用　
　152                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　５．５ 按钮的使用　５．５．１ 按钮介绍　按钮是程序中最为常用的控件，在前面所介绍的例程中我们也大量接触到按钮的应用实例。按钮一般
是一个矩形控件，包括一个文本标题或者一个图形标题，当用户按动按钮时，触发某一事件，执行某一程序。　
Ｄｅｌｐｈｉ为我们提供了功能丰富的按钮，主要有标准按钮（【Ｓｔａｎｄａｒｄ】页中的【Ｂｕｔｔｏｎ】控件）、位图
按钮（【Ａｄｄｉｔｉｏｎａｌ】页中的【ＢｉｔＢｔｎ】）、快捷按钮（【Ａｄｄｉｔｉｏｎａｌ】页中的【ＳｐｅｅｄＢｕｔｔｏｎ】）等三大类按钮。　
下面简单介绍这些控件常用的属性、方法和事件：　表
 5.5-1  Button控件常用的属性、方法和事件 属性、方法和事件　功能解释　
Ｃａｎｃｅｌ　确定按钮是否支持【ＥＳＣ】键　
Ｃａｐｔｉｏｎ　设置按钮的标题　
Ｃｕｒｓｏｒ　设置按钮的鼠标　
Ｄｅｆａｕｌｔ　确定按钮是否支持【Ｅｎｔｅｒ】键　
Ｅｎａｂｌｅｄ　确定按钮是否被激活　
Ｈｉｎｔ　设置按钮的提示信息　
Ｎａｍｅ　设置按钮的名字　
ＯｎＣｌｉｃｋ　处理由单击鼠标按钮触发的事件　
　表
 5.5-2  BitBtn控件常用的属性、方法和事件 属性、方法和事件　功能解释　
Ｃａｎｃｅｌ　确定按钮是否支持【ＥＳＣ】键　
Ｃａｐｔｉｏｎ　设置按钮的标题　
Ｃｕｒｓｏｒ　设置按钮的鼠标　
Ｄｅｆａｕｌｔ　确定按钮是否支持【Ｅｎｔｅｒ】键　
Ｅｎａｂｌｅｄ　确定按钮是否被激活　
Ｇｌｙｐｈ　确定显示在按钮上的位图　
Ｋｉｎｄ　确定按钮的类型　
Ｎａｍｅ　设置按钮的名字　
ＯｎＣｌｉｃｋ　处理由单击鼠标按钮触发的事件　
　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　153 表
 5.5-3  SpeedButton控件常用的属性、方法和事件 属性、方法和事件　功能解释　
Ａｃｔｉｏｎ　按钮的动作　
Ｃａｐｔｉｏｎ　设置按钮的标题　
Ｃｕｒｓｏｒ　设置按钮的鼠标　
Ｅｎａｂｌｅｄ　确定按钮是否被激活　
Ｇｌｙｐｈ　确定显示在按钮上的位图　
Ｎａｍｅ　设置按钮的名字　
ＯｎＣｌｉｃｋ　处理由单击鼠标按钮触发的事件　
Ｔｒａｎｓｐａｒｅｎｔ　确定按钮的是否透明　
　５．５．２
 按钮实例――支持键盘的按钮　５．５．２．１ 程序描述　程序实现：鼠标点击【Ｃａｎｃｅｌ】按钮，显示信息“Ｃａｎｃｅｌｉｎｇ……”；鼠标点击【ＯＫ】按钮，显示信息
“ＯＫ”；按动【Ｅｓｃ】键，显示信息“Ｃａｎｃｅｌｉｎｇ……”；按动【Ｅｎｔｅｒ】键，显示信息“ＯＫ”。　５．５．２．２
 设计详细步骤　１、 进入Ｄｅｌｐｈｉ编程环境；　　
２、 新建工程：选择菜单【Ｆｉｌｅ→Ｎｅｗ　Ａｐｐｌｉｃａｔｉｏｎ】，新建一个工程；　　
３、 保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】，保存单元为ＵｎｔＫｅｙＢｕｔｔｏｎ．ｐａｓ，保存工程为
ＫｅｙＢｕｔｔｏｎ．ｄｐｒ；　　
４、 界面设计：在【Ｆｏｒｍ１】表单上放置一个【Ｅｄｉｔ】控件，名为【Ｅｄｉｔ１】；在【Ｆｏｒｍ１】表单上放置
两个【Ｂｕｔｔｏｎ】控件，名为【Ｂｕｔｔｏｎ１】和【Ｂｕｔｔｏｎ２】；设置【Ｂｕｔｔｏｎ１】按钮的【Ｃａｐｔｉｏｎ】属性
为【Ｃａｎｃｅｌ】，【Ｃａｎｃｅｌ】属性为【Ｔｒｕｅ】；设置【Ｂｕｔｔｏｎ２】按钮的【Ｃａｐｔｉｏｎ】属性为【ＯＫ】，【Ｄｅｆａｕｌｔ】
属性为【Ｔｒｕｅ】；　
５、 代码设计：双击【Ｂｕｔｔｏｎ１】，输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇Ｃａｎｃｅｌｉｎｇ……＇）；　
ｅｎｄ；　
双击【Ｂｕｔｔｏｎ２】，输入如下代码（阴影部分）：　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　第５章　　　控件的使用　
　154                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　ｂｅｇｉｎ　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇ＯＫ＇）；　
ｅｎｄ；　
　
６、 再次保存工程：选择菜单【Ｆｉｌｅ→Ｓａｖｅ　Ａｌｌ】；　　
７、 编译运行工程：按动【Ｆ９】快捷键，编译运行工程，完成程序设计。　
　５．５．２．３
 完整的程序代码　【ＫｅｙＢｕｔｔｏｎ．ｄｐｒ】　
ｐｒｏｇｒａｍ　ＫｅｙＢｕｔｔｏｎ；　
　
ｕｓｅｓ　
　　Ｆｏｒｍｓ，　
　　ＵｎｔＫｅｙＢｕｔｔｏｎ　ｉｎ　＇ＵｎｔＫｅｙＢｕｔｔｏｎ．ｐａｓ＇　｛Ｆｏｒｍ１｝；　
　
｛￥Ｒ　＊．ＲＥＳ｝　
　
ｂｅｇｉｎ　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｉｎｉｔｉａｌｉｚｅ；　
　　Ａｐｐｌｉｃａｔｉｏｎ．ＣｒｅａｔｅＦｏｒｍ（ＴＦｏｒｍ１，　Ｆｏｒｍ１）；　
　　Ａｐｐｌｉｃａｔｉｏｎ．Ｒｕｎ；　
ｅｎｄ．　
　
【ＵｎｔＫｅｙＢｕｔｔｏｎ．ｄｆｍ】　
ｏｂｊｅｃｔ　Ｆｏｒｍ１：　ＴＦｏｒｍ１　
　　Ｌｅｆｔ　＝　１９２　
　　Ｔｏｐ　＝　１２４　
　　Ｗｉｄｔｈ　＝　２６０　
　　Ｈｅｉｇｈｔ　＝　１５３　
　　Ｃａｐｔｉｏｎ　＝　＇Ｆｏｒｍ１＇　
　　Ｃｏｌｏｒ　＝　ｃｌＢｔｎＦａｃｅ　
　　Ｆｏｎｔ．Ｃｈａｒｓｅｔ　＝　ＤＥＦＡＵＬＴ＿ＣＨＡＲＳＥＴ　
　　Ｆｏｎｔ．Ｃｏｌｏｒ　＝　ｃｌＷｉｎｄｏｗＴｅｘｔ　
　　Ｆｏｎｔ．Ｈｅｉｇｈｔ　＝　－１３　
　　Ｆｏｎｔ．Ｎａｍｅ　＝　＇ＭＳ　Ｓａｎｓ　Ｓｅｒｉｆ＇　
　　Ｆｏｎｔ．Ｓｔｙｌｅ　＝　［］　
　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　155 
　　ＯｌｄＣｒｅａｔｅＯｒｄｅｒ　＝　Ｆａｌｓｅ　
　　ＰｉｘｅｌｓＰｅｒＩｎｃｈ　＝　１２０　
　　ＴｅｘｔＨｅｉｇｈｔ　＝　１６　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　２４　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｎｃｅｌ　＝　Ｔｒｕｅ　
　　　　Ｃａｐｔｉｏｎ　＝　＇Ｃａｎｃｅｌ＇　
　　　　ＴａｂＯｒｄｅｒ　＝　１　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｂｕｔｔｏｎ２：　ＴＢｕｔｔｏｎ　
　　　　Ｌｅｆｔ　＝　１３６　
　　　　Ｔｏｐ　＝　３２　
　　　　Ｗｉｄｔｈ　＝　７５　
　　　　Ｈｅｉｇｈｔ　＝　２５　
　　　　Ｃａｐｔｉｏｎ　＝　＇ＯＫ＇　
　　　　Ｄｅｆａｕｌｔ　＝　Ｔｒｕｅ　
　　　　ＴａｂＯｒｄｅｒ　＝　２　
　　　　ＯｎＣｌｉｃｋ　＝　Ｂｕｔｔｏｎ２Ｃｌｉｃｋ　
　　ｅｎｄ　
　　ｏｂｊｅｃｔ　Ｅｄｉｔ１：　ＴＥｄｉｔ　
　　　　Ｌｅｆｔ　＝　４８　
　　　　Ｔｏｐ　＝　８０　
　　　　Ｗｉｄｔｈ　＝　１２１　
　　　　Ｈｅｉｇｈｔ　＝　２４　
　　　　ＴａｂＯｒｄｅｒ　＝　０　
　　　　Ｔｅｘｔ　＝　＇Ｅｄｉｔ１＇　
　　ｅｎｄ　
ｅｎｄ　
　
【ＵｎｔＫｅｙＢｕｔｔｏｎ．ｐａｓ】　
ｕｎｉｔ　ＵｎｔＫｅｙＢｕｔｔｏｎ；　
　
ｉｎｔｅｒｆａｃｅ　
　第５章　　　控件的使用　
　156                                        编程魔法师ＤＥＬＰＨＩ入门实战百例
　ｕｓｅｓ　
　　Ｗｉｎｄｏｗｓ，　Ｍｅｓｓａｇｅｓ，　ＳｙｓＵｔｉｌｓ，　Ｃｌａｓｓｅｓ，　Ｇｒａｐｈｉｃｓ，　Ｃｏｎｔｒｏｌｓ，　Ｆｏｒｍｓ，　Ｄｉａｌｏｇｓ，　
　　ＳｔｄＣｔｒｌｓ；　
　
ｔｙｐｅ　
　　ＴＦｏｒｍ１　＝　ｃｌａｓｓ（ＴＦｏｒｍ）　
　　　　Ｂｕｔｔｏｎ１：　ＴＢｕｔｔｏｎ；　
　　　　Ｂｕｔｔｏｎ２：　ＴＢｕｔｔｏｎ；　
　　　　Ｅｄｉｔ１：　ＴＥｄｉｔ；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　　　ｐｒｏｃｅｄｕｒｅ　Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
　　ｐｒｉｖａｔｅ　
　　　　｛　Ｐｒｉｖａｔｅ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｐｕｂｌｉｃ　
　　　　｛　Ｐｕｂｌｉｃ　ｄｅｃｌａｒａｔｉｏｎｓ　｝　
　　ｅｎｄ；　
　
ｖａｒ　
　　Ｆｏｒｍ１：　ＴＦｏｒｍ１；　
　
ｉｍｐｌｅｍｅｎｔａｔｉｏｎ　
　
｛￥Ｒ　＊．ＤＦＭ｝　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ１Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇Ｃａｎｃｅｌｉｎｇ……＇）；　
ｅｎｄ；　
　
ｐｒｏｃｅｄｕｒｅ　ＴＦｏｒｍ１．Ｂｕｔｔｏｎ２Ｃｌｉｃｋ（Ｓｅｎｄｅｒ：　ＴＯｂｊｅｃｔ）；　
ｂｅｇｉｎ　
　　ｓｈｏｗｍｅｓｓａｇｅ（＇ＯＫ＇）；　
ｅｎｄ；　
　
ｅｎｄ．　